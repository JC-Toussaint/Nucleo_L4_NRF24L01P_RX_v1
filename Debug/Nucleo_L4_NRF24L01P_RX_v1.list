
Nucleo_L4_NRF24L01P_RX_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003bc0  08003bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c78  08003c78  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08003c78  08003c78  00013c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c80  08003c80  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003c80  08003c80  00013c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003c88  08003c88  00013c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000080  08003d10  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003d10  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b7e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207e  00000000  00000000  00033c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000b5b3  00000000  00000000  00035cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  00041260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ac8  00000000  00000000  00041d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cb8  00000000  00000000  00042828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011fbb  00000000  00000000  000454e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed48d  00000000  00000000  0005749b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00144928  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020ac  00000000  00000000  0014497c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ba4 	.word	0x08003ba4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08003ba4 	.word	0x08003ba4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <TM_NRF24L01_InitPins>:
//uint8_t TM_NRF24L01_RxFifoEmpty(void);

static TM_NRF24L01_t TM_NRF24L01_Struct;
/**********************************************************************************************************/
void TM_NRF24L01_InitPins(void)
{
 8000578:	b508      	push	{r3, lr}
   /* CSN high = disable SPI */
   NRF24L01_CSN_HIGH;
 800057a:	2201      	movs	r2, #1
 800057c:	2110      	movs	r1, #16
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f000 fc5b 	bl	8000e3c <HAL_GPIO_WritePin>

   /* CE low = disable TX/RX */
   NRF24L01_CE_LOW;
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000590:	f000 fc54 	bl	8000e3c <HAL_GPIO_WritePin>
}
 8000594:	bd08      	pop	{r3, pc}

08000596 <NRF24L01_FlushTX>:
/**********************************************************************************************************/
void NRF24L01_FlushTX(SPI_HandleTypeDef *hspi)
{
 8000596:	b510      	push	{r4, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	4604      	mov	r4, r0
	uint8_t pData = NRF24L01_FLUSH_TX_MASK;
 800059c:	23e1      	movs	r3, #225	; 0xe1
 800059e:	f88d 3007 	strb.w	r3, [sp, #7]
	do{
				NRF24L01_CSN_LOW;
 80005a2:	2200      	movs	r2, #0
 80005a4:	2110      	movs	r1, #16
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005aa:	f000 fc47 	bl	8000e3c <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(hspi, &pData, 1, 200);
 80005ae:	23c8      	movs	r3, #200	; 0xc8
 80005b0:	2201      	movs	r2, #1
 80005b2:	f10d 0107 	add.w	r1, sp, #7
 80005b6:	4620      	mov	r0, r4
 80005b8:	f001 fe36 	bl	8002228 <HAL_SPI_Transmit>
				NRF24L01_CSN_HIGH;
 80005bc:	2201      	movs	r2, #1
 80005be:	2110      	movs	r1, #16
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f000 fc3a 	bl	8000e3c <HAL_GPIO_WritePin>
	}while(0);

}
 80005c8:	b002      	add	sp, #8
 80005ca:	bd10      	pop	{r4, pc}

080005cc <NRF24L01_FlushRX>:
/**********************************************************************************************************/
void NRF24L01_FlushRX(SPI_HandleTypeDef *hspi)
{
 80005cc:	b510      	push	{r4, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	4604      	mov	r4, r0
	uint8_t pData = NRF24L01_FLUSH_RX_MASK;
 80005d2:	23e2      	movs	r3, #226	; 0xe2
 80005d4:	f88d 3007 	strb.w	r3, [sp, #7]
	do{
				NRF24L01_CSN_LOW;
 80005d8:	2200      	movs	r2, #0
 80005da:	2110      	movs	r1, #16
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f000 fc2c 	bl	8000e3c <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(hspi, &pData, 1, 200);
 80005e4:	23c8      	movs	r3, #200	; 0xc8
 80005e6:	2201      	movs	r2, #1
 80005e8:	f10d 0107 	add.w	r1, sp, #7
 80005ec:	4620      	mov	r0, r4
 80005ee:	f001 fe1b 	bl	8002228 <HAL_SPI_Transmit>
				NRF24L01_CSN_HIGH;
 80005f2:	2201      	movs	r2, #1
 80005f4:	2110      	movs	r1, #16
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f000 fc1f 	bl	8000e3c <HAL_GPIO_WritePin>
	}while(0);
}
 80005fe:	b002      	add	sp, #8
 8000600:	bd10      	pop	{r4, pc}

08000602 <TM_NRF24L01_WriteRegister>:
/**********************************************************************************************************/
void TM_NRF24L01_WriteRegister(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t value)
{
 8000602:	b530      	push	{r4, r5, lr}
 8000604:	b085      	sub	sp, #20
 8000606:	4605      	mov	r5, r0
 8000608:	460c      	mov	r4, r1
 800060a:	f88d 2007 	strb.w	r2, [sp, #7]
   NRF24L01_CSN_LOW;
 800060e:	2200      	movs	r2, #0
 8000610:	2110      	movs	r1, #16
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f000 fc11 	bl	8000e3c <HAL_GPIO_WritePin>

   uint8_t pData = NRF24L01_WRITE_REGISTER_MASK(reg);
 800061a:	f004 041f 	and.w	r4, r4, #31
 800061e:	f044 0420 	orr.w	r4, r4, #32
 8000622:	f88d 400f 	strb.w	r4, [sp, #15]
   HAL_SPI_Transmit(hspi, &pData, 1, 200);
 8000626:	23c8      	movs	r3, #200	; 0xc8
 8000628:	2201      	movs	r2, #1
 800062a:	f10d 010f 	add.w	r1, sp, #15
 800062e:	4628      	mov	r0, r5
 8000630:	f001 fdfa 	bl	8002228 <HAL_SPI_Transmit>
   HAL_SPI_Transmit(hspi, &value, 1, 200);
 8000634:	23c8      	movs	r3, #200	; 0xc8
 8000636:	2201      	movs	r2, #1
 8000638:	f10d 0107 	add.w	r1, sp, #7
 800063c:	4628      	mov	r0, r5
 800063e:	f001 fdf3 	bl	8002228 <HAL_SPI_Transmit>

   NRF24L01_CSN_HIGH;
 8000642:	2201      	movs	r2, #1
 8000644:	2110      	movs	r1, #16
 8000646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064a:	f000 fbf7 	bl	8000e3c <HAL_GPIO_WritePin>
}
 800064e:	b005      	add	sp, #20
 8000650:	bd30      	pop	{r4, r5, pc}

08000652 <TM_NRF24L01_WriteRegisterMulti>:
/**********************************************************************************************************/
void TM_NRF24L01_WriteRegisterMulti(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t *data, uint8_t count)
{
 8000652:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000654:	b083      	sub	sp, #12
 8000656:	4605      	mov	r5, r0
 8000658:	460c      	mov	r4, r1
 800065a:	4616      	mov	r6, r2
 800065c:	461f      	mov	r7, r3
	 NRF24L01_CSN_LOW;
 800065e:	2200      	movs	r2, #0
 8000660:	2110      	movs	r1, #16
 8000662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000666:	f000 fbe9 	bl	8000e3c <HAL_GPIO_WritePin>

	 uint8_t pData = NRF24L01_WRITE_REGISTER_MASK(reg);
 800066a:	f004 041f 	and.w	r4, r4, #31
 800066e:	f044 0420 	orr.w	r4, r4, #32
 8000672:	f88d 4007 	strb.w	r4, [sp, #7]
	 HAL_SPI_Transmit(hspi, &pData, 1, 200);
 8000676:	23c8      	movs	r3, #200	; 0xc8
 8000678:	2201      	movs	r2, #1
 800067a:	f10d 0107 	add.w	r1, sp, #7
 800067e:	4628      	mov	r0, r5
 8000680:	f001 fdd2 	bl	8002228 <HAL_SPI_Transmit>
   HAL_SPI_Transmit(hspi, data, count, 200);
 8000684:	23c8      	movs	r3, #200	; 0xc8
 8000686:	463a      	mov	r2, r7
 8000688:	4631      	mov	r1, r6
 800068a:	4628      	mov	r0, r5
 800068c:	f001 fdcc 	bl	8002228 <HAL_SPI_Transmit>

   NRF24L01_CSN_HIGH;
 8000690:	2201      	movs	r2, #1
 8000692:	2110      	movs	r1, #16
 8000694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000698:	f000 fbd0 	bl	8000e3c <HAL_GPIO_WritePin>
}
 800069c:	b003      	add	sp, #12
 800069e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006a0 <TM_NRF24L01_ReadRegister>:
/**********************************************************************************************************/
uint8_t TM_NRF24L01_ReadRegister(SPI_HandleTypeDef *hspi, uint8_t reg)
{
 80006a0:	b530      	push	{r4, r5, lr}
 80006a2:	b085      	sub	sp, #20
 80006a4:	4605      	mov	r5, r0
 80006a6:	460c      	mov	r4, r1
	 NRF24L01_CSN_LOW;
 80006a8:	2200      	movs	r2, #0
 80006aa:	2110      	movs	r1, #16
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f000 fbc4 	bl	8000e3c <HAL_GPIO_WritePin>

   uint8_t value;
	 uint8_t pData = NRF24L01_READ_REGISTER_MASK(reg);
 80006b4:	f004 041f 	and.w	r4, r4, #31
 80006b8:	f88d 400e 	strb.w	r4, [sp, #14]
   HAL_SPI_Transmit(hspi, &pData, 1, 200);
 80006bc:	23c8      	movs	r3, #200	; 0xc8
 80006be:	2201      	movs	r2, #1
 80006c0:	f10d 010e 	add.w	r1, sp, #14
 80006c4:	4628      	mov	r0, r5
 80006c6:	f001 fdaf 	bl	8002228 <HAL_SPI_Transmit>

	 pData = NRF24L01_NOP_MASK;
 80006ca:	23ff      	movs	r3, #255	; 0xff
 80006cc:	f88d 300e 	strb.w	r3, [sp, #14]
	 HAL_SPI_TransmitReceive(hspi, &pData, &value, 1, 200);
 80006d0:	23c8      	movs	r3, #200	; 0xc8
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	2301      	movs	r3, #1
 80006d6:	f10d 020f 	add.w	r2, sp, #15
 80006da:	f10d 010e 	add.w	r1, sp, #14
 80006de:	4628      	mov	r0, r5
 80006e0:	f001 fe9e 	bl	8002420 <HAL_SPI_TransmitReceive>

   NRF24L01_CSN_HIGH;
 80006e4:	2201      	movs	r2, #1
 80006e6:	2110      	movs	r1, #16
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f000 fba6 	bl	8000e3c <HAL_GPIO_WritePin>

   return value;
}
 80006f0:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80006f4:	b005      	add	sp, #20
 80006f6:	bd30      	pop	{r4, r5, pc}

080006f8 <TM_NRF24L01_SetMyAddress>:
   /* Return OK */
   return 1;
}
/**********************************************************************************************************/
void TM_NRF24L01_SetMyAddress(SPI_HandleTypeDef *hspi, uint8_t *adr)
{
 80006f8:	b538      	push	{r3, r4, r5, lr}
 80006fa:	4604      	mov	r4, r0
 80006fc:	460d      	mov	r5, r1
   NRF24L01_CE_LOW;
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000708:	f000 fb98 	bl	8000e3c <HAL_GPIO_WritePin>
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_RX_ADDR_P1, adr, 5);
 800070c:	2305      	movs	r3, #5
 800070e:	462a      	mov	r2, r5
 8000710:	210b      	movs	r1, #11
 8000712:	4620      	mov	r0, r4
 8000714:	f7ff ff9d 	bl	8000652 <TM_NRF24L01_WriteRegisterMulti>
   NRF24L01_CE_HIGH;
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000722:	f000 fb8b 	bl	8000e3c <HAL_GPIO_WritePin>
}
 8000726:	bd38      	pop	{r3, r4, r5, pc}

08000728 <TM_NRF24L01_SetTxAddress>:
/**********************************************************************************************************/
void TM_NRF24L01_SetTxAddress(SPI_HandleTypeDef *hspi, uint8_t *adr)
{
 8000728:	b538      	push	{r3, r4, r5, lr}
 800072a:	4605      	mov	r5, r0
 800072c:	460c      	mov	r4, r1
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_RX_ADDR_P0, adr, 5);
 800072e:	2305      	movs	r3, #5
 8000730:	460a      	mov	r2, r1
 8000732:	210a      	movs	r1, #10
 8000734:	f7ff ff8d 	bl	8000652 <TM_NRF24L01_WriteRegisterMulti>
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_TX_ADDR, adr, 5);
 8000738:	2305      	movs	r3, #5
 800073a:	4622      	mov	r2, r4
 800073c:	2110      	movs	r1, #16
 800073e:	4628      	mov	r0, r5
 8000740:	f7ff ff87 	bl	8000652 <TM_NRF24L01_WriteRegisterMulti>
}
 8000744:	bd38      	pop	{r3, r4, r5, pc}
	...

08000748 <TM_NRF24L01_GetData>:
   /* Send data! */
   NRF24L01_CE_HIGH;
}
/**********************************************************************************************************/
void TM_NRF24L01_GetData(SPI_HandleTypeDef *hspi, uint8_t* data)
{
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	b085      	sub	sp, #20
 800074c:	4604      	mov	r4, r0
 800074e:	460d      	mov	r5, r1
   /* Pull down chip select */
   NRF24L01_CSN_LOW;
 8000750:	2200      	movs	r2, #0
 8000752:	2110      	movs	r1, #16
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f000 fb70 	bl	8000e3c <HAL_GPIO_WritePin>
   /* Send read payload command*/
	 uint8_t pData = NRF24L01_R_RX_PAYLOAD_MASK;
 800075c:	2361      	movs	r3, #97	; 0x61
 800075e:	f88d 300f 	strb.w	r3, [sp, #15]
	 HAL_SPI_Transmit(hspi, &pData, 1, 200);
 8000762:	23c8      	movs	r3, #200	; 0xc8
 8000764:	2201      	movs	r2, #1
 8000766:	f10d 010f 	add.w	r1, sp, #15
 800076a:	4620      	mov	r0, r4
 800076c:	f001 fd5c 	bl	8002228 <HAL_SPI_Transmit>
   /* Read payload */
   HAL_SPI_TransmitReceive(hspi, data, data,	TM_NRF24L01_Struct.PayloadSize, 200);
 8000770:	23c8      	movs	r3, #200	; 0xc8
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <TM_NRF24L01_GetData+0x54>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	462a      	mov	r2, r5
 800077a:	4629      	mov	r1, r5
 800077c:	4620      	mov	r0, r4
 800077e:	f001 fe4f 	bl	8002420 <HAL_SPI_TransmitReceive>
   /* Pull up chip select */
   NRF24L01_CSN_HIGH;
 8000782:	2201      	movs	r2, #1
 8000784:	2110      	movs	r1, #16
 8000786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078a:	f000 fb57 	bl	8000e3c <HAL_GPIO_WritePin>

   /* Reset status register, clear RX_DR interrupt flag */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_STATUS, (1 << NRF24L01_RX_DR));
 800078e:	2240      	movs	r2, #64	; 0x40
 8000790:	2107      	movs	r1, #7
 8000792:	4620      	mov	r0, r4
 8000794:	f7ff ff35 	bl	8000602 <TM_NRF24L01_WriteRegister>
}
 8000798:	b005      	add	sp, #20
 800079a:	bd30      	pop	{r4, r5, pc}
 800079c:	2000009c 	.word	0x2000009c

080007a0 <TM_NRF24L01_RxFifoEmpty>:
   }
   return !TM_NRF24L01_RxFifoEmpty(hspi);
}
/**********************************************************************************************************/
uint8_t TM_NRF24L01_RxFifoEmpty(SPI_HandleTypeDef *hspi)
{
 80007a0:	b508      	push	{r3, lr}
   uint8_t reg = TM_NRF24L01_ReadRegister(hspi, NRF24L01_REG_FIFO_STATUS);
 80007a2:	2117      	movs	r1, #23
 80007a4:	f7ff ff7c 	bl	80006a0 <TM_NRF24L01_ReadRegister>
   return NRF24L01_CHECK_BIT(reg, NRF24L01_RX_EMPTY);
}
 80007a8:	f000 0001 	and.w	r0, r0, #1
 80007ac:	bd08      	pop	{r3, pc}

080007ae <TM_NRF24L01_GetStatus>:
/**********************************************************************************************************/
uint8_t TM_NRF24L01_GetStatus(SPI_HandleTypeDef *hspi)
{
 80007ae:	b510      	push	{r4, lr}
 80007b0:	b084      	sub	sp, #16
 80007b2:	4604      	mov	r4, r0
   uint8_t status;

   NRF24L01_CSN_LOW;
 80007b4:	2200      	movs	r2, #0
 80007b6:	2110      	movs	r1, #16
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007bc:	f000 fb3e 	bl	8000e3c <HAL_GPIO_WritePin>
   /* First received byte is always status register */
	 uint8_t pData = NRF24L01_REG_STATUS;
 80007c0:	2307      	movs	r3, #7
 80007c2:	f88d 300e 	strb.w	r3, [sp, #14]
	 //uint8_t pData = NRF24L01_NOP_MASK;
	 HAL_SPI_TransmitReceive(hspi, &pData, &status,	1, 200);
 80007c6:	23c8      	movs	r3, #200	; 0xc8
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2301      	movs	r3, #1
 80007cc:	f10d 020f 	add.w	r2, sp, #15
 80007d0:	f10d 010e 	add.w	r1, sp, #14
 80007d4:	4620      	mov	r0, r4
 80007d6:	f001 fe23 	bl	8002420 <HAL_SPI_TransmitReceive>
   /* Pull up chip select */
   NRF24L01_CSN_HIGH;
 80007da:	2201      	movs	r2, #1
 80007dc:	2110      	movs	r1, #16
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f000 fb2b 	bl	8000e3c <HAL_GPIO_WritePin>

   return status;
}
 80007e6:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80007ea:	b004      	add	sp, #16
 80007ec:	bd10      	pop	{r4, pc}

080007ee <TM_NRF24L01_DataReady>:
{
 80007ee:	b510      	push	{r4, lr}
 80007f0:	4604      	mov	r4, r0
   uint8_t status = TM_NRF24L01_GetStatus(hspi);
 80007f2:	f7ff ffdc 	bl	80007ae <TM_NRF24L01_GetStatus>
   if (NRF24L01_CHECK_BIT(status, NRF24L01_RX_DR))
 80007f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80007fa:	d001      	beq.n	8000800 <TM_NRF24L01_DataReady+0x12>
      return 1;
 80007fc:	2001      	movs	r0, #1
}
 80007fe:	bd10      	pop	{r4, pc}
   return !TM_NRF24L01_RxFifoEmpty(hspi);
 8000800:	4620      	mov	r0, r4
 8000802:	f7ff ffcd 	bl	80007a0 <TM_NRF24L01_RxFifoEmpty>
 8000806:	fab0 f080 	clz	r0, r0
 800080a:	0940      	lsrs	r0, r0, #5
 800080c:	e7f7      	b.n	80007fe <TM_NRF24L01_DataReady+0x10>

0800080e <TM_NRF24L01_SoftwareReset>:
   /* Still sending */
   return TM_NRF24L01_Transmit_Status_Sending;
}
/**********************************************************************************************************/
void TM_NRF24L01_SoftwareReset(SPI_HandleTypeDef *hspi)
{
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	b083      	sub	sp, #12
 8000812:	4604      	mov	r4, r0
   uint8_t data[5];

   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_CONFIG,       NRF24L01_REG_DEFAULT_VAL_CONFIG);
 8000814:	2208      	movs	r2, #8
 8000816:	2100      	movs	r1, #0
 8000818:	f7ff fef3 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_EN_AA,      NRF24L01_REG_DEFAULT_VAL_EN_AA);
 800081c:	223f      	movs	r2, #63	; 0x3f
 800081e:	2101      	movs	r1, #1
 8000820:	4620      	mov	r0, r4
 8000822:	f7ff feee 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_EN_RXADDR,    NRF24L01_REG_DEFAULT_VAL_EN_RXADDR);
 8000826:	2203      	movs	r2, #3
 8000828:	2102      	movs	r1, #2
 800082a:	4620      	mov	r0, r4
 800082c:	f7ff fee9 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_SETUP_AW,    NRF24L01_REG_DEFAULT_VAL_SETUP_AW);
 8000830:	2203      	movs	r2, #3
 8000832:	4611      	mov	r1, r2
 8000834:	4620      	mov	r0, r4
 8000836:	f7ff fee4 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_SETUP_RETR,    NRF24L01_REG_DEFAULT_VAL_SETUP_RETR);
 800083a:	2203      	movs	r2, #3
 800083c:	2104      	movs	r1, #4
 800083e:	4620      	mov	r0, r4
 8000840:	f7ff fedf 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RF_CH,       NRF24L01_REG_DEFAULT_VAL_RF_CH);
 8000844:	2205      	movs	r2, #5
 8000846:	4611      	mov	r1, r2
 8000848:	4620      	mov	r0, r4
 800084a:	f7ff feda 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RF_SETUP,    NRF24L01_REG_DEFAULT_VAL_RF_SETUP);
 800084e:	220e      	movs	r2, #14
 8000850:	2106      	movs	r1, #6
 8000852:	4620      	mov	r0, r4
 8000854:	f7ff fed5 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_STATUS,       NRF24L01_REG_DEFAULT_VAL_STATUS);
 8000858:	220e      	movs	r2, #14
 800085a:	2107      	movs	r1, #7
 800085c:	4620      	mov	r0, r4
 800085e:	f7ff fed0 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_OBSERVE_TX,    NRF24L01_REG_DEFAULT_VAL_OBSERVE_TX);
 8000862:	2200      	movs	r2, #0
 8000864:	2108      	movs	r1, #8
 8000866:	4620      	mov	r0, r4
 8000868:	f7ff fecb 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RPD,       NRF24L01_REG_DEFAULT_VAL_RPD);
 800086c:	2200      	movs	r2, #0
 800086e:	2109      	movs	r1, #9
 8000870:	4620      	mov	r0, r4
 8000872:	f7ff fec6 	bl	8000602 <TM_NRF24L01_WriteRegister>

   //P0
   data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_0;
 8000876:	25e7      	movs	r5, #231	; 0xe7
 8000878:	f88d 5000 	strb.w	r5, [sp]
   data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_1;
 800087c:	f88d 5001 	strb.w	r5, [sp, #1]
   data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_2;
 8000880:	f88d 5002 	strb.w	r5, [sp, #2]
   data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_3;
 8000884:	f88d 5003 	strb.w	r5, [sp, #3]
   data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_4;
 8000888:	f88d 5004 	strb.w	r5, [sp, #4]
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_RX_ADDR_P0, data, 5);
 800088c:	2305      	movs	r3, #5
 800088e:	466a      	mov	r2, sp
 8000890:	210a      	movs	r1, #10
 8000892:	4620      	mov	r0, r4
 8000894:	f7ff fedd 	bl	8000652 <TM_NRF24L01_WriteRegisterMulti>

   //P1
   data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_0;
 8000898:	23c2      	movs	r3, #194	; 0xc2
 800089a:	f88d 3000 	strb.w	r3, [sp]
   data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_1;
 800089e:	f88d 3001 	strb.w	r3, [sp, #1]
   data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_2;
 80008a2:	f88d 3002 	strb.w	r3, [sp, #2]
   data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_3;
 80008a6:	f88d 3003 	strb.w	r3, [sp, #3]
   data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_4;
 80008aa:	f88d 3004 	strb.w	r3, [sp, #4]
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_RX_ADDR_P1, data, 5);
 80008ae:	2305      	movs	r3, #5
 80008b0:	466a      	mov	r2, sp
 80008b2:	210b      	movs	r1, #11
 80008b4:	4620      	mov	r0, r4
 80008b6:	f7ff fecc 	bl	8000652 <TM_NRF24L01_WriteRegisterMulti>

   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_ADDR_P2,    NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P2);
 80008ba:	22c3      	movs	r2, #195	; 0xc3
 80008bc:	210c      	movs	r1, #12
 80008be:	4620      	mov	r0, r4
 80008c0:	f7ff fe9f 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_ADDR_P3,    NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P3);
 80008c4:	22c4      	movs	r2, #196	; 0xc4
 80008c6:	210d      	movs	r1, #13
 80008c8:	4620      	mov	r0, r4
 80008ca:	f7ff fe9a 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_ADDR_P4,    NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P4);
 80008ce:	22c5      	movs	r2, #197	; 0xc5
 80008d0:	210e      	movs	r1, #14
 80008d2:	4620      	mov	r0, r4
 80008d4:	f7ff fe95 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_ADDR_P5,    NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P5);
 80008d8:	22c6      	movs	r2, #198	; 0xc6
 80008da:	210f      	movs	r1, #15
 80008dc:	4620      	mov	r0, r4
 80008de:	f7ff fe90 	bl	8000602 <TM_NRF24L01_WriteRegister>

   //TX
   data[0] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_0;
 80008e2:	f88d 5000 	strb.w	r5, [sp]
   data[1] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_1;
 80008e6:	f88d 5001 	strb.w	r5, [sp, #1]
   data[2] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_2;
 80008ea:	f88d 5002 	strb.w	r5, [sp, #2]
   data[3] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_3;
 80008ee:	f88d 5003 	strb.w	r5, [sp, #3]
   data[4] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_4;
 80008f2:	f88d 5004 	strb.w	r5, [sp, #4]
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_TX_ADDR, data, 5);
 80008f6:	2305      	movs	r3, #5
 80008f8:	466a      	mov	r2, sp
 80008fa:	2110      	movs	r1, #16
 80008fc:	4620      	mov	r0, r4
 80008fe:	f7ff fea8 	bl	8000652 <TM_NRF24L01_WriteRegisterMulti>

   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P0,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P0);
 8000902:	2200      	movs	r2, #0
 8000904:	2111      	movs	r1, #17
 8000906:	4620      	mov	r0, r4
 8000908:	f7ff fe7b 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P1,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P1);
 800090c:	2200      	movs	r2, #0
 800090e:	2112      	movs	r1, #18
 8000910:	4620      	mov	r0, r4
 8000912:	f7ff fe76 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P2,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P2);
 8000916:	2200      	movs	r2, #0
 8000918:	2113      	movs	r1, #19
 800091a:	4620      	mov	r0, r4
 800091c:	f7ff fe71 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P3,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P3);
 8000920:	2200      	movs	r2, #0
 8000922:	2114      	movs	r1, #20
 8000924:	4620      	mov	r0, r4
 8000926:	f7ff fe6c 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P4,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P4);
 800092a:	2200      	movs	r2, #0
 800092c:	2115      	movs	r1, #21
 800092e:	4620      	mov	r0, r4
 8000930:	f7ff fe67 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P5,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P5);
 8000934:	2200      	movs	r2, #0
 8000936:	2116      	movs	r1, #22
 8000938:	4620      	mov	r0, r4
 800093a:	f7ff fe62 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_FIFO_STATUS, NRF24L01_REG_DEFAULT_VAL_FIFO_STATUS);
 800093e:	2211      	movs	r2, #17
 8000940:	2117      	movs	r1, #23
 8000942:	4620      	mov	r0, r4
 8000944:	f7ff fe5d 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_DYNPD,       NRF24L01_REG_DEFAULT_VAL_DYNPD);
 8000948:	2200      	movs	r2, #0
 800094a:	211c      	movs	r1, #28
 800094c:	4620      	mov	r0, r4
 800094e:	f7ff fe58 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_FEATURE,    NRF24L01_REG_DEFAULT_VAL_FEATURE);
 8000952:	2200      	movs	r2, #0
 8000954:	211d      	movs	r1, #29
 8000956:	4620      	mov	r0, r4
 8000958:	f7ff fe53 	bl	8000602 <TM_NRF24L01_WriteRegister>
}
 800095c:	b003      	add	sp, #12
 800095e:	bd30      	pop	{r4, r5, pc}

08000960 <TM_NRF24L01_SetChannel>:
   return TM_NRF24L01_ReadRegister(hspi, NRF24L01_REG_OBSERVE_TX) & 0x0F;
}
/**********************************************************************************************************/
void TM_NRF24L01_SetChannel(SPI_HandleTypeDef *hspi, uint8_t channel)
{
   if (channel <= 125 && channel != TM_NRF24L01_Struct.Channel)
 8000960:	297d      	cmp	r1, #125	; 0x7d
 8000962:	d80c      	bhi.n	800097e <TM_NRF24L01_SetChannel+0x1e>
{
 8000964:	b508      	push	{r3, lr}
   if (channel <= 125 && channel != TM_NRF24L01_Struct.Channel)
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <TM_NRF24L01_SetChannel+0x20>)
 8000968:	785b      	ldrb	r3, [r3, #1]
 800096a:	428b      	cmp	r3, r1
 800096c:	d100      	bne.n	8000970 <TM_NRF24L01_SetChannel+0x10>
      /* Store new channel setting */
      TM_NRF24L01_Struct.Channel = channel;
      /* Write channel */
      TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RF_CH, channel);
   }
}
 800096e:	bd08      	pop	{r3, pc}
      TM_NRF24L01_Struct.Channel = channel;
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <TM_NRF24L01_SetChannel+0x20>)
 8000972:	7059      	strb	r1, [r3, #1]
      TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RF_CH, channel);
 8000974:	460a      	mov	r2, r1
 8000976:	2105      	movs	r1, #5
 8000978:	f7ff fe43 	bl	8000602 <TM_NRF24L01_WriteRegister>
}
 800097c:	e7f7      	b.n	800096e <TM_NRF24L01_SetChannel+0xe>
 800097e:	4770      	bx	lr
 8000980:	2000009c 	.word	0x2000009c

08000984 <TM_NRF24L01_SetRF>:
/**********************************************************************************************************/
void TM_NRF24L01_SetRF(SPI_HandleTypeDef *hspi, TM_NRF24L01_DataRate_t DataRate, TM_NRF24L01_OutputPower_t OutPwr)
{
 8000984:	b508      	push	{r3, lr}
 8000986:	4613      	mov	r3, r2
   uint8_t tmp = 0;
   TM_NRF24L01_Struct.DataRate = DataRate;
 8000988:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <TM_NRF24L01_SetRF+0x40>)
 800098a:	70d1      	strb	r1, [r2, #3]
   TM_NRF24L01_Struct.OutPwr = OutPwr;
 800098c:	7093      	strb	r3, [r2, #2]

   if (DataRate == TM_NRF24L01_DataRate_2M) {
 800098e:	b119      	cbz	r1, 8000998 <TM_NRF24L01_SetRF+0x14>
      tmp |= 1 << NRF24L01_RF_DR_HIGH;
   } else if (DataRate == TM_NRF24L01_DataRate_250k) {
 8000990:	2902      	cmp	r1, #2
 8000992:	d00b      	beq.n	80009ac <TM_NRF24L01_SetRF+0x28>
   uint8_t tmp = 0;
 8000994:	2200      	movs	r2, #0
 8000996:	e000      	b.n	800099a <TM_NRF24L01_SetRF+0x16>
      tmp |= 1 << NRF24L01_RF_DR_HIGH;
 8000998:	2208      	movs	r2, #8
      tmp |= 1 << NRF24L01_RF_DR_LOW;
   }
   /* If 1Mbps, all bits set to 0 */

   if (OutPwr == TM_NRF24L01_OutputPower_0dBm) {
 800099a:	2b03      	cmp	r3, #3
 800099c:	d008      	beq.n	80009b0 <TM_NRF24L01_SetRF+0x2c>
      tmp |= 3 << NRF24L01_RF_PWR;
   } else if (OutPwr == TM_NRF24L01_OutputPower_M6dBm) {
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d00c      	beq.n	80009bc <TM_NRF24L01_SetRF+0x38>
      tmp |= 2 << NRF24L01_RF_PWR;
   } else if (OutPwr == TM_NRF24L01_OutputPower_M12dBm) {
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d106      	bne.n	80009b4 <TM_NRF24L01_SetRF+0x30>
      tmp |= 1 << NRF24L01_RF_PWR;
 80009a6:	f042 0202 	orr.w	r2, r2, #2
 80009aa:	e003      	b.n	80009b4 <TM_NRF24L01_SetRF+0x30>
      tmp |= 1 << NRF24L01_RF_DR_LOW;
 80009ac:	2220      	movs	r2, #32
 80009ae:	e7f4      	b.n	800099a <TM_NRF24L01_SetRF+0x16>
      tmp |= 3 << NRF24L01_RF_PWR;
 80009b0:	f042 0206 	orr.w	r2, r2, #6
   }

   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RF_SETUP, tmp);
 80009b4:	2106      	movs	r1, #6
 80009b6:	f7ff fe24 	bl	8000602 <TM_NRF24L01_WriteRegister>
}
 80009ba:	bd08      	pop	{r3, pc}
      tmp |= 2 << NRF24L01_RF_PWR;
 80009bc:	f042 0204 	orr.w	r2, r2, #4
 80009c0:	e7f8      	b.n	80009b4 <TM_NRF24L01_SetRF+0x30>
 80009c2:	bf00      	nop
 80009c4:	2000009c 	.word	0x2000009c

080009c8 <TM_NRF24L01_Clear_Interrupts>:
   IRQ->Status = TM_NRF24L01_GetStatus(hspi);
   return IRQ->Status;
}
/**********************************************************************************************************/
void TM_NRF24L01_Clear_Interrupts(SPI_HandleTypeDef *hspi)
{
 80009c8:	b508      	push	{r3, lr}
   TM_NRF24L01_WriteRegister(hspi, 0x07, 0x70);
 80009ca:	2270      	movs	r2, #112	; 0x70
 80009cc:	2107      	movs	r1, #7
 80009ce:	f7ff fe18 	bl	8000602 <TM_NRF24L01_WriteRegister>
}
 80009d2:	bd08      	pop	{r3, pc}

080009d4 <TM_NRF24L01_PowerUpRx>:
{
 80009d4:	b510      	push	{r4, lr}
 80009d6:	4604      	mov	r4, r0
   NRF24L01_CE_LOW;
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f000 fa2b 	bl	8000e3c <HAL_GPIO_WritePin>
   NRF24L01_FlushRX(hspi);
 80009e6:	4620      	mov	r0, r4
 80009e8:	f7ff fdf0 	bl	80005cc <NRF24L01_FlushRX>
   TM_NRF24L01_Clear_Interrupts(hspi);
 80009ec:	4620      	mov	r0, r4
 80009ee:	f7ff ffeb 	bl	80009c8 <TM_NRF24L01_Clear_Interrupts>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_CONFIG, NRF24L01_CONFIG | 1 << NRF24L01_PWR_UP | 1 << NRF24L01_PRIM_RX);
 80009f2:	220b      	movs	r2, #11
 80009f4:	2100      	movs	r1, #0
 80009f6:	4620      	mov	r0, r4
 80009f8:	f7ff fe03 	bl	8000602 <TM_NRF24L01_WriteRegister>
   NRF24L01_CE_HIGH;
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a06:	f000 fa19 	bl	8000e3c <HAL_GPIO_WritePin>
}
 8000a0a:	bd10      	pop	{r4, pc}

08000a0c <TM_NRF24L01_Init>:
{
 8000a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0e:	4604      	mov	r4, r0
 8000a10:	460f      	mov	r7, r1
 8000a12:	4616      	mov	r6, r2
   TM_NRF24L01_InitPins();
 8000a14:	f7ff fdb0 	bl	8000578 <TM_NRF24L01_InitPins>
   if (payload_size > 32) {
 8000a18:	2e20      	cmp	r6, #32
 8000a1a:	d900      	bls.n	8000a1e <TM_NRF24L01_Init+0x12>
      payload_size = 32;
 8000a1c:	2620      	movs	r6, #32
   TM_NRF24L01_Struct.Channel = !channel; /* Set channel to some different value for TM_NRF24L01_SetChannel() function */
 8000a1e:	fab7 f387 	clz	r3, r7
 8000a22:	095b      	lsrs	r3, r3, #5
 8000a24:	4d2b      	ldr	r5, [pc, #172]	; (8000ad4 <TM_NRF24L01_Init+0xc8>)
 8000a26:	706b      	strb	r3, [r5, #1]
   TM_NRF24L01_Struct.PayloadSize = payload_size;
 8000a28:	702e      	strb	r6, [r5, #0]
   TM_NRF24L01_Struct.OutPwr = TM_NRF24L01_OutputPower_0dBm;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	70ab      	strb	r3, [r5, #2]
   TM_NRF24L01_Struct.DataRate = TM_NRF24L01_DataRate_2M;
 8000a2e:	2600      	movs	r6, #0
 8000a30:	70ee      	strb	r6, [r5, #3]
   TM_NRF24L01_SoftwareReset(hspi);
 8000a32:	4620      	mov	r0, r4
 8000a34:	f7ff feeb 	bl	800080e <TM_NRF24L01_SoftwareReset>
   TM_NRF24L01_SetChannel(hspi, channel);
 8000a38:	4639      	mov	r1, r7
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	f7ff ff90 	bl	8000960 <TM_NRF24L01_SetChannel>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P0, TM_NRF24L01_Struct.PayloadSize); // Auto-ACK pipe
 8000a40:	782a      	ldrb	r2, [r5, #0]
 8000a42:	2111      	movs	r1, #17
 8000a44:	4620      	mov	r0, r4
 8000a46:	f7ff fddc 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P1, TM_NRF24L01_Struct.PayloadSize); // Data TM_NRF24L01_SetMyAddress pipe
 8000a4a:	782a      	ldrb	r2, [r5, #0]
 8000a4c:	2112      	movs	r1, #18
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f7ff fdd7 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P2, TM_NRF24L01_Struct.PayloadSize);
 8000a54:	782a      	ldrb	r2, [r5, #0]
 8000a56:	2113      	movs	r1, #19
 8000a58:	4620      	mov	r0, r4
 8000a5a:	f7ff fdd2 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P3, TM_NRF24L01_Struct.PayloadSize);
 8000a5e:	782a      	ldrb	r2, [r5, #0]
 8000a60:	2114      	movs	r1, #20
 8000a62:	4620      	mov	r0, r4
 8000a64:	f7ff fdcd 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P4, TM_NRF24L01_Struct.PayloadSize);
 8000a68:	782a      	ldrb	r2, [r5, #0]
 8000a6a:	2115      	movs	r1, #21
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	f7ff fdc8 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P5, TM_NRF24L01_Struct.PayloadSize);
 8000a72:	782a      	ldrb	r2, [r5, #0]
 8000a74:	2116      	movs	r1, #22
 8000a76:	4620      	mov	r0, r4
 8000a78:	f7ff fdc3 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_SetRF(hspi, TM_NRF24L01_Struct.DataRate, TM_NRF24L01_Struct.OutPwr);
 8000a7c:	78aa      	ldrb	r2, [r5, #2]
 8000a7e:	78e9      	ldrb	r1, [r5, #3]
 8000a80:	4620      	mov	r0, r4
 8000a82:	f7ff ff7f 	bl	8000984 <TM_NRF24L01_SetRF>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_CONFIG, NRF24L01_CONFIG);
 8000a86:	2208      	movs	r2, #8
 8000a88:	4631      	mov	r1, r6
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f7ff fdb9 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_EN_AA, 0x3F);
 8000a90:	223f      	movs	r2, #63	; 0x3f
 8000a92:	2101      	movs	r1, #1
 8000a94:	4620      	mov	r0, r4
 8000a96:	f7ff fdb4 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_EN_RXADDR, 0x3F);
 8000a9a:	223f      	movs	r2, #63	; 0x3f
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	f7ff fdaf 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_SETUP_RETR, 0x4F);
 8000aa4:	224f      	movs	r2, #79	; 0x4f
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	f7ff fdaa 	bl	8000602 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_DYNPD, (0 << NRF24L01_DPL_P0) | (0 << NRF24L01_DPL_P1) | (0 << NRF24L01_DPL_P2) | (0 << NRF24L01_DPL_P3) | (0 << NRF24L01_DPL_P4) | (0 << NRF24L01_DPL_P5));
 8000aae:	4632      	mov	r2, r6
 8000ab0:	211c      	movs	r1, #28
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f7ff fda5 	bl	8000602 <TM_NRF24L01_WriteRegister>
   NRF24L01_FlushTX(hspi);
 8000ab8:	4620      	mov	r0, r4
 8000aba:	f7ff fd6c 	bl	8000596 <NRF24L01_FlushTX>
   NRF24L01_FlushRX(hspi);
 8000abe:	4620      	mov	r0, r4
 8000ac0:	f7ff fd84 	bl	80005cc <NRF24L01_FlushRX>
   TM_NRF24L01_Clear_Interrupts(hspi);
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	f7ff ff7f 	bl	80009c8 <TM_NRF24L01_Clear_Interrupts>
   TM_NRF24L01_PowerUpRx(hspi);
 8000aca:	4620      	mov	r0, r4
 8000acc:	f7ff ff82 	bl	80009d4 <TM_NRF24L01_PowerUpRx>
}
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ad4:	2000009c 	.word	0x2000009c

08000ad8 <TM_NRF24L01_setCrcWidth>:

/**********************************************************************************************************/
void TM_NRF24L01_setCrcWidth(SPI_HandleTypeDef *hspi, uint8_t width) {
 8000ad8:	b538      	push	{r3, r4, r5, lr}
 8000ada:	4605      	mov	r5, r0
 8000adc:	460c      	mov	r4, r1

	uint8_t config = TM_NRF24L01_ReadRegister(hspi,NRF24L01_REG_CONFIG) & ~_NRF24L01P_CONFIG_CRC_MASK;
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f7ff fdde 	bl	80006a0 <TM_NRF24L01_ReadRegister>
 8000ae4:	f000 02fc 	and.w	r2, r0, #252	; 0xfc

    switch ( width ) {
 8000ae8:	2c08      	cmp	r4, #8
 8000aea:	d007      	beq.n	8000afc <TM_NRF24L01_setCrcWidth+0x24>
 8000aec:	2c10      	cmp	r4, #16
 8000aee:	d008      	beq.n	8000b02 <TM_NRF24L01_setCrcWidth+0x2a>
 8000af0:	b91c      	cbnz	r4, 8000afa <TM_NRF24L01_setCrcWidth+0x22>
            //error( "nRF24L01P: Invalid CRC Width setting %d\r\n", width );
            return;

    }

    TM_NRF24L01_WriteRegister(hspi,NRF24L01_REG_CONFIG, config);
 8000af2:	2100      	movs	r1, #0
 8000af4:	4628      	mov	r0, r5
 8000af6:	f7ff fd84 	bl	8000602 <TM_NRF24L01_WriteRegister>
    //setRegister(_NRF24L01P_REG_CONFIG, config);

}
 8000afa:	bd38      	pop	{r3, r4, r5, pc}
            config |= _NRF24L01P_CONFIG_CRC_8BIT;
 8000afc:	f042 0203 	orr.w	r2, r2, #3
            break;
 8000b00:	e7f7      	b.n	8000af2 <TM_NRF24L01_setCrcWidth+0x1a>
            config |= _NRF24L01P_CONFIG_CRC_16BIT;
 8000b02:	f042 0203 	orr.w	r2, r2, #3
            break;
 8000b06:	e7f4      	b.n	8000af2 <TM_NRF24L01_setCrcWidth+0x1a>

08000b08 <TM_NRF24L01_disableAutoAcknowledge>:

/**********************************************************************************************************/
void TM_NRF24L01_disableAutoAcknowledge(SPI_HandleTypeDef *hspi) {
 8000b08:	b508      	push	{r3, lr}

	TM_NRF24L01_WriteRegister(hspi,NRF24L01_REG_EN_AA, _NRF24L01P_EN_AA_NONE);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	f7ff fd78 	bl	8000602 <TM_NRF24L01_WriteRegister>

}
 8000b12:	bd08      	pop	{r3, pc}

08000b14 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_InitTick+0x44>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b90b      	cbnz	r3, 8000b1e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b1a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000b1c:	4770      	bx	lr
{
 8000b1e:	b510      	push	{r4, lr}
 8000b20:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <HAL_InitTick+0x48>)
 8000b2c:	6810      	ldr	r0, [r2, #0]
 8000b2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b32:	f000 f883 	bl	8000c3c <HAL_SYSTICK_Config>
 8000b36:	b968      	cbnz	r0, 8000b54 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b38:	2c0f      	cmp	r4, #15
 8000b3a:	d901      	bls.n	8000b40 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	e00a      	b.n	8000b56 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	4621      	mov	r1, r4
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f000 f844 	bl	8000bd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4c:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <HAL_InitTick+0x44>)
 8000b4e:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b50:	2000      	movs	r0, #0
 8000b52:	e000      	b.n	8000b56 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8000b54:	2001      	movs	r0, #1
}
 8000b56:	bd10      	pop	{r4, pc}
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000018 	.word	0x20000018

08000b60 <HAL_Init>:
{
 8000b60:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b62:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <HAL_Init+0x28>)
 8000b64:	6813      	ldr	r3, [r2, #0]
 8000b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f81f 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff ffce 	bl	8000b14 <HAL_InitTick>
 8000b78:	b110      	cbz	r0, 8000b80 <HAL_Init+0x20>
    status = HAL_ERROR;
 8000b7a:	2401      	movs	r4, #1
}
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	bd10      	pop	{r4, pc}
 8000b80:	4604      	mov	r4, r0
    HAL_MspInit();
 8000b82:	f002 fac1 	bl	8003108 <HAL_MspInit>
 8000b86:	e7f9      	b.n	8000b7c <HAL_Init+0x1c>
 8000b88:	40022000 	.word	0x40022000

08000b8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_IncTick+0x10>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4a03      	ldr	r2, [pc, #12]	; (8000ba0 <HAL_IncTick+0x14>)
 8000b92:	6811      	ldr	r1, [r2, #0]
 8000b94:	440b      	add	r3, r1
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	200000ac 	.word	0x200000ac

08000ba4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ba4:	4b01      	ldr	r3, [pc, #4]	; (8000bac <HAL_GetTick+0x8>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200000ac 	.word	0x200000ac

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bb2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bb8:	041b      	lsls	r3, r3, #16
 8000bba:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bbc:	0200      	lsls	r0, r0, #8
 8000bbe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000bcc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_NVIC_SetPriority+0x60>)
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bde:	f1c3 0407 	rsb	r4, r3, #7
 8000be2:	2c04      	cmp	r4, #4
 8000be4:	bf28      	it	cs
 8000be6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be8:	1d1d      	adds	r5, r3, #4
 8000bea:	2d06      	cmp	r5, #6
 8000bec:	d918      	bls.n	8000c20 <HAL_NVIC_SetPriority+0x4c>
 8000bee:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 35ff 	mov.w	r5, #4294967295
 8000bf4:	fa05 f404 	lsl.w	r4, r5, r4
 8000bf8:	ea21 0104 	bic.w	r1, r1, r4
 8000bfc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfe:	fa05 f303 	lsl.w	r3, r5, r3
 8000c02:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c06:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	db0b      	blt.n	8000c24 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	0109      	lsls	r1, r1, #4
 8000c0e:	b2c9      	uxtb	r1, r1
 8000c10:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c14:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c18:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c1c:	bc30      	pop	{r4, r5}
 8000c1e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c20:	2300      	movs	r3, #0
 8000c22:	e7e5      	b.n	8000bf0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	f000 000f 	and.w	r0, r0, #15
 8000c28:	0109      	lsls	r1, r1, #4
 8000c2a:	b2c9      	uxtb	r1, r1
 8000c2c:	4b02      	ldr	r3, [pc, #8]	; (8000c38 <HAL_NVIC_SetPriority+0x64>)
 8000c2e:	5419      	strb	r1, [r3, r0]
 8000c30:	e7f4      	b.n	8000c1c <HAL_NVIC_SetPriority+0x48>
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00
 8000c38:	e000ed14 	.word	0xe000ed14

08000c3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c3c:	3801      	subs	r0, #1
 8000c3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c42:	d20a      	bcs.n	8000c5a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_SYSTICK_Config+0x24>)
 8000c46:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_SYSTICK_Config+0x28>)
 8000c4a:	21f0      	movs	r1, #240	; 0xf0
 8000c4c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	2000      	movs	r0, #0
 8000c52:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e010 	.word	0xe000e010
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b4f0      	push	{r4, r5, r6, r7}
 8000c6a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8000c6c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	e064      	b.n	8000d3a <HAL_GPIO_Init+0xd2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c70:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c72:	005f      	lsls	r7, r3, #1
 8000c74:	2503      	movs	r5, #3
 8000c76:	40bd      	lsls	r5, r7
 8000c78:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c7c:	68cd      	ldr	r5, [r1, #12]
 8000c7e:	40bd      	lsls	r5, r7
 8000c80:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000c82:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c84:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c86:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8a:	684d      	ldr	r5, [r1, #4]
 8000c8c:	f3c5 1500 	ubfx	r5, r5, #4, #1
 8000c90:	409d      	lsls	r5, r3
 8000c92:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000c94:	6045      	str	r5, [r0, #4]
 8000c96:	e05e      	b.n	8000d56 <HAL_GPIO_Init+0xee>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c98:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c9a:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c9e:	f3c5 04c0 	ubfx	r4, r5, #3, #1
 8000ca2:	409c      	lsls	r4, r3
 8000ca4:	4334      	orrs	r4, r6
        GPIOx->ASCR = temp;
 8000ca6:	62c4      	str	r4, [r0, #44]	; 0x2c
 8000ca8:	e05a      	b.n	8000d60 <HAL_GPIO_Init+0xf8>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000caa:	08dd      	lsrs	r5, r3, #3
 8000cac:	3508      	adds	r5, #8
 8000cae:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb2:	f003 0407 	and.w	r4, r3, #7
 8000cb6:	00a6      	lsls	r6, r4, #2
 8000cb8:	240f      	movs	r4, #15
 8000cba:	40b4      	lsls	r4, r6
 8000cbc:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cc0:	690c      	ldr	r4, [r1, #16]
 8000cc2:	40b4      	lsls	r4, r6
 8000cc4:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 8000cc6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8000cca:	e05d      	b.n	8000d88 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ccc:	2406      	movs	r4, #6
 8000cce:	e000      	b.n	8000cd2 <HAL_GPIO_Init+0x6a>
 8000cd0:	2400      	movs	r4, #0
 8000cd2:	40b4      	lsls	r4, r6
 8000cd4:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cd6:	3502      	adds	r5, #2
 8000cd8:	4e54      	ldr	r6, [pc, #336]	; (8000e2c <HAL_GPIO_Init+0x1c4>)
 8000cda:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cde:	4c54      	ldr	r4, [pc, #336]	; (8000e30 <HAL_GPIO_Init+0x1c8>)
 8000ce0:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8000ce2:	43d4      	mvns	r4, r2
 8000ce4:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ce8:	684f      	ldr	r7, [r1, #4]
 8000cea:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000cee:	d001      	beq.n	8000cf4 <HAL_GPIO_Init+0x8c>
        {
          temp |= iocurrent;
 8000cf0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8000cf4:	4d4e      	ldr	r5, [pc, #312]	; (8000e30 <HAL_GPIO_Init+0x1c8>)
 8000cf6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8000cf8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8000cfa:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cfe:	684f      	ldr	r7, [r1, #4]
 8000d00:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8000d04:	d001      	beq.n	8000d0a <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8000d06:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8000d0a:	4d49      	ldr	r5, [pc, #292]	; (8000e30 <HAL_GPIO_Init+0x1c8>)
 8000d0c:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d0e:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8000d10:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d14:	684f      	ldr	r7, [r1, #4]
 8000d16:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000d1a:	d001      	beq.n	8000d20 <HAL_GPIO_Init+0xb8>
        {
          temp |= iocurrent;
 8000d1c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8000d20:	4d43      	ldr	r5, [pc, #268]	; (8000e30 <HAL_GPIO_Init+0x1c8>)
 8000d22:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 8000d24:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8000d26:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d28:	684e      	ldr	r6, [r1, #4]
 8000d2a:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8000d2e:	d001      	beq.n	8000d34 <HAL_GPIO_Init+0xcc>
        {
          temp |= iocurrent;
 8000d30:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8000d34:	4a3e      	ldr	r2, [pc, #248]	; (8000e30 <HAL_GPIO_Init+0x1c8>)
 8000d36:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8000d38:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3a:	680a      	ldr	r2, [r1, #0]
 8000d3c:	fa32 f403 	lsrs.w	r4, r2, r3
 8000d40:	d070      	beq.n	8000e24 <HAL_GPIO_Init+0x1bc>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d42:	2401      	movs	r4, #1
 8000d44:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8000d46:	4022      	ands	r2, r4
 8000d48:	d0f6      	beq.n	8000d38 <HAL_GPIO_Init+0xd0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d4a:	684d      	ldr	r5, [r1, #4]
 8000d4c:	f005 0503 	and.w	r5, r5, #3
 8000d50:	3d01      	subs	r5, #1
 8000d52:	2d01      	cmp	r5, #1
 8000d54:	d98c      	bls.n	8000c70 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d56:	684d      	ldr	r5, [r1, #4]
 8000d58:	f005 0603 	and.w	r6, r5, #3
 8000d5c:	2e03      	cmp	r6, #3
 8000d5e:	d09b      	beq.n	8000c98 <HAL_GPIO_Init+0x30>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d60:	684c      	ldr	r4, [r1, #4]
 8000d62:	f004 0403 	and.w	r4, r4, #3
 8000d66:	2c03      	cmp	r4, #3
 8000d68:	d009      	beq.n	8000d7e <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8000d6a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d6c:	005e      	lsls	r6, r3, #1
 8000d6e:	2403      	movs	r4, #3
 8000d70:	40b4      	lsls	r4, r6
 8000d72:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d76:	688c      	ldr	r4, [r1, #8]
 8000d78:	40b4      	lsls	r4, r6
 8000d7a:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000d7c:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7e:	684c      	ldr	r4, [r1, #4]
 8000d80:	f004 0403 	and.w	r4, r4, #3
 8000d84:	2c02      	cmp	r4, #2
 8000d86:	d090      	beq.n	8000caa <HAL_GPIO_Init+0x42>
      temp = GPIOx->MODER;
 8000d88:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d8a:	005e      	lsls	r6, r3, #1
 8000d8c:	2403      	movs	r4, #3
 8000d8e:	40b4      	lsls	r4, r6
 8000d90:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d94:	684c      	ldr	r4, [r1, #4]
 8000d96:	f004 0403 	and.w	r4, r4, #3
 8000d9a:	40b4      	lsls	r4, r6
 8000d9c:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8000d9e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000da0:	684c      	ldr	r4, [r1, #4]
 8000da2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8000da6:	d0c7      	beq.n	8000d38 <HAL_GPIO_Init+0xd0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da8:	4c22      	ldr	r4, [pc, #136]	; (8000e34 <HAL_GPIO_Init+0x1cc>)
 8000daa:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8000dac:	f045 0501 	orr.w	r5, r5, #1
 8000db0:	6625      	str	r5, [r4, #96]	; 0x60
 8000db2:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8000db4:	f004 0401 	and.w	r4, r4, #1
 8000db8:	9401      	str	r4, [sp, #4]
 8000dba:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000dbc:	089d      	lsrs	r5, r3, #2
 8000dbe:	1cae      	adds	r6, r5, #2
 8000dc0:	4c1a      	ldr	r4, [pc, #104]	; (8000e2c <HAL_GPIO_Init+0x1c4>)
 8000dc2:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dc6:	f003 0403 	and.w	r4, r3, #3
 8000dca:	00a6      	lsls	r6, r4, #2
 8000dcc:	240f      	movs	r4, #15
 8000dce:	40b4      	lsls	r4, r6
 8000dd0:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dd4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000dd8:	f43f af7a 	beq.w	8000cd0 <HAL_GPIO_Init+0x68>
 8000ddc:	4c16      	ldr	r4, [pc, #88]	; (8000e38 <HAL_GPIO_Init+0x1d0>)
 8000dde:	42a0      	cmp	r0, r4
 8000de0:	d016      	beq.n	8000e10 <HAL_GPIO_Init+0x1a8>
 8000de2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000de6:	42a0      	cmp	r0, r4
 8000de8:	d014      	beq.n	8000e14 <HAL_GPIO_Init+0x1ac>
 8000dea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dee:	42a0      	cmp	r0, r4
 8000df0:	d012      	beq.n	8000e18 <HAL_GPIO_Init+0x1b0>
 8000df2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000df6:	42a0      	cmp	r0, r4
 8000df8:	d010      	beq.n	8000e1c <HAL_GPIO_Init+0x1b4>
 8000dfa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dfe:	42a0      	cmp	r0, r4
 8000e00:	d00e      	beq.n	8000e20 <HAL_GPIO_Init+0x1b8>
 8000e02:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e06:	42a0      	cmp	r0, r4
 8000e08:	f43f af60 	beq.w	8000ccc <HAL_GPIO_Init+0x64>
 8000e0c:	2407      	movs	r4, #7
 8000e0e:	e760      	b.n	8000cd2 <HAL_GPIO_Init+0x6a>
 8000e10:	2401      	movs	r4, #1
 8000e12:	e75e      	b.n	8000cd2 <HAL_GPIO_Init+0x6a>
 8000e14:	2402      	movs	r4, #2
 8000e16:	e75c      	b.n	8000cd2 <HAL_GPIO_Init+0x6a>
 8000e18:	2403      	movs	r4, #3
 8000e1a:	e75a      	b.n	8000cd2 <HAL_GPIO_Init+0x6a>
 8000e1c:	2404      	movs	r4, #4
 8000e1e:	e758      	b.n	8000cd2 <HAL_GPIO_Init+0x6a>
 8000e20:	2405      	movs	r4, #5
 8000e22:	e756      	b.n	8000cd2 <HAL_GPIO_Init+0x6a>
  }
}
 8000e24:	b002      	add	sp, #8
 8000e26:	bcf0      	pop	{r4, r5, r6, r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40010000 	.word	0x40010000
 8000e30:	40010400 	.word	0x40010400
 8000e34:	40021000 	.word	0x40021000
 8000e38:	48000400 	.word	0x48000400

08000e3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e3c:	b10a      	cbz	r2, 8000e42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e3e:	6181      	str	r1, [r0, #24]
 8000e40:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e42:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000e44:	4770      	bx	lr
	...

08000e48 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e48:	4b02      	ldr	r3, [pc, #8]	; (8000e54 <HAL_PWREx_GetVoltageRange+0xc>)
 8000e4a:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000e4c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40007000 	.word	0x40007000

08000e58 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e58:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000e5c:	d00f      	beq.n	8000e7e <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e6a:	d034      	beq.n	8000ed6 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e6c:	4a1b      	ldr	r2, [pc, #108]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000e6e:	6813      	ldr	r3, [r2, #0]
 8000e70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e78:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e8a:	d020      	beq.n	8000ece <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e8c:	4a13      	ldr	r2, [pc, #76]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000e8e:	6813      	ldr	r3, [r2, #0]
 8000e90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e98:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	2332      	movs	r3, #50	; 0x32
 8000ea0:	fb03 f302 	mul.w	r3, r3, r2
 8000ea4:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	0c9b      	lsrs	r3, r3, #18
 8000eac:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eae:	e000      	b.n	8000eb2 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8000eb0:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000eb4:	6952      	ldr	r2, [r2, #20]
 8000eb6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000eba:	d001      	beq.n	8000ec0 <HAL_PWREx_ControlVoltageScaling+0x68>
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f7      	bne.n	8000eb0 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000ec8:	d103      	bne.n	8000ed2 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8000eca:	2000      	movs	r0, #0
 8000ecc:	4770      	bx	lr
 8000ece:	2000      	movs	r0, #0
 8000ed0:	4770      	bx	lr
        return HAL_TIMEOUT;
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	4770      	bx	lr
  return HAL_OK;
 8000ed6:	2000      	movs	r0, #0
}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40007000 	.word	0x40007000
 8000ee0:	20000018 	.word	0x20000018
 8000ee4:	431bde83 	.word	0x431bde83

08000ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000ee8:	b530      	push	{r4, r5, lr}
 8000eea:	b083      	sub	sp, #12
 8000eec:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000ef6:	d00b      	beq.n	8000f10 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000ef8:	f7ff ffa6 	bl	8000e48 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000efc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000f00:	d017      	beq.n	8000f32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8000f02:	2c80      	cmp	r4, #128	; 0x80
 8000f04:	d81f      	bhi.n	8000f46 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8000f06:	d02d      	beq.n	8000f64 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8000f08:	2c70      	cmp	r4, #112	; 0x70
 8000f0a:	d02d      	beq.n	8000f68 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e01b      	b.n	8000f48 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f10:	4d17      	ldr	r5, [pc, #92]	; (8000f70 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8000f12:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	65ab      	str	r3, [r5, #88]	; 0x58
 8000f1a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000f24:	f7ff ff90 	bl	8000e48 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000f28:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	65ab      	str	r3, [r5, #88]	; 0x58
 8000f30:	e7e4      	b.n	8000efc <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8000f32:	2c80      	cmp	r4, #128	; 0x80
 8000f34:	d903      	bls.n	8000f3e <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8000f36:	2ca0      	cmp	r4, #160	; 0xa0
 8000f38:	d903      	bls.n	8000f42 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	e004      	b.n	8000f48 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e002      	b.n	8000f48 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8000f42:	2101      	movs	r1, #1
 8000f44:	e000      	b.n	8000f48 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000f46:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8000f4a:	6813      	ldr	r3, [r2, #0]
 8000f4c:	f023 0307 	bic.w	r3, r3, #7
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000f54:	6813      	ldr	r3, [r2, #0]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d106      	bne.n	8000f6c <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8000f5e:	2000      	movs	r0, #0
}
 8000f60:	b003      	add	sp, #12
 8000f62:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8000f64:	2102      	movs	r1, #2
 8000f66:	e7ef      	b.n	8000f48 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8000f68:	2101      	movs	r1, #1
 8000f6a:	e7ed      	b.n	8000f48 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	e7f7      	b.n	8000f60 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40022000 	.word	0x40022000

08000f78 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f78:	4a28      	ldr	r2, [pc, #160]	; (800101c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000f7a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f7c:	68d2      	ldr	r2, [r2, #12]
 8000f7e:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f82:	f013 030c 	ands.w	r3, r3, #12
 8000f86:	d00a      	beq.n	8000f9e <HAL_RCC_GetSysClockFreq+0x26>
 8000f88:	2b0c      	cmp	r3, #12
 8000f8a:	d006      	beq.n	8000f9a <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d01f      	beq.n	8000fd0 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d020      	beq.n	8000fd6 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000f94:	2000      	movs	r0, #0
 8000f96:	4602      	mov	r2, r0
 8000f98:	e010      	b.n	8000fbc <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000f9a:	2a01      	cmp	r2, #1
 8000f9c:	d1f6      	bne.n	8000f8c <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000f9e:	4a1f      	ldr	r2, [pc, #124]	; (800101c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000fa0:	6812      	ldr	r2, [r2, #0]
 8000fa2:	f012 0f08 	tst.w	r2, #8
 8000fa6:	d10c      	bne.n	8000fc2 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000fa8:	4a1c      	ldr	r2, [pc, #112]	; (800101c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000faa:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8000fae:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8000fb2:	491b      	ldr	r1, [pc, #108]	; (8001020 <HAL_RCC_GetSysClockFreq+0xa8>)
 8000fb4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fb8:	b143      	cbz	r3, 8000fcc <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000fba:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000fbc:	2b0c      	cmp	r3, #12
 8000fbe:	d00d      	beq.n	8000fdc <HAL_RCC_GetSysClockFreq+0x64>
}
 8000fc0:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000fca:	e7f2      	b.n	8000fb2 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8000fcc:	4610      	mov	r0, r2
 8000fce:	e7f5      	b.n	8000fbc <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8000fd0:	4814      	ldr	r0, [pc, #80]	; (8001024 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	e7f2      	b.n	8000fbc <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8000fd6:	4814      	ldr	r0, [pc, #80]	; (8001028 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000fd8:	2200      	movs	r2, #0
 8000fda:	e7ef      	b.n	8000fbc <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d016      	beq.n	8001016 <HAL_RCC_GetSysClockFreq+0x9e>
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d100      	bne.n	8000fee <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000ff0:	68d8      	ldr	r0, [r3, #12]
 8000ff2:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8000ff6:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000ff8:	68d9      	ldr	r1, [r3, #12]
 8000ffa:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000ffe:	fb02 f201 	mul.w	r2, r2, r1
 8001002:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001006:	68d8      	ldr	r0, [r3, #12]
 8001008:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800100c:	3001      	adds	r0, #1
 800100e:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 8001010:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8001014:	e7d4      	b.n	8000fc0 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8001016:	4a03      	ldr	r2, [pc, #12]	; (8001024 <HAL_RCC_GetSysClockFreq+0xac>)
 8001018:	e7e9      	b.n	8000fee <HAL_RCC_GetSysClockFreq+0x76>
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	08003bc0 	.word	0x08003bc0
 8001024:	00f42400 	.word	0x00f42400
 8001028:	007a1200 	.word	0x007a1200

0800102c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800102c:	2800      	cmp	r0, #0
 800102e:	f000 82ff 	beq.w	8001630 <HAL_RCC_OscConfig+0x604>
{
 8001032:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001034:	b083      	sub	sp, #12
 8001036:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001038:	4bae      	ldr	r3, [pc, #696]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 800103a:	689d      	ldr	r5, [r3, #8]
 800103c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001040:	68de      	ldr	r6, [r3, #12]
 8001042:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001046:	6803      	ldr	r3, [r0, #0]
 8001048:	f013 0f10 	tst.w	r3, #16
 800104c:	d05a      	beq.n	8001104 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800104e:	b1e5      	cbz	r5, 800108a <HAL_RCC_OscConfig+0x5e>
 8001050:	2d0c      	cmp	r5, #12
 8001052:	d018      	beq.n	8001086 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001054:	69a3      	ldr	r3, [r4, #24]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 80bb 	beq.w	80011d2 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 800105c:	4aa5      	ldr	r2, [pc, #660]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 800105e:	6813      	ldr	r3, [r2, #0]
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001066:	f7ff fd9d 	bl	8000ba4 <HAL_GetTick>
 800106a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800106c:	4ba1      	ldr	r3, [pc, #644]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f013 0f02 	tst.w	r3, #2
 8001074:	f040 809a 	bne.w	80011ac <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001078:	f7ff fd94 	bl	8000ba4 <HAL_GetTick>
 800107c:	1bc0      	subs	r0, r0, r7
 800107e:	2802      	cmp	r0, #2
 8001080:	d9f4      	bls.n	800106c <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8001082:	2003      	movs	r0, #3
 8001084:	e2df      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001086:	2e01      	cmp	r6, #1
 8001088:	d1e4      	bne.n	8001054 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800108a:	4b9a      	ldr	r3, [pc, #616]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f013 0f02 	tst.w	r3, #2
 8001092:	d003      	beq.n	800109c <HAL_RCC_OscConfig+0x70>
 8001094:	69a3      	ldr	r3, [r4, #24]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 82cc 	beq.w	8001634 <HAL_RCC_OscConfig+0x608>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800109c:	6a20      	ldr	r0, [r4, #32]
 800109e:	4b95      	ldr	r3, [pc, #596]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f013 0f08 	tst.w	r3, #8
 80010a6:	d05b      	beq.n	8001160 <HAL_RCC_OscConfig+0x134>
 80010a8:	4b92      	ldr	r3, [pc, #584]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010b0:	4298      	cmp	r0, r3
 80010b2:	d85c      	bhi.n	800116e <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b4:	4b8f      	ldr	r3, [pc, #572]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	f042 0208 	orr.w	r2, r2, #8
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010c4:	6a21      	ldr	r1, [r4, #32]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80010d0:	69e1      	ldr	r1, [r4, #28]
 80010d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010d6:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010d8:	2d00      	cmp	r5, #0
 80010da:	d060      	beq.n	800119e <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010dc:	f7ff ff4c 	bl	8000f78 <HAL_RCC_GetSysClockFreq>
 80010e0:	4b84      	ldr	r3, [pc, #528]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010e8:	4a83      	ldr	r2, [pc, #524]	; (80012f8 <HAL_RCC_OscConfig+0x2cc>)
 80010ea:	5cd3      	ldrb	r3, [r2, r3]
 80010ec:	f003 031f 	and.w	r3, r3, #31
 80010f0:	40d8      	lsrs	r0, r3
 80010f2:	4b82      	ldr	r3, [pc, #520]	; (80012fc <HAL_RCC_OscConfig+0x2d0>)
 80010f4:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80010f6:	4b82      	ldr	r3, [pc, #520]	; (8001300 <HAL_RCC_OscConfig+0x2d4>)
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	f7ff fd0b 	bl	8000b14 <HAL_InitTick>
        if(status != HAL_OK)
 80010fe:	2800      	cmp	r0, #0
 8001100:	f040 82a1 	bne.w	8001646 <HAL_RCC_OscConfig+0x61a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	f013 0f01 	tst.w	r3, #1
 800110a:	f000 8081 	beq.w	8001210 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800110e:	2d08      	cmp	r5, #8
 8001110:	d075      	beq.n	80011fe <HAL_RCC_OscConfig+0x1d2>
 8001112:	2d0c      	cmp	r5, #12
 8001114:	d071      	beq.n	80011fa <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001116:	6863      	ldr	r3, [r4, #4]
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111c:	f000 8097 	beq.w	800124e <HAL_RCC_OscConfig+0x222>
 8001120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001124:	f000 8099 	beq.w	800125a <HAL_RCC_OscConfig+0x22e>
 8001128:	4b72      	ldr	r3, [pc, #456]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001138:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800113a:	6863      	ldr	r3, [r4, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 8099 	beq.w	8001274 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8001142:	f7ff fd2f 	bl	8000ba4 <HAL_GetTick>
 8001146:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001148:	4b6a      	ldr	r3, [pc, #424]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001150:	d15e      	bne.n	8001210 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001152:	f7ff fd27 	bl	8000ba4 <HAL_GetTick>
 8001156:	1bc0      	subs	r0, r0, r7
 8001158:	2864      	cmp	r0, #100	; 0x64
 800115a:	d9f5      	bls.n	8001148 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 800115c:	2003      	movs	r0, #3
 800115e:	e272      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001160:	4b64      	ldr	r3, [pc, #400]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 8001162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001166:	091b      	lsrs	r3, r3, #4
 8001168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800116c:	e7a0      	b.n	80010b0 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800116e:	f7ff febb 	bl	8000ee8 <RCC_SetFlashLatencyFromMSIRange>
 8001172:	2800      	cmp	r0, #0
 8001174:	f040 8260 	bne.w	8001638 <HAL_RCC_OscConfig+0x60c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001178:	4b5e      	ldr	r3, [pc, #376]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	f042 0208 	orr.w	r2, r2, #8
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001188:	6a21      	ldr	r1, [r4, #32]
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001194:	69e1      	ldr	r1, [r4, #28]
 8001196:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	e79e      	b.n	80010dc <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800119e:	6a20      	ldr	r0, [r4, #32]
 80011a0:	f7ff fea2 	bl	8000ee8 <RCC_SetFlashLatencyFromMSIRange>
 80011a4:	2800      	cmp	r0, #0
 80011a6:	d099      	beq.n	80010dc <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 80011a8:	2001      	movs	r0, #1
 80011aa:	e24c      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ac:	4b51      	ldr	r3, [pc, #324]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	f042 0208 	orr.w	r2, r2, #8
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80011bc:	6a21      	ldr	r1, [r4, #32]
 80011be:	430a      	orrs	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80011c8:	69e1      	ldr	r1, [r4, #28]
 80011ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	e798      	b.n	8001104 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 80011d2:	4a48      	ldr	r2, [pc, #288]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 80011d4:	6813      	ldr	r3, [r2, #0]
 80011d6:	f023 0301 	bic.w	r3, r3, #1
 80011da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80011dc:	f7ff fce2 	bl	8000ba4 <HAL_GetTick>
 80011e0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011e2:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f013 0f02 	tst.w	r3, #2
 80011ea:	d08b      	beq.n	8001104 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ec:	f7ff fcda 	bl	8000ba4 <HAL_GetTick>
 80011f0:	1bc0      	subs	r0, r0, r7
 80011f2:	2802      	cmp	r0, #2
 80011f4:	d9f5      	bls.n	80011e2 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80011f6:	2003      	movs	r0, #3
 80011f8:	e225      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011fa:	2e03      	cmp	r6, #3
 80011fc:	d18b      	bne.n	8001116 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fe:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001206:	d003      	beq.n	8001210 <HAL_RCC_OscConfig+0x1e4>
 8001208:	6863      	ldr	r3, [r4, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 8216 	beq.w	800163c <HAL_RCC_OscConfig+0x610>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	f013 0f02 	tst.w	r3, #2
 8001216:	d04f      	beq.n	80012b8 <HAL_RCC_OscConfig+0x28c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001218:	2d04      	cmp	r5, #4
 800121a:	d03c      	beq.n	8001296 <HAL_RCC_OscConfig+0x26a>
 800121c:	2d0c      	cmp	r5, #12
 800121e:	d038      	beq.n	8001292 <HAL_RCC_OscConfig+0x266>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001220:	68e3      	ldr	r3, [r4, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d077      	beq.n	8001316 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8001226:	4a33      	ldr	r2, [pc, #204]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 8001228:	6813      	ldr	r3, [r2, #0]
 800122a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001230:	f7ff fcb8 	bl	8000ba4 <HAL_GetTick>
 8001234:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800123e:	d161      	bne.n	8001304 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001240:	f7ff fcb0 	bl	8000ba4 <HAL_GetTick>
 8001244:	1b80      	subs	r0, r0, r6
 8001246:	2802      	cmp	r0, #2
 8001248:	d9f5      	bls.n	8001236 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800124a:	2003      	movs	r0, #3
 800124c:	e1fb      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124e:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 8001250:	6813      	ldr	r3, [r2, #0]
 8001252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e76f      	b.n	800113a <HAL_RCC_OscConfig+0x10e>
 800125a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800125e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	e762      	b.n	800113a <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8001274:	f7ff fc96 	bl	8000ba4 <HAL_GetTick>
 8001278:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001282:	d0c5      	beq.n	8001210 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fc8e 	bl	8000ba4 <HAL_GetTick>
 8001288:	1bc0      	subs	r0, r0, r7
 800128a:	2864      	cmp	r0, #100	; 0x64
 800128c:	d9f5      	bls.n	800127a <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800128e:	2003      	movs	r0, #3
 8001290:	e1d9      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001292:	2e02      	cmp	r6, #2
 8001294:	d1c4      	bne.n	8001220 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800129e:	d003      	beq.n	80012a8 <HAL_RCC_OscConfig+0x27c>
 80012a0:	68e3      	ldr	r3, [r4, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 81cc 	beq.w	8001640 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 80012aa:	6853      	ldr	r3, [r2, #4]
 80012ac:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80012b0:	6921      	ldr	r1, [r4, #16]
 80012b2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80012b6:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b8:	6823      	ldr	r3, [r4, #0]
 80012ba:	f013 0f08 	tst.w	r3, #8
 80012be:	d055      	beq.n	800136c <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c0:	6963      	ldr	r3, [r4, #20]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d03b      	beq.n	800133e <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 80012c8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80012d4:	f7ff fc66 	bl	8000ba4 <HAL_GetTick>
 80012d8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_RCC_OscConfig+0x2c8>)
 80012dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e0:	f013 0f02 	tst.w	r3, #2
 80012e4:	d142      	bne.n	800136c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e6:	f7ff fc5d 	bl	8000ba4 <HAL_GetTick>
 80012ea:	1b80      	subs	r0, r0, r6
 80012ec:	2802      	cmp	r0, #2
 80012ee:	d9f4      	bls.n	80012da <HAL_RCC_OscConfig+0x2ae>
          return HAL_TIMEOUT;
 80012f0:	2003      	movs	r0, #3
 80012f2:	e1a8      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
 80012f4:	40021000 	.word	0x40021000
 80012f8:	08003bf0 	.word	0x08003bf0
 80012fc:	20000018 	.word	0x20000018
 8001300:	20000004 	.word	0x20000004
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001304:	4ab8      	ldr	r2, [pc, #736]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 8001306:	6853      	ldr	r3, [r2, #4]
 8001308:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800130c:	6921      	ldr	r1, [r4, #16]
 800130e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001312:	6053      	str	r3, [r2, #4]
 8001314:	e7d0      	b.n	80012b8 <HAL_RCC_OscConfig+0x28c>
        __HAL_RCC_HSI_DISABLE();
 8001316:	4ab4      	ldr	r2, [pc, #720]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 8001318:	6813      	ldr	r3, [r2, #0]
 800131a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800131e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001320:	f7ff fc40 	bl	8000ba4 <HAL_GetTick>
 8001324:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001326:	4bb0      	ldr	r3, [pc, #704]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800132e:	d0c3      	beq.n	80012b8 <HAL_RCC_OscConfig+0x28c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff fc38 	bl	8000ba4 <HAL_GetTick>
 8001334:	1b80      	subs	r0, r0, r6
 8001336:	2802      	cmp	r0, #2
 8001338:	d9f5      	bls.n	8001326 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 800133a:	2003      	movs	r0, #3
 800133c:	e183      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_LSI_DISABLE();
 800133e:	4aaa      	ldr	r2, [pc, #680]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 8001340:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800134c:	f7ff fc2a 	bl	8000ba4 <HAL_GetTick>
 8001350:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001352:	4ba5      	ldr	r3, [pc, #660]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 8001354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001358:	f013 0f02 	tst.w	r3, #2
 800135c:	d006      	beq.n	800136c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800135e:	f7ff fc21 	bl	8000ba4 <HAL_GetTick>
 8001362:	1b80      	subs	r0, r0, r6
 8001364:	2802      	cmp	r0, #2
 8001366:	d9f4      	bls.n	8001352 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8001368:	2003      	movs	r0, #3
 800136a:	e16c      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	f013 0f04 	tst.w	r3, #4
 8001372:	d07a      	beq.n	800146a <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001374:	4b9c      	ldr	r3, [pc, #624]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001378:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800137c:	d136      	bne.n	80013ec <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b9a      	ldr	r3, [pc, #616]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 8001380:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001382:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001386:	659a      	str	r2, [r3, #88]	; 0x58
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001392:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001394:	4b95      	ldr	r3, [pc, #596]	; (80015ec <HAL_RCC_OscConfig+0x5c0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f413 7f80 	tst.w	r3, #256	; 0x100
 800139c:	d028      	beq.n	80013f0 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139e:	68a3      	ldr	r3, [r4, #8]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d039      	beq.n	8001418 <HAL_RCC_OscConfig+0x3ec>
 80013a4:	2b05      	cmp	r3, #5
 80013a6:	d03f      	beq.n	8001428 <HAL_RCC_OscConfig+0x3fc>
 80013a8:	4b8f      	ldr	r3, [pc, #572]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 80013aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80013ae:	f022 0201 	bic.w	r2, r2, #1
 80013b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80013b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80013ba:	f022 0204 	bic.w	r2, r2, #4
 80013be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013c2:	68a3      	ldr	r3, [r4, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d03d      	beq.n	8001444 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 80013c8:	f7ff fbec 	bl	8000ba4 <HAL_GetTick>
 80013cc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013ce:	4b86      	ldr	r3, [pc, #536]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 80013d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d4:	f013 0f02 	tst.w	r3, #2
 80013d8:	d146      	bne.n	8001468 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013da:	f7ff fbe3 	bl	8000ba4 <HAL_GetTick>
 80013de:	1bc0      	subs	r0, r0, r7
 80013e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80013e4:	4298      	cmp	r0, r3
 80013e6:	d9f2      	bls.n	80013ce <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 80013e8:	2003      	movs	r0, #3
 80013ea:	e12c      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
    FlagStatus       pwrclkchanged = RESET;
 80013ec:	2600      	movs	r6, #0
 80013ee:	e7d1      	b.n	8001394 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013f0:	4a7e      	ldr	r2, [pc, #504]	; (80015ec <HAL_RCC_OscConfig+0x5c0>)
 80013f2:	6813      	ldr	r3, [r2, #0]
 80013f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80013fa:	f7ff fbd3 	bl	8000ba4 <HAL_GetTick>
 80013fe:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001400:	4b7a      	ldr	r3, [pc, #488]	; (80015ec <HAL_RCC_OscConfig+0x5c0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001408:	d1c9      	bne.n	800139e <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140a:	f7ff fbcb 	bl	8000ba4 <HAL_GetTick>
 800140e:	1bc0      	subs	r0, r0, r7
 8001410:	2802      	cmp	r0, #2
 8001412:	d9f5      	bls.n	8001400 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8001414:	2003      	movs	r0, #3
 8001416:	e116      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001418:	4a73      	ldr	r2, [pc, #460]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 800141a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001426:	e7cc      	b.n	80013c2 <HAL_RCC_OscConfig+0x396>
 8001428:	4b6f      	ldr	r3, [pc, #444]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 800142a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800142e:	f042 0204 	orr.w	r2, r2, #4
 8001432:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001436:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800143a:	f042 0201 	orr.w	r2, r2, #1
 800143e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001442:	e7be      	b.n	80013c2 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8001444:	f7ff fbae 	bl	8000ba4 <HAL_GetTick>
 8001448:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800144a:	4b67      	ldr	r3, [pc, #412]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 800144c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001450:	f013 0f02 	tst.w	r3, #2
 8001454:	d008      	beq.n	8001468 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff fba5 	bl	8000ba4 <HAL_GetTick>
 800145a:	1bc0      	subs	r0, r0, r7
 800145c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001460:	4298      	cmp	r0, r3
 8001462:	d9f2      	bls.n	800144a <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8001464:	2003      	movs	r0, #3
 8001466:	e0ee      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
    if(pwrclkchanged == SET)
 8001468:	bb6e      	cbnz	r6, 80014c6 <HAL_RCC_OscConfig+0x49a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800146a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80e9 	beq.w	8001644 <HAL_RCC_OscConfig+0x618>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001472:	2b02      	cmp	r3, #2
 8001474:	d02d      	beq.n	80014d2 <HAL_RCC_OscConfig+0x4a6>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001476:	2d0c      	cmp	r5, #12
 8001478:	f000 80eb 	beq.w	8001652 <HAL_RCC_OscConfig+0x626>
        __HAL_RCC_PLL_DISABLE();
 800147c:	4b5a      	ldr	r3, [pc, #360]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001484:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 800148c:	d104      	bne.n	8001498 <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800148e:	4a56      	ldr	r2, [pc, #344]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 8001490:	68d3      	ldr	r3, [r2, #12]
 8001492:	f023 0303 	bic.w	r3, r3, #3
 8001496:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001498:	4a53      	ldr	r2, [pc, #332]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 800149a:	68d3      	ldr	r3, [r2, #12]
 800149c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a4:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80014a6:	f7ff fb7d 	bl	8000ba4 <HAL_GetTick>
 80014aa:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ac:	4b4e      	ldr	r3, [pc, #312]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014b4:	f000 80ba 	beq.w	800162c <HAL_RCC_OscConfig+0x600>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff fb74 	bl	8000ba4 <HAL_GetTick>
 80014bc:	1b00      	subs	r0, r0, r4
 80014be:	2802      	cmp	r0, #2
 80014c0:	d9f4      	bls.n	80014ac <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 80014c2:	2003      	movs	r0, #3
 80014c4:	e0bf      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c6:	4a48      	ldr	r2, [pc, #288]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 80014c8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80014ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ce:	6593      	str	r3, [r2, #88]	; 0x58
 80014d0:	e7cb      	b.n	800146a <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 80014d2:	4b45      	ldr	r3, [pc, #276]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 80014d4:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d6:	f003 0103 	and.w	r1, r3, #3
 80014da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014dc:	4291      	cmp	r1, r2
 80014de:	d00f      	beq.n	8001500 <HAL_RCC_OscConfig+0x4d4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014e0:	2d0c      	cmp	r5, #12
 80014e2:	f000 80b2 	beq.w	800164a <HAL_RCC_OscConfig+0x61e>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014e6:	4b40      	ldr	r3, [pc, #256]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80014ee:	f040 80ae 	bne.w	800164e <HAL_RCC_OscConfig+0x622>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80014f2:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80014fa:	d02d      	beq.n	8001558 <HAL_RCC_OscConfig+0x52c>
            return HAL_ERROR;
 80014fc:	2001      	movs	r0, #1
 80014fe:	e0a2      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001500:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001504:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001506:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001508:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800150c:	d1e8      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800150e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001512:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001514:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001518:	d1e2      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800151a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800151e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001520:	3a07      	subs	r2, #7
 8001522:	bf18      	it	ne
 8001524:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001526:	4291      	cmp	r1, r2
 8001528:	d1da      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800152a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800152e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001530:	0852      	lsrs	r2, r2, #1
 8001532:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001534:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001538:	d1d2      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800153a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800153e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001540:	0852      	lsrs	r2, r2, #1
 8001542:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001544:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001548:	d1ca      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4b4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800154a:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001552:	d051      	beq.n	80015f8 <HAL_RCC_OscConfig+0x5cc>
  return HAL_OK;
 8001554:	2000      	movs	r0, #0
 8001556:	e076      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
            __HAL_RCC_PLL_DISABLE();
 8001558:	4a23      	ldr	r2, [pc, #140]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 800155a:	6813      	ldr	r3, [r2, #0]
 800155c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001560:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8001562:	f7ff fb1f 	bl	8000ba4 <HAL_GetTick>
 8001566:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001570:	d006      	beq.n	8001580 <HAL_RCC_OscConfig+0x554>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001572:	f7ff fb17 	bl	8000ba4 <HAL_GetTick>
 8001576:	1b40      	subs	r0, r0, r5
 8001578:	2802      	cmp	r0, #2
 800157a:	d9f5      	bls.n	8001568 <HAL_RCC_OscConfig+0x53c>
                return HAL_TIMEOUT;
 800157c:	2003      	movs	r0, #3
 800157e:	e062      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 8001582:	68d3      	ldr	r3, [r2, #12]
 8001584:	491a      	ldr	r1, [pc, #104]	; (80015f0 <HAL_RCC_OscConfig+0x5c4>)
 8001586:	4019      	ands	r1, r3
 8001588:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800158a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800158c:	3801      	subs	r0, #1
 800158e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001592:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001594:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001598:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800159a:	0840      	lsrs	r0, r0, #1
 800159c:	3801      	subs	r0, #1
 800159e:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80015a2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80015a4:	0840      	lsrs	r0, r0, #1
 80015a6:	3801      	subs	r0, #1
 80015a8:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80015ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80015ae:	0900      	lsrs	r0, r0, #4
 80015b0:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80015b4:	430b      	orrs	r3, r1
 80015b6:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 80015b8:	6813      	ldr	r3, [r2, #0]
 80015ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015be:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015c0:	68d3      	ldr	r3, [r2, #12]
 80015c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015c6:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80015c8:	f7ff faec 	bl	8000ba4 <HAL_GetTick>
 80015cc:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_RCC_OscConfig+0x5bc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015d6:	d10d      	bne.n	80015f4 <HAL_RCC_OscConfig+0x5c8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d8:	f7ff fae4 	bl	8000ba4 <HAL_GetTick>
 80015dc:	1b00      	subs	r0, r0, r4
 80015de:	2802      	cmp	r0, #2
 80015e0:	d9f5      	bls.n	80015ce <HAL_RCC_OscConfig+0x5a2>
                return HAL_TIMEOUT;
 80015e2:	2003      	movs	r0, #3
 80015e4:	e02f      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40007000 	.word	0x40007000
 80015f0:	f99d808c 	.word	0xf99d808c
  return HAL_OK;
 80015f4:	2000      	movs	r0, #0
 80015f6:	e026      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
          __HAL_RCC_PLL_ENABLE();
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_RCC_OscConfig+0x62c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001600:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001608:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800160a:	f7ff facb 	bl	8000ba4 <HAL_GetTick>
 800160e:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <HAL_RCC_OscConfig+0x62c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001618:	d106      	bne.n	8001628 <HAL_RCC_OscConfig+0x5fc>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff fac3 	bl	8000ba4 <HAL_GetTick>
 800161e:	1b03      	subs	r3, r0, r4
 8001620:	2b02      	cmp	r3, #2
 8001622:	d9f5      	bls.n	8001610 <HAL_RCC_OscConfig+0x5e4>
              return HAL_TIMEOUT;
 8001624:	2003      	movs	r0, #3
 8001626:	e00e      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 8001628:	2000      	movs	r0, #0
 800162a:	e00c      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
 800162c:	2000      	movs	r0, #0
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
    return HAL_ERROR;
 8001630:	2001      	movs	r0, #1
}
 8001632:	4770      	bx	lr
        return HAL_ERROR;
 8001634:	2001      	movs	r0, #1
 8001636:	e006      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
            return HAL_ERROR;
 8001638:	2001      	movs	r0, #1
 800163a:	e004      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 800163c:	2001      	movs	r0, #1
 800163e:	e002      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 8001640:	2001      	movs	r0, #1
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 8001644:	2000      	movs	r0, #0
}
 8001646:	b003      	add	sp, #12
 8001648:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 800164a:	2001      	movs	r0, #1
 800164c:	e7fb      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
            return HAL_ERROR;
 800164e:	2001      	movs	r0, #1
 8001650:	e7f9      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 8001652:	2001      	movs	r0, #1
 8001654:	e7f7      	b.n	8001646 <HAL_RCC_OscConfig+0x61a>
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000

0800165c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800165c:	2800      	cmp	r0, #0
 800165e:	f000 8098 	beq.w	8001792 <HAL_RCC_ClockConfig+0x136>
{
 8001662:	b570      	push	{r4, r5, r6, lr}
 8001664:	460c      	mov	r4, r1
 8001666:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001668:	4b4e      	ldr	r3, [pc, #312]	; (80017a4 <HAL_RCC_ClockConfig+0x148>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	428b      	cmp	r3, r1
 8001672:	d20b      	bcs.n	800168c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001674:	4a4b      	ldr	r2, [pc, #300]	; (80017a4 <HAL_RCC_ClockConfig+0x148>)
 8001676:	6813      	ldr	r3, [r2, #0]
 8001678:	f023 0307 	bic.w	r3, r3, #7
 800167c:	430b      	orrs	r3, r1
 800167e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001680:	6813      	ldr	r3, [r2, #0]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	428b      	cmp	r3, r1
 8001688:	f040 8085 	bne.w	8001796 <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	f013 0f01 	tst.w	r3, #1
 8001692:	d039      	beq.n	8001708 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001694:	686b      	ldr	r3, [r5, #4]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d009      	beq.n	80016ae <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169a:	2b02      	cmp	r3, #2
 800169c:	d026      	beq.n	80016ec <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800169e:	bb63      	cbnz	r3, 80016fa <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016a0:	4a41      	ldr	r2, [pc, #260]	; (80017a8 <HAL_RCC_ClockConfig+0x14c>)
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	f012 0f02 	tst.w	r2, #2
 80016a8:	d106      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 80016aa:	2001      	movs	r0, #1
 80016ac:	e070      	b.n	8001790 <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ae:	4a3e      	ldr	r2, [pc, #248]	; (80017a8 <HAL_RCC_ClockConfig+0x14c>)
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80016b6:	d070      	beq.n	800179a <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016b8:	493b      	ldr	r1, [pc, #236]	; (80017a8 <HAL_RCC_ClockConfig+0x14c>)
 80016ba:	688a      	ldr	r2, [r1, #8]
 80016bc:	f022 0203 	bic.w	r2, r2, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80016c4:	f7ff fa6e 	bl	8000ba4 <HAL_GetTick>
 80016c8:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ca:	4b37      	ldr	r3, [pc, #220]	; (80017a8 <HAL_RCC_ClockConfig+0x14c>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	686a      	ldr	r2, [r5, #4]
 80016d4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80016d8:	d016      	beq.n	8001708 <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016da:	f7ff fa63 	bl	8000ba4 <HAL_GetTick>
 80016de:	1b80      	subs	r0, r0, r6
 80016e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80016e4:	4298      	cmp	r0, r3
 80016e6:	d9f0      	bls.n	80016ca <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 80016e8:	2003      	movs	r0, #3
 80016ea:	e051      	b.n	8001790 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ec:	4a2e      	ldr	r2, [pc, #184]	; (80017a8 <HAL_RCC_ClockConfig+0x14c>)
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80016f4:	d1e0      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 80016f6:	2001      	movs	r0, #1
 80016f8:	e04a      	b.n	8001790 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fa:	4a2b      	ldr	r2, [pc, #172]	; (80017a8 <HAL_RCC_ClockConfig+0x14c>)
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001702:	d1d9      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8001704:	2001      	movs	r0, #1
 8001706:	e043      	b.n	8001790 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	f013 0f02 	tst.w	r3, #2
 800170e:	d006      	beq.n	800171e <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001710:	4a25      	ldr	r2, [pc, #148]	; (80017a8 <HAL_RCC_ClockConfig+0x14c>)
 8001712:	6893      	ldr	r3, [r2, #8]
 8001714:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001718:	68a9      	ldr	r1, [r5, #8]
 800171a:	430b      	orrs	r3, r1
 800171c:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_RCC_ClockConfig+0x148>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	42a3      	cmp	r3, r4
 8001728:	d90a      	bls.n	8001740 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4a1e      	ldr	r2, [pc, #120]	; (80017a4 <HAL_RCC_ClockConfig+0x148>)
 800172c:	6813      	ldr	r3, [r2, #0]
 800172e:	f023 0307 	bic.w	r3, r3, #7
 8001732:	4323      	orrs	r3, r4
 8001734:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001736:	6813      	ldr	r3, [r2, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	42a3      	cmp	r3, r4
 800173e:	d12e      	bne.n	800179e <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	682b      	ldr	r3, [r5, #0]
 8001742:	f013 0f04 	tst.w	r3, #4
 8001746:	d006      	beq.n	8001756 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001748:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <HAL_RCC_ClockConfig+0x14c>)
 800174a:	6893      	ldr	r3, [r2, #8]
 800174c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001750:	68e9      	ldr	r1, [r5, #12]
 8001752:	430b      	orrs	r3, r1
 8001754:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001756:	682b      	ldr	r3, [r5, #0]
 8001758:	f013 0f08 	tst.w	r3, #8
 800175c:	d007      	beq.n	800176e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800175e:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <HAL_RCC_ClockConfig+0x14c>)
 8001760:	6893      	ldr	r3, [r2, #8]
 8001762:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001766:	6929      	ldr	r1, [r5, #16]
 8001768:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800176c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800176e:	f7ff fc03 	bl	8000f78 <HAL_RCC_GetSysClockFreq>
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_RCC_ClockConfig+0x14c>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800177a:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <HAL_RCC_ClockConfig+0x150>)
 800177c:	5cd3      	ldrb	r3, [r2, r3]
 800177e:	f003 031f 	and.w	r3, r3, #31
 8001782:	40d8      	lsrs	r0, r3
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_RCC_ClockConfig+0x154>)
 8001786:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_RCC_ClockConfig+0x158>)
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	f7ff f9c2 	bl	8000b14 <HAL_InitTick>
}
 8001790:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001792:	2001      	movs	r0, #1
}
 8001794:	4770      	bx	lr
      return HAL_ERROR;
 8001796:	2001      	movs	r0, #1
 8001798:	e7fa      	b.n	8001790 <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 800179a:	2001      	movs	r0, #1
 800179c:	e7f8      	b.n	8001790 <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 800179e:	2001      	movs	r0, #1
 80017a0:	e7f6      	b.n	8001790 <HAL_RCC_ClockConfig+0x134>
 80017a2:	bf00      	nop
 80017a4:	40022000 	.word	0x40022000
 80017a8:	40021000 	.word	0x40021000
 80017ac:	08003bf0 	.word	0x08003bf0
 80017b0:	20000018 	.word	0x20000018
 80017b4:	20000004 	.word	0x20000004

080017b8 <HAL_RCC_GetHCLKFreq>:
}
 80017b8:	4b01      	ldr	r3, [pc, #4]	; (80017c0 <HAL_RCC_GetHCLKFreq+0x8>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000018 	.word	0x20000018

080017c4 <HAL_RCC_GetPCLK1Freq>:
{
 80017c4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80017c6:	f7ff fff7 	bl	80017b8 <HAL_RCC_GetHCLKFreq>
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	f003 031f 	and.w	r3, r3, #31
}
 80017da:	40d8      	lsrs	r0, r3
 80017dc:	bd08      	pop	{r3, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	08003c00 	.word	0x08003c00

080017e8 <HAL_RCC_GetPCLK2Freq>:
{
 80017e8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80017ea:	f7ff ffe5 	bl	80017b8 <HAL_RCC_GetHCLKFreq>
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	f003 031f 	and.w	r3, r3, #31
}
 80017fe:	40d8      	lsrs	r0, r3
 8001800:	bd08      	pop	{r3, pc}
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	08003c00 	.word	0x08003c00

0800180c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180e:	4604      	mov	r4, r0
 8001810:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001812:	4b59      	ldr	r3, [pc, #356]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f013 0f03 	tst.w	r3, #3
 800181a:	d018      	beq.n	800184e <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800181c:	4b56      	ldr	r3, [pc, #344]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	6802      	ldr	r2, [r0, #0]
 8001826:	4293      	cmp	r3, r2
 8001828:	d002      	beq.n	8001830 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800182a:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 800182c:	4628      	mov	r0, r5
 800182e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8001830:	2a00      	cmp	r2, #0
 8001832:	f000 809e 	beq.w	8001972 <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001836:	4b50      	ldr	r3, [pc, #320]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800183e:	3301      	adds	r3, #1
 8001840:	6842      	ldr	r2, [r0, #4]
       ||
 8001842:	4293      	cmp	r3, r2
 8001844:	d001      	beq.n	800184a <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 8001846:	2501      	movs	r5, #1
 8001848:	e7f0      	b.n	800182c <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 800184a:	2500      	movs	r5, #0
 800184c:	e009      	b.n	8001862 <RCCEx_PLLSAI1_Config+0x56>
    switch(PllSai1->PLLSAI1Source)
 800184e:	6803      	ldr	r3, [r0, #0]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d057      	beq.n	8001904 <RCCEx_PLLSAI1_Config+0xf8>
 8001854:	2b03      	cmp	r3, #3
 8001856:	d05c      	beq.n	8001912 <RCCEx_PLLSAI1_Config+0x106>
 8001858:	2b01      	cmp	r3, #1
 800185a:	d042      	beq.n	80018e2 <RCCEx_PLLSAI1_Config+0xd6>
 800185c:	2501      	movs	r5, #1
  if(status == HAL_OK)
 800185e:	2d00      	cmp	r5, #0
 8001860:	d1e4      	bne.n	800182c <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 8001862:	4a45      	ldr	r2, [pc, #276]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 8001864:	6813      	ldr	r3, [r2, #0]
 8001866:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800186a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800186c:	f7ff f99a 	bl	8000ba4 <HAL_GetTick>
 8001870:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001872:	4b41      	ldr	r3, [pc, #260]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800187a:	d005      	beq.n	8001888 <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800187c:	f7ff f992 	bl	8000ba4 <HAL_GetTick>
 8001880:	1b83      	subs	r3, r0, r6
 8001882:	2b02      	cmp	r3, #2
 8001884:	d9f5      	bls.n	8001872 <RCCEx_PLLSAI1_Config+0x66>
        status = HAL_TIMEOUT;
 8001886:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8001888:	2d00      	cmp	r5, #0
 800188a:	d1cf      	bne.n	800182c <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 800188c:	2f00      	cmp	r7, #0
 800188e:	d14e      	bne.n	800192e <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001890:	4939      	ldr	r1, [pc, #228]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 8001892:	690b      	ldr	r3, [r1, #16]
 8001894:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800189c:	68a0      	ldr	r0, [r4, #8]
 800189e:	68e2      	ldr	r2, [r4, #12]
 80018a0:	0912      	lsrs	r2, r2, #4
 80018a2:	0452      	lsls	r2, r2, #17
 80018a4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80018a8:	4313      	orrs	r3, r2
 80018aa:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80018ac:	4a32      	ldr	r2, [pc, #200]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 80018ae:	6813      	ldr	r3, [r2, #0]
 80018b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018b4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80018b6:	f7ff f975 	bl	8000ba4 <HAL_GetTick>
 80018ba:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80018bc:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80018c4:	d105      	bne.n	80018d2 <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80018c6:	f7ff f96d 	bl	8000ba4 <HAL_GetTick>
 80018ca:	1b83      	subs	r3, r0, r6
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d9f5      	bls.n	80018bc <RCCEx_PLLSAI1_Config+0xb0>
          status = HAL_TIMEOUT;
 80018d0:	2503      	movs	r5, #3
      if(status == HAL_OK)
 80018d2:	2d00      	cmp	r5, #0
 80018d4:	d1aa      	bne.n	800182c <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80018d6:	4a28      	ldr	r2, [pc, #160]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 80018d8:	6913      	ldr	r3, [r2, #16]
 80018da:	69a1      	ldr	r1, [r4, #24]
 80018dc:	430b      	orrs	r3, r1
 80018de:	6113      	str	r3, [r2, #16]
 80018e0:	e7a4      	b.n	800182c <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80018e2:	4a25      	ldr	r2, [pc, #148]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	f012 0f02 	tst.w	r2, #2
 80018ea:	d01e      	beq.n	800192a <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80018ec:	4822      	ldr	r0, [pc, #136]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 80018ee:	68c2      	ldr	r2, [r0, #12]
 80018f0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80018f4:	6861      	ldr	r1, [r4, #4]
 80018f6:	3901      	subs	r1, #1
 80018f8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60c3      	str	r3, [r0, #12]
 8001900:	2500      	movs	r5, #0
 8001902:	e7ac      	b.n	800185e <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001904:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800190c:	d1ee      	bne.n	80018ec <RCCEx_PLLSAI1_Config+0xe0>
        status = HAL_ERROR;
 800190e:	2501      	movs	r5, #1
 8001910:	e7a5      	b.n	800185e <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001912:	4a19      	ldr	r2, [pc, #100]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800191a:	d1e7      	bne.n	80018ec <RCCEx_PLLSAI1_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800191c:	4a16      	ldr	r2, [pc, #88]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001924:	d1e2      	bne.n	80018ec <RCCEx_PLLSAI1_Config+0xe0>
          status = HAL_ERROR;
 8001926:	2501      	movs	r5, #1
 8001928:	e799      	b.n	800185e <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_ERROR;
 800192a:	2501      	movs	r5, #1
 800192c:	e797      	b.n	800185e <RCCEx_PLLSAI1_Config+0x52>
      else if(Divider == DIVIDER_Q_UPDATE)
 800192e:	2f01      	cmp	r7, #1
 8001930:	d00f      	beq.n	8001952 <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001932:	4811      	ldr	r0, [pc, #68]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 8001934:	6902      	ldr	r2, [r0, #16]
 8001936:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800193a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800193e:	68a1      	ldr	r1, [r4, #8]
 8001940:	6963      	ldr	r3, [r4, #20]
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	3b01      	subs	r3, #1
 8001946:	065b      	lsls	r3, r3, #25
 8001948:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800194c:	4313      	orrs	r3, r2
 800194e:	6103      	str	r3, [r0, #16]
 8001950:	e7ac      	b.n	80018ac <RCCEx_PLLSAI1_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001952:	4809      	ldr	r0, [pc, #36]	; (8001978 <RCCEx_PLLSAI1_Config+0x16c>)
 8001954:	6902      	ldr	r2, [r0, #16]
 8001956:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800195a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800195e:	68a1      	ldr	r1, [r4, #8]
 8001960:	6923      	ldr	r3, [r4, #16]
 8001962:	085b      	lsrs	r3, r3, #1
 8001964:	3b01      	subs	r3, #1
 8001966:	055b      	lsls	r3, r3, #21
 8001968:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800196c:	4313      	orrs	r3, r2
 800196e:	6103      	str	r3, [r0, #16]
 8001970:	e79c      	b.n	80018ac <RCCEx_PLLSAI1_Config+0xa0>
      status = HAL_ERROR;
 8001972:	2501      	movs	r5, #1
 8001974:	e75a      	b.n	800182c <RCCEx_PLLSAI1_Config+0x20>
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000

0800197c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800197c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800197e:	4604      	mov	r4, r0
 8001980:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001982:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <RCCEx_PLLSAI2_Config+0x148>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f013 0f03 	tst.w	r3, #3
 800198a:	d018      	beq.n	80019be <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800198c:	4b4d      	ldr	r3, [pc, #308]	; (8001ac4 <RCCEx_PLLSAI2_Config+0x148>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	6802      	ldr	r2, [r0, #0]
 8001996:	4293      	cmp	r3, r2
 8001998:	d002      	beq.n	80019a0 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800199a:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 800199c:	4628      	mov	r0, r5
 800199e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80019a0:	2a00      	cmp	r2, #0
 80019a2:	f000 808c 	beq.w	8001abe <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80019a6:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <RCCEx_PLLSAI2_Config+0x148>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80019ae:	3301      	adds	r3, #1
 80019b0:	6842      	ldr	r2, [r0, #4]
       ||
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d001      	beq.n	80019ba <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 80019b6:	2501      	movs	r5, #1
 80019b8:	e7f0      	b.n	800199c <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 80019ba:	2500      	movs	r5, #0
 80019bc:	e009      	b.n	80019d2 <RCCEx_PLLSAI2_Config+0x56>
    switch(PllSai2->PLLSAI2Source)
 80019be:	6803      	ldr	r3, [r0, #0]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d057      	beq.n	8001a74 <RCCEx_PLLSAI2_Config+0xf8>
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d05c      	beq.n	8001a82 <RCCEx_PLLSAI2_Config+0x106>
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d042      	beq.n	8001a52 <RCCEx_PLLSAI2_Config+0xd6>
 80019cc:	2501      	movs	r5, #1
  if(status == HAL_OK)
 80019ce:	2d00      	cmp	r5, #0
 80019d0:	d1e4      	bne.n	800199c <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 80019d2:	4a3c      	ldr	r2, [pc, #240]	; (8001ac4 <RCCEx_PLLSAI2_Config+0x148>)
 80019d4:	6813      	ldr	r3, [r2, #0]
 80019d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019da:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80019dc:	f7ff f8e2 	bl	8000ba4 <HAL_GetTick>
 80019e0:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80019e2:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <RCCEx_PLLSAI2_Config+0x148>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80019ea:	d005      	beq.n	80019f8 <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80019ec:	f7ff f8da 	bl	8000ba4 <HAL_GetTick>
 80019f0:	1b83      	subs	r3, r0, r6
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d9f5      	bls.n	80019e2 <RCCEx_PLLSAI2_Config+0x66>
        status = HAL_TIMEOUT;
 80019f6:	2503      	movs	r5, #3
    if(status == HAL_OK)
 80019f8:	2d00      	cmp	r5, #0
 80019fa:	d1cf      	bne.n	800199c <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80019fc:	2f00      	cmp	r7, #0
 80019fe:	d14e      	bne.n	8001a9e <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001a00:	4930      	ldr	r1, [pc, #192]	; (8001ac4 <RCCEx_PLLSAI2_Config+0x148>)
 8001a02:	694b      	ldr	r3, [r1, #20]
 8001a04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a0c:	68a0      	ldr	r0, [r4, #8]
 8001a0e:	68e2      	ldr	r2, [r4, #12]
 8001a10:	0912      	lsrs	r2, r2, #4
 8001a12:	0452      	lsls	r2, r2, #17
 8001a14:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8001a1c:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <RCCEx_PLLSAI2_Config+0x148>)
 8001a1e:	6813      	ldr	r3, [r2, #0]
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a24:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001a26:	f7ff f8bd 	bl	8000ba4 <HAL_GetTick>
 8001a2a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001a2c:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <RCCEx_PLLSAI2_Config+0x148>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001a34:	d105      	bne.n	8001a42 <RCCEx_PLLSAI2_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001a36:	f7ff f8b5 	bl	8000ba4 <HAL_GetTick>
 8001a3a:	1b83      	subs	r3, r0, r6
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d9f5      	bls.n	8001a2c <RCCEx_PLLSAI2_Config+0xb0>
          status = HAL_TIMEOUT;
 8001a40:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8001a42:	2d00      	cmp	r5, #0
 8001a44:	d1aa      	bne.n	800199c <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001a46:	4a1f      	ldr	r2, [pc, #124]	; (8001ac4 <RCCEx_PLLSAI2_Config+0x148>)
 8001a48:	6953      	ldr	r3, [r2, #20]
 8001a4a:	6961      	ldr	r1, [r4, #20]
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	6153      	str	r3, [r2, #20]
 8001a50:	e7a4      	b.n	800199c <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001a52:	4a1c      	ldr	r2, [pc, #112]	; (8001ac4 <RCCEx_PLLSAI2_Config+0x148>)
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	f012 0f02 	tst.w	r2, #2
 8001a5a:	d01e      	beq.n	8001a9a <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001a5c:	4819      	ldr	r0, [pc, #100]	; (8001ac4 <RCCEx_PLLSAI2_Config+0x148>)
 8001a5e:	68c2      	ldr	r2, [r0, #12]
 8001a60:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8001a64:	6861      	ldr	r1, [r4, #4]
 8001a66:	3901      	subs	r1, #1
 8001a68:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60c3      	str	r3, [r0, #12]
 8001a70:	2500      	movs	r5, #0
 8001a72:	e7ac      	b.n	80019ce <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001a74:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <RCCEx_PLLSAI2_Config+0x148>)
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001a7c:	d1ee      	bne.n	8001a5c <RCCEx_PLLSAI2_Config+0xe0>
        status = HAL_ERROR;
 8001a7e:	2501      	movs	r5, #1
 8001a80:	e7a5      	b.n	80019ce <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001a82:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <RCCEx_PLLSAI2_Config+0x148>)
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001a8a:	d1e7      	bne.n	8001a5c <RCCEx_PLLSAI2_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <RCCEx_PLLSAI2_Config+0x148>)
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001a94:	d1e2      	bne.n	8001a5c <RCCEx_PLLSAI2_Config+0xe0>
          status = HAL_ERROR;
 8001a96:	2501      	movs	r5, #1
 8001a98:	e799      	b.n	80019ce <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_ERROR;
 8001a9a:	2501      	movs	r5, #1
 8001a9c:	e797      	b.n	80019ce <RCCEx_PLLSAI2_Config+0x52>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001a9e:	4809      	ldr	r0, [pc, #36]	; (8001ac4 <RCCEx_PLLSAI2_Config+0x148>)
 8001aa0:	6942      	ldr	r2, [r0, #20]
 8001aa2:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8001aa6:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001aaa:	68a1      	ldr	r1, [r4, #8]
 8001aac:	6923      	ldr	r3, [r4, #16]
 8001aae:	085b      	lsrs	r3, r3, #1
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	065b      	lsls	r3, r3, #25
 8001ab4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	6143      	str	r3, [r0, #20]
 8001abc:	e7ae      	b.n	8001a1c <RCCEx_PLLSAI2_Config+0xa0>
      status = HAL_ERROR;
 8001abe:	2501      	movs	r5, #1
 8001ac0:	e76c      	b.n	800199c <RCCEx_PLLSAI2_Config+0x20>
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ad0:	6803      	ldr	r3, [r0, #0]
 8001ad2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001ad6:	d033      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001ad8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001ada:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ade:	d01f      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8001ae0:	d80c      	bhi.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001ae2:	b323      	cbz	r3, 8001b2e <HAL_RCCEx_PeriphCLKConfig+0x66>
 8001ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ae8:	d105      	bne.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001aea:	2100      	movs	r1, #0
 8001aec:	3020      	adds	r0, #32
 8001aee:	f7ff ff45 	bl	800197c <RCCEx_PLLSAI2_Config>
 8001af2:	4606      	mov	r6, r0
      break;
 8001af4:	e020      	b.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001af6:	2701      	movs	r7, #1
 8001af8:	463e      	mov	r6, r7
 8001afa:	e023      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001afc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001b00:	d10b      	bne.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001b02:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b04:	4a62      	ldr	r2, [pc, #392]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001b06:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b0a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001b0e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001b10:	430b      	orrs	r3, r1
 8001b12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b16:	2700      	movs	r7, #0
 8001b18:	e014      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001b1a:	2701      	movs	r7, #1
 8001b1c:	463e      	mov	r6, r7
 8001b1e:	e011      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001b20:	4a5b      	ldr	r2, [pc, #364]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001b22:	68d3      	ldr	r3, [r2, #12]
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b28:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b2a:	2600      	movs	r6, #0
 8001b2c:	e7ea      	b.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001b2e:	2100      	movs	r1, #0
 8001b30:	3004      	adds	r0, #4
 8001b32:	f7ff fe6b 	bl	800180c <RCCEx_PLLSAI1_Config>
 8001b36:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001b38:	2e00      	cmp	r6, #0
 8001b3a:	d0e3      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8001b3c:	4637      	mov	r7, r6
 8001b3e:	e001      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b40:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b42:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001b4a:	d021      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001b4c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001b4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b52:	d079      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8001b54:	d80e      	bhi.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d07c      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8001b5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0xa6>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001b60:	2100      	movs	r1, #0
 8001b62:	f104 0020 	add.w	r0, r4, #32
 8001b66:	f7ff ff09 	bl	800197c <RCCEx_PLLSAI2_Config>
 8001b6a:	4606      	mov	r6, r0
      break;
 8001b6c:	e005      	b.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0xb2>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001b6e:	2701      	movs	r7, #1
 8001b70:	463e      	mov	r6, r7
 8001b72:	e00d      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8001b74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001b78:	d163      	bne.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    if(ret == HAL_OK)
 8001b7a:	2e00      	cmp	r6, #0
 8001b7c:	d170      	bne.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b7e:	4a44      	ldr	r2, [pc, #272]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001b80:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b84:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001b88:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b96:	f000 8084 	beq.w	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001ba2:	d15f      	bne.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba4:	4b3a      	ldr	r3, [pc, #232]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001ba6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ba8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bac:	659a      	str	r2, [r3, #88]	; 0x58
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001bb8:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bbc:	4a35      	ldr	r2, [pc, #212]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001bbe:	6813      	ldr	r3, [r2, #0]
 8001bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001bc6:	f7fe ffed 	bl	8000ba4 <HAL_GetTick>
 8001bca:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001bcc:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001bd4:	d105      	bne.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd6:	f7fe ffe5 	bl	8000ba4 <HAL_GetTick>
 8001bda:	1b40      	subs	r0, r0, r5
 8001bdc:	2802      	cmp	r0, #2
 8001bde:	d9f5      	bls.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x104>
        ret = HAL_TIMEOUT;
 8001be0:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8001be2:	2e00      	cmp	r6, #0
 8001be4:	d158      	bne.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001be6:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bec:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001bf0:	d016      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8001bf2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d012      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x158>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bfa:	4a25      	ldr	r2, [pc, #148]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001bfc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c04:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8001c08:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001c0c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c10:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8001c14:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001c18:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c20:	f013 0f01 	tst.w	r3, #1
 8001c24:	d121      	bne.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      if(ret == HAL_OK)
 8001c26:	2e00      	cmp	r6, #0
 8001c28:	f040 8139 	bne.w	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c2c:	4a18      	ldr	r2, [pc, #96]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001c2e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c36:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c40:	e02b      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001c42:	2701      	movs	r7, #1
 8001c44:	463e      	mov	r6, r7
 8001c46:	e7a3      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c48:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001c4a:	68d3      	ldr	r3, [r2, #12]
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	60d3      	str	r3, [r2, #12]
      break;
 8001c52:	e792      	b.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0xb2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c54:	2100      	movs	r1, #0
 8001c56:	1d20      	adds	r0, r4, #4
 8001c58:	f7ff fdd8 	bl	800180c <RCCEx_PLLSAI1_Config>
 8001c5c:	4606      	mov	r6, r0
      break;
 8001c5e:	e78c      	b.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8001c60:	4637      	mov	r7, r6
 8001c62:	e795      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    FlagStatus       pwrclkchanged = RESET;
 8001c64:	f04f 0800 	mov.w	r8, #0
 8001c68:	e7a8      	b.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
        tickstart = HAL_GetTick();
 8001c6a:	f7fe ff9b 	bl	8000ba4 <HAL_GetTick>
 8001c6e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c76:	f013 0f02 	tst.w	r3, #2
 8001c7a:	d1d4      	bne.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7c:	f7fe ff92 	bl	8000ba4 <HAL_GetTick>
 8001c80:	1b40      	subs	r0, r0, r5
 8001c82:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c86:	4298      	cmp	r0, r3
 8001c88:	d9f2      	bls.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
            ret = HAL_TIMEOUT;
 8001c8a:	2603      	movs	r6, #3
 8001c8c:	e7cb      	b.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40007000 	.word	0x40007000
      status = ret;
 8001c98:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8001c9a:	f1b8 0f00 	cmp.w	r8, #0
 8001c9e:	f040 8100 	bne.w	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	f013 0f01 	tst.w	r3, #1
 8001ca8:	d008      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001caa:	4a9d      	ldr	r2, [pc, #628]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001cac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001cb0:	f023 0303 	bic.w	r3, r3, #3
 8001cb4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	f013 0f02 	tst.w	r3, #2
 8001cc2:	d008      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cc4:	4a96      	ldr	r2, [pc, #600]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001cc6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001cca:	f023 030c 	bic.w	r3, r3, #12
 8001cce:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	f013 0f04 	tst.w	r3, #4
 8001cdc:	d008      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001cde:	4a90      	ldr	r2, [pc, #576]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ce0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ce4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001ce8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001cea:	430b      	orrs	r3, r1
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	f013 0f08 	tst.w	r3, #8
 8001cf6:	d008      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001cf8:	4a89      	ldr	r2, [pc, #548]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001cfa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001cfe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001d02:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001d04:	430b      	orrs	r3, r1
 8001d06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	f013 0f10 	tst.w	r3, #16
 8001d10:	d008      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d12:	4a83      	ldr	r2, [pc, #524]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001d14:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001d1e:	430b      	orrs	r3, r1
 8001d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	f013 0f20 	tst.w	r3, #32
 8001d2a:	d008      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d2c:	4a7c      	ldr	r2, [pc, #496]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001d2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d32:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d36:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d3e:	6823      	ldr	r3, [r4, #0]
 8001d40:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001d44:	d008      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d46:	4a76      	ldr	r2, [pc, #472]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001d48:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d4c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001d50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001d52:	430b      	orrs	r3, r1
 8001d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d60:	4a6f      	ldr	r2, [pc, #444]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001d62:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d66:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001d6a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001d78:	d008      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d7a:	4a69      	ldr	r2, [pc, #420]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001d7c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d84:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001d86:	430b      	orrs	r3, r1
 8001d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d92:	d008      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d94:	4a62      	ldr	r2, [pc, #392]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001d96:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d9a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d9e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001da0:	430b      	orrs	r3, r1
 8001da2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001dac:	d008      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001dae:	4a5c      	ldr	r2, [pc, #368]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001db0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001db4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001db8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001dc6:	d00f      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x320>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dc8:	4a55      	ldr	r2, [pc, #340]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001dca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001dce:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001dd2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001dda:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001ddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001de0:	d065      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x3e6>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001de2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001de6:	d067      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001dee:	d00f      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001df0:	4a4b      	ldr	r2, [pc, #300]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001df2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001df6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001dfa:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001e02:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e08:	d05e      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x400>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001e0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e0e:	d060      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001e16:	d00f      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x370>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e18:	4a41      	ldr	r2, [pc, #260]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001e1a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e1e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001e22:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001e24:	430b      	orrs	r3, r1
 8001e26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e2a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001e2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e30:	d057      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001e32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e36:	d059      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x424>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001e3e:	d00f      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x398>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e40:	4a37      	ldr	r2, [pc, #220]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001e42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e46:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001e4a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e52:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001e54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e58:	d050      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x434>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e5e:	d055      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x444>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001e66:	d008      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001e68:	4a2d      	ldr	r2, [pc, #180]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001e6a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e72:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001e74:	430b      	orrs	r3, r1
 8001e76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001e80:	d009      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001e84:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e8c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001e90:	430b      	orrs	r3, r1
 8001e92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001e96:	4638      	mov	r0, r7
 8001e98:	b002      	add	sp, #8
 8001e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8001e9e:	4637      	mov	r7, r6
 8001ea0:	e6fb      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ea4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8001eac:	e6f9      	b.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001eae:	68d3      	ldr	r3, [r2, #12]
 8001eb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eb4:	60d3      	str	r3, [r2, #12]
 8001eb6:	e797      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x320>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001eb8:	2101      	movs	r1, #1
 8001eba:	1d20      	adds	r0, r4, #4
 8001ebc:	f7ff fca6 	bl	800180c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	d091      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x320>
          status = ret;
 8001ec4:	4607      	mov	r7, r0
 8001ec6:	e78f      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x320>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ec8:	68d3      	ldr	r3, [r2, #12]
 8001eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ece:	60d3      	str	r3, [r2, #12]
 8001ed0:	e79e      	b.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x348>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	1d20      	adds	r0, r4, #4
 8001ed6:	f7ff fc99 	bl	800180c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001eda:	2800      	cmp	r0, #0
 8001edc:	d098      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x348>
        status = ret;
 8001ede:	4607      	mov	r7, r0
 8001ee0:	e796      	b.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x348>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ee2:	68d3      	ldr	r3, [r2, #12]
 8001ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ee8:	60d3      	str	r3, [r2, #12]
 8001eea:	e7a5      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x370>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001eec:	2101      	movs	r1, #1
 8001eee:	1d20      	adds	r0, r4, #4
 8001ef0:	f7ff fc8c 	bl	800180c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001ef4:	2800      	cmp	r0, #0
 8001ef6:	d09f      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x370>
        status = ret;
 8001ef8:	4607      	mov	r7, r0
 8001efa:	e79d      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x370>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001efc:	2102      	movs	r1, #2
 8001efe:	1d20      	adds	r0, r4, #4
 8001f00:	f7ff fc84 	bl	800180c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001f04:	2800      	cmp	r0, #0
 8001f06:	d0ab      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x398>
        status = ret;
 8001f08:	4607      	mov	r7, r0
 8001f0a:	e7a9      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x398>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	f104 0020 	add.w	r0, r4, #32
 8001f12:	f7ff fd33 	bl	800197c <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8001f16:	2800      	cmp	r0, #0
 8001f18:	d0a2      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x398>
        status = ret;
 8001f1a:	4607      	mov	r7, r0
 8001f1c:	e7a0      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000

08001f24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	4605      	mov	r5, r0
 8001f2c:	4688      	mov	r8, r1
 8001f2e:	4617      	mov	r7, r2
 8001f30:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f32:	f7fe fe37 	bl	8000ba4 <HAL_GetTick>
 8001f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f38:	1a1b      	subs	r3, r3, r0
 8001f3a:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8001f3e:	f7fe fe31 	bl	8000ba4 <HAL_GetTick>
 8001f42:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f44:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8001f4c:	fb09 f303 	mul.w	r3, r9, r3
 8001f50:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f52:	682b      	ldr	r3, [r5, #0]
 8001f54:	689c      	ldr	r4, [r3, #8]
 8001f56:	ea38 0304 	bics.w	r3, r8, r4
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2401      	moveq	r4, #1
 8001f5e:	2400      	movne	r4, #0
 8001f60:	42bc      	cmp	r4, r7
 8001f62:	d040      	beq.n	8001fe6 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f64:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001f68:	d0f3      	beq.n	8001f52 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f6a:	f7fe fe1b 	bl	8000ba4 <HAL_GetTick>
 8001f6e:	eba0 000a 	sub.w	r0, r0, sl
 8001f72:	4548      	cmp	r0, r9
 8001f74:	d20a      	bcs.n	8001f8c <SPI_WaitFlagStateUntilTimeout+0x68>
 8001f76:	f1b9 0f00 	cmp.w	r9, #0
 8001f7a:	d007      	beq.n	8001f8c <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f7c:	9a01      	ldr	r2, [sp, #4]
 8001f7e:	b102      	cbz	r2, 8001f82 <SPI_WaitFlagStateUntilTimeout+0x5e>
 8001f80:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8001f82:	9b01      	ldr	r3, [sp, #4]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	4691      	mov	r9, r2
 8001f8a:	e7e2      	b.n	8001f52 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f8c:	682a      	ldr	r2, [r5, #0]
 8001f8e:	6853      	ldr	r3, [r2, #4]
 8001f90:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001f94:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f96:	686b      	ldr	r3, [r5, #4]
 8001f98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f9c:	d00b      	beq.n	8001fb6 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fa4:	d014      	beq.n	8001fd0 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8001fac:	2300      	movs	r3, #0
 8001fae:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8001fb2:	2003      	movs	r0, #3
 8001fb4:	e018      	b.n	8001fe8 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fb6:	68ab      	ldr	r3, [r5, #8]
 8001fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fbc:	d002      	beq.n	8001fc4 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc2:	d1ec      	bne.n	8001f9e <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8001fc4:	682a      	ldr	r2, [r5, #0]
 8001fc6:	6813      	ldr	r3, [r2, #0]
 8001fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e7e6      	b.n	8001f9e <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8001fd0:	682a      	ldr	r2, [r5, #0]
 8001fd2:	6813      	ldr	r3, [r2, #0]
 8001fd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	682a      	ldr	r2, [r5, #0]
 8001fdc:	6813      	ldr	r3, [r2, #0]
 8001fde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	e7df      	b.n	8001fa6 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8001fe6:	2000      	movs	r0, #0
}
 8001fe8:	b002      	add	sp, #8
 8001fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000018 	.word	0x20000018

08001ff4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	4607      	mov	r7, r0
 8001ffc:	460d      	mov	r5, r1
 8001ffe:	4616      	mov	r6, r2
 8002000:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002008:	f7fe fdcc 	bl	8000ba4 <HAL_GetTick>
 800200c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800200e:	1a1b      	subs	r3, r3, r0
 8002010:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 8002014:	f7fe fdc6 	bl	8000ba4 <HAL_GetTick>
 8002018:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800201a:	f8d7 b000 	ldr.w	fp, [r7]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800201e:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002026:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800202a:	0d1b      	lsrs	r3, r3, #20
 800202c:	fb09 f303 	mul.w	r3, r9, r3
 8002030:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8002032:	e002      	b.n	800203a <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8002034:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002038:	d111      	bne.n	800205e <SPI_WaitFifoStateUntilTimeout+0x6a>
  while ((hspi->Instance->SR & Fifo) != State)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689c      	ldr	r4, [r3, #8]
 800203e:	402c      	ands	r4, r5
 8002040:	42b4      	cmp	r4, r6
 8002042:	d04a      	beq.n	80020da <SPI_WaitFifoStateUntilTimeout+0xe6>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002044:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8002048:	d1f4      	bne.n	8002034 <SPI_WaitFifoStateUntilTimeout+0x40>
 800204a:	2e00      	cmp	r6, #0
 800204c:	d1f2      	bne.n	8002034 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 800204e:	f89b 300c 	ldrb.w	r3, [fp, #12]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8002058:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800205c:	e7ea      	b.n	8002034 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800205e:	f7fe fda1 	bl	8000ba4 <HAL_GetTick>
 8002062:	eba0 000a 	sub.w	r0, r0, sl
 8002066:	4548      	cmp	r0, r9
 8002068:	d20a      	bcs.n	8002080 <SPI_WaitFifoStateUntilTimeout+0x8c>
 800206a:	f1b9 0f00 	cmp.w	r9, #0
 800206e:	d007      	beq.n	8002080 <SPI_WaitFifoStateUntilTimeout+0x8c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002070:	9a01      	ldr	r2, [sp, #4]
 8002072:	b102      	cbz	r2, 8002076 <SPI_WaitFifoStateUntilTimeout+0x82>
 8002074:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8002076:	9b01      	ldr	r3, [sp, #4]
 8002078:	3b01      	subs	r3, #1
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	4691      	mov	r9, r2
 800207e:	e7dc      	b.n	800203a <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	6853      	ldr	r3, [r2, #4]
 8002084:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002088:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002090:	d00b      	beq.n	80020aa <SPI_WaitFifoStateUntilTimeout+0xb6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002098:	d014      	beq.n	80020c4 <SPI_WaitFifoStateUntilTimeout+0xd0>
        hspi->State = HAL_SPI_STATE_READY;
 800209a:	2301      	movs	r3, #1
 800209c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80020a0:	2300      	movs	r3, #0
 80020a2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 80020a6:	2003      	movs	r0, #3
 80020a8:	e018      	b.n	80020dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b0:	d002      	beq.n	80020b8 <SPI_WaitFifoStateUntilTimeout+0xc4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b6:	d1ec      	bne.n	8002092 <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	6813      	ldr	r3, [r2, #0]
 80020bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e7e6      	b.n	8002092 <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	6813      	ldr	r3, [r2, #0]
 80020c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	6813      	ldr	r3, [r2, #0]
 80020d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	e7df      	b.n	800209a <SPI_WaitFifoStateUntilTimeout+0xa6>
    }
  }

  return HAL_OK;
 80020da:	2000      	movs	r0, #0
}
 80020dc:	b003      	add	sp, #12
 80020de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020e2:	bf00      	nop
 80020e4:	20000018 	.word	0x20000018

080020e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020e8:	b570      	push	{r4, r5, r6, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	4604      	mov	r4, r0
 80020ee:	460d      	mov	r5, r1
 80020f0:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020f2:	9200      	str	r2, [sp, #0]
 80020f4:	460b      	mov	r3, r1
 80020f6:	2200      	movs	r2, #0
 80020f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80020fc:	f7ff ff7a 	bl	8001ff4 <SPI_WaitFifoStateUntilTimeout>
 8002100:	b9b0      	cbnz	r0, 8002130 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002102:	9600      	str	r6, [sp, #0]
 8002104:	462b      	mov	r3, r5
 8002106:	2200      	movs	r2, #0
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	4620      	mov	r0, r4
 800210c:	f7ff ff0a 	bl	8001f24 <SPI_WaitFlagStateUntilTimeout>
 8002110:	b9a8      	cbnz	r0, 800213e <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002112:	9600      	str	r6, [sp, #0]
 8002114:	462b      	mov	r3, r5
 8002116:	2200      	movs	r2, #0
 8002118:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800211c:	4620      	mov	r0, r4
 800211e:	f7ff ff69 	bl	8001ff4 <SPI_WaitFifoStateUntilTimeout>
 8002122:	b150      	cbz	r0, 800213a <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002124:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002126:	f043 0320 	orr.w	r3, r3, #32
 800212a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800212c:	2003      	movs	r0, #3
 800212e:	e004      	b.n	800213a <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002130:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002132:	f043 0320 	orr.w	r3, r3, #32
 8002136:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002138:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800213a:	b002      	add	sp, #8
 800213c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800213e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002140:	f043 0320 	orr.w	r3, r3, #32
 8002144:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002146:	2003      	movs	r0, #3
 8002148:	e7f7      	b.n	800213a <SPI_EndRxTxTransaction+0x52>

0800214a <HAL_SPI_Init>:
  if (hspi == NULL)
 800214a:	2800      	cmp	r0, #0
 800214c:	d06a      	beq.n	8002224 <HAL_SPI_Init+0xda>
{
 800214e:	b510      	push	{r4, lr}
 8002150:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002152:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002154:	b933      	cbnz	r3, 8002164 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002156:	6843      	ldr	r3, [r0, #4]
 8002158:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800215c:	d005      	beq.n	800216a <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800215e:	2300      	movs	r3, #0
 8002160:	61c3      	str	r3, [r0, #28]
 8002162:	e002      	b.n	800216a <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002164:	2300      	movs	r3, #0
 8002166:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002168:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800216e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002172:	2b00      	cmp	r3, #0
 8002174:	d04d      	beq.n	8002212 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002176:	2302      	movs	r3, #2
 8002178:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800217c:	6822      	ldr	r2, [r4, #0]
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002184:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002186:	68e3      	ldr	r3, [r4, #12]
 8002188:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800218c:	d947      	bls.n	800221e <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800218e:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002190:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002194:	d004      	beq.n	80021a0 <HAL_SPI_Init+0x56>
 8002196:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800219a:	d001      	beq.n	80021a0 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021a0:	6863      	ldr	r3, [r4, #4]
 80021a2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80021a6:	68a1      	ldr	r1, [r4, #8]
 80021a8:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 80021ac:	430b      	orrs	r3, r1
 80021ae:	6921      	ldr	r1, [r4, #16]
 80021b0:	f001 0102 	and.w	r1, r1, #2
 80021b4:	430b      	orrs	r3, r1
 80021b6:	6961      	ldr	r1, [r4, #20]
 80021b8:	f001 0101 	and.w	r1, r1, #1
 80021bc:	430b      	orrs	r3, r1
 80021be:	69a1      	ldr	r1, [r4, #24]
 80021c0:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80021c4:	430b      	orrs	r3, r1
 80021c6:	69e1      	ldr	r1, [r4, #28]
 80021c8:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80021cc:	430b      	orrs	r3, r1
 80021ce:	6a21      	ldr	r1, [r4, #32]
 80021d0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80021d8:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80021dc:	6820      	ldr	r0, [r4, #0]
 80021de:	430b      	orrs	r3, r1
 80021e0:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80021e2:	8b63      	ldrh	r3, [r4, #26]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80021ea:	f001 0110 	and.w	r1, r1, #16
 80021ee:	430b      	orrs	r3, r1
 80021f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021f2:	f001 0108 	and.w	r1, r1, #8
 80021f6:	430b      	orrs	r3, r1
 80021f8:	68e1      	ldr	r1, [r4, #12]
 80021fa:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80021fe:	430b      	orrs	r3, r1
 8002200:	6821      	ldr	r1, [r4, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002206:	2000      	movs	r0, #0
 8002208:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800220a:	2301      	movs	r3, #1
 800220c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8002210:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002212:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002216:	4620      	mov	r0, r4
 8002218:	f000 ff8e 	bl	8003138 <HAL_SPI_MspInit>
 800221c:	e7ab      	b.n	8002176 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800221e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002222:	e7b5      	b.n	8002190 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8002224:	2001      	movs	r0, #1
}
 8002226:	4770      	bx	lr

08002228 <HAL_SPI_Transmit>:
{
 8002228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800222c:	b083      	sub	sp, #12
 800222e:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8002230:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8002234:	2b01      	cmp	r3, #1
 8002236:	f000 80f1 	beq.w	800241c <HAL_SPI_Transmit+0x1f4>
 800223a:	4604      	mov	r4, r0
 800223c:	4688      	mov	r8, r1
 800223e:	4691      	mov	r9, r2
 8002240:	2301      	movs	r3, #1
 8002242:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002246:	f7fe fcad 	bl	8000ba4 <HAL_GetTick>
 800224a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800224c:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8002250:	b2f6      	uxtb	r6, r6
 8002252:	2e01      	cmp	r6, #1
 8002254:	f040 80cf 	bne.w	80023f6 <HAL_SPI_Transmit+0x1ce>
  if ((pData == NULL) || (Size == 0U))
 8002258:	f1b8 0f00 	cmp.w	r8, #0
 800225c:	f000 80cc 	beq.w	80023f8 <HAL_SPI_Transmit+0x1d0>
 8002260:	f1b9 0f00 	cmp.w	r9, #0
 8002264:	f000 80c8 	beq.w	80023f8 <HAL_SPI_Transmit+0x1d0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002268:	2303      	movs	r3, #3
 800226a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800226e:	2300      	movs	r3, #0
 8002270:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002272:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002276:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800227a:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800227e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002280:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002284:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002288:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800228a:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800228c:	68a3      	ldr	r3, [r4, #8]
 800228e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002292:	d01e      	beq.n	80022d2 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	f012 0f40 	tst.w	r2, #64	; 0x40
 800229c:	d103      	bne.n	80022a6 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022a4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022a6:	68e3      	ldr	r3, [r4, #12]
 80022a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022ac:	d93d      	bls.n	800232a <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ae:	6863      	ldr	r3, [r4, #4]
 80022b0:	b113      	cbz	r3, 80022b8 <HAL_SPI_Transmit+0x90>
 80022b2:	f1b9 0f01 	cmp.w	r9, #1
 80022b6:	d123      	bne.n	8002300 <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	8812      	ldrh	r2, [r2, #0]
 80022be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022c2:	3302      	adds	r3, #2
 80022c4:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80022c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80022d0:	e016      	b.n	8002300 <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 80022d2:	6822      	ldr	r2, [r4, #0]
 80022d4:	6813      	ldr	r3, [r2, #0]
 80022d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022da:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80022dc:	6822      	ldr	r2, [r4, #0]
 80022de:	6813      	ldr	r3, [r2, #0]
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e7d5      	b.n	8002294 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022e8:	f7fe fc5c 	bl	8000ba4 <HAL_GetTick>
 80022ec:	1bc0      	subs	r0, r0, r7
 80022ee:	42a8      	cmp	r0, r5
 80022f0:	d303      	bcc.n	80022fa <HAL_SPI_Transmit+0xd2>
 80022f2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80022f6:	f040 8089 	bne.w	800240c <HAL_SPI_Transmit+0x1e4>
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	f000 8088 	beq.w	8002410 <HAL_SPI_Transmit+0x1e8>
    while (hspi->TxXferCount > 0U)
 8002300:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002302:	b29b      	uxth	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d061      	beq.n	80023cc <HAL_SPI_Transmit+0x1a4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	f012 0f02 	tst.w	r2, #2
 8002310:	d0ea      	beq.n	80022e8 <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002312:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002314:	8812      	ldrh	r2, [r2, #0]
 8002316:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002318:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800231a:	3302      	adds	r3, #2
 800231c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800231e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002320:	b292      	uxth	r2, r2
 8002322:	3a01      	subs	r2, #1
 8002324:	b292      	uxth	r2, r2
 8002326:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8002328:	e7ea      	b.n	8002300 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800232a:	6863      	ldr	r3, [r4, #4]
 800232c:	b113      	cbz	r3, 8002334 <HAL_SPI_Transmit+0x10c>
 800232e:	f1b9 0f01 	cmp.w	r9, #1
 8002332:	d133      	bne.n	800239c <HAL_SPI_Transmit+0x174>
      if (hspi->TxXferCount > 1U)
 8002334:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d90c      	bls.n	8002356 <HAL_SPI_Transmit+0x12e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800233c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	8812      	ldrh	r2, [r2, #0]
 8002342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002344:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002346:	3302      	adds	r3, #2
 8002348:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800234a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b02      	subs	r3, #2
 8002350:	b29b      	uxth	r3, r3
 8002352:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002354:	e022      	b.n	800239c <HAL_SPI_Transmit+0x174>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002356:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	7812      	ldrb	r2, [r2, #0]
 800235c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 800235e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002360:	3301      	adds	r3, #1
 8002362:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002364:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29b      	uxth	r3, r3
 800236c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800236e:	e015      	b.n	800239c <HAL_SPI_Transmit+0x174>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002370:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8002376:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002378:	3301      	adds	r3, #1
 800237a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800237c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29b      	uxth	r3, r3
 8002384:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002386:	e009      	b.n	800239c <HAL_SPI_Transmit+0x174>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002388:	f7fe fc0c 	bl	8000ba4 <HAL_GetTick>
 800238c:	1bc0      	subs	r0, r0, r7
 800238e:	42a8      	cmp	r0, r5
 8002390:	d302      	bcc.n	8002398 <HAL_SPI_Transmit+0x170>
 8002392:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002396:	d13d      	bne.n	8002414 <HAL_SPI_Transmit+0x1ec>
 8002398:	2d00      	cmp	r5, #0
 800239a:	d03d      	beq.n	8002418 <HAL_SPI_Transmit+0x1f0>
    while (hspi->TxXferCount > 0U)
 800239c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800239e:	b29b      	uxth	r3, r3
 80023a0:	b1a3      	cbz	r3, 80023cc <HAL_SPI_Transmit+0x1a4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023a2:	6822      	ldr	r2, [r4, #0]
 80023a4:	6893      	ldr	r3, [r2, #8]
 80023a6:	f013 0f02 	tst.w	r3, #2
 80023aa:	d0ed      	beq.n	8002388 <HAL_SPI_Transmit+0x160>
        if (hspi->TxXferCount > 1U)
 80023ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d9dd      	bls.n	8002370 <HAL_SPI_Transmit+0x148>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023bc:	3302      	adds	r3, #2
 80023be:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80023c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b02      	subs	r3, #2
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80023ca:	e7e7      	b.n	800239c <HAL_SPI_Transmit+0x174>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023cc:	463a      	mov	r2, r7
 80023ce:	4629      	mov	r1, r5
 80023d0:	4620      	mov	r0, r4
 80023d2:	f7ff fe89 	bl	80020e8 <SPI_EndRxTxTransaction>
 80023d6:	b108      	cbz	r0, 80023dc <HAL_SPI_Transmit+0x1b4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023d8:	2320      	movs	r3, #32
 80023da:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023dc:	68a3      	ldr	r3, [r4, #8]
 80023de:	b933      	cbnz	r3, 80023ee <HAL_SPI_Transmit+0x1c6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	9201      	str	r2, [sp, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80023f0:	b913      	cbnz	r3, 80023f8 <HAL_SPI_Transmit+0x1d0>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023f2:	2600      	movs	r6, #0
 80023f4:	e000      	b.n	80023f8 <HAL_SPI_Transmit+0x1d0>
    errorcode = HAL_BUSY;
 80023f6:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80023f8:	2301      	movs	r3, #1
 80023fa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80023fe:	2300      	movs	r3, #0
 8002400:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002404:	4630      	mov	r0, r6
 8002406:	b003      	add	sp, #12
 8002408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 800240c:	2603      	movs	r6, #3
 800240e:	e7f3      	b.n	80023f8 <HAL_SPI_Transmit+0x1d0>
 8002410:	2603      	movs	r6, #3
 8002412:	e7f1      	b.n	80023f8 <HAL_SPI_Transmit+0x1d0>
          errorcode = HAL_TIMEOUT;
 8002414:	2603      	movs	r6, #3
 8002416:	e7ef      	b.n	80023f8 <HAL_SPI_Transmit+0x1d0>
 8002418:	2603      	movs	r6, #3
 800241a:	e7ed      	b.n	80023f8 <HAL_SPI_Transmit+0x1d0>
  __HAL_LOCK(hspi);
 800241c:	2602      	movs	r6, #2
 800241e:	e7f1      	b.n	8002404 <HAL_SPI_Transmit+0x1dc>

08002420 <HAL_SPI_TransmitReceive>:
{
 8002420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002424:	461f      	mov	r7, r3
 8002426:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8002428:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800242c:	2b01      	cmp	r3, #1
 800242e:	f000 8164 	beq.w	80026fa <HAL_SPI_TransmitReceive+0x2da>
 8002432:	4604      	mov	r4, r0
 8002434:	4688      	mov	r8, r1
 8002436:	4691      	mov	r9, r2
 8002438:	2301      	movs	r3, #1
 800243a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800243e:	f7fe fbb1 	bl	8000ba4 <HAL_GetTick>
 8002442:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8002444:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002448:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800244a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800244c:	2b01      	cmp	r3, #1
 800244e:	d00a      	beq.n	8002466 <HAL_SPI_TransmitReceive+0x46>
 8002450:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002454:	f040 8138 	bne.w	80026c8 <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002458:	68a2      	ldr	r2, [r4, #8]
 800245a:	2a00      	cmp	r2, #0
 800245c:	f040 813d 	bne.w	80026da <HAL_SPI_TransmitReceive+0x2ba>
 8002460:	2b04      	cmp	r3, #4
 8002462:	f040 813c 	bne.w	80026de <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002466:	f1b8 0f00 	cmp.w	r8, #0
 800246a:	f000 813a 	beq.w	80026e2 <HAL_SPI_TransmitReceive+0x2c2>
 800246e:	f1b9 0f00 	cmp.w	r9, #0
 8002472:	f000 8138 	beq.w	80026e6 <HAL_SPI_TransmitReceive+0x2c6>
 8002476:	2f00      	cmp	r7, #0
 8002478:	f000 8137 	beq.w	80026ea <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800247c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b04      	cmp	r3, #4
 8002484:	d002      	beq.n	800248c <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002486:	2305      	movs	r3, #5
 8002488:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800248c:	2300      	movs	r3, #0
 800248e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002490:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002494:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002498:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800249c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80024a0:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80024a2:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80024a4:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80024a6:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80024a8:	68e3      	ldr	r3, [r4, #12]
 80024aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024ae:	d801      	bhi.n	80024b4 <HAL_SPI_TransmitReceive+0x94>
 80024b0:	2f01      	cmp	r7, #1
 80024b2:	d923      	bls.n	80024fc <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024b4:	6822      	ldr	r2, [r4, #0]
 80024b6:	6853      	ldr	r3, [r2, #4]
 80024b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024bc:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80024c6:	d103      	bne.n	80024d0 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ce:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024d0:	68e3      	ldr	r3, [r4, #12]
 80024d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024d6:	d958      	bls.n	800258a <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d8:	6863      	ldr	r3, [r4, #4]
 80024da:	b10b      	cbz	r3, 80024e0 <HAL_SPI_TransmitReceive+0xc0>
 80024dc:	2f01      	cmp	r7, #1
 80024de:	d10b      	bne.n	80024f8 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	8812      	ldrh	r2, [r2, #0]
 80024e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024ea:	3302      	adds	r3, #2
 80024ec:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80024ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80024f8:	2701      	movs	r7, #1
 80024fa:	e025      	b.n	8002548 <HAL_SPI_TransmitReceive+0x128>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024fc:	6822      	ldr	r2, [r4, #0]
 80024fe:	6853      	ldr	r3, [r2, #4]
 8002500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002504:	6053      	str	r3, [r2, #4]
 8002506:	e7da      	b.n	80024be <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	f012 0f01 	tst.w	r2, #1
 8002510:	d011      	beq.n	8002536 <HAL_SPI_TransmitReceive+0x116>
 8002512:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002516:	b292      	uxth	r2, r2
 8002518:	b16a      	cbz	r2, 8002536 <HAL_SPI_TransmitReceive+0x116>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800251e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002522:	3302      	adds	r3, #2
 8002524:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002526:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29b      	uxth	r3, r3
 8002530:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002534:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002536:	f7fe fb35 	bl	8000ba4 <HAL_GetTick>
 800253a:	1b83      	subs	r3, r0, r6
 800253c:	42ab      	cmp	r3, r5
 800253e:	d303      	bcc.n	8002548 <HAL_SPI_TransmitReceive+0x128>
 8002540:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002544:	f040 80d3 	bne.w	80026ee <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002548:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800254a:	b29b      	uxth	r3, r3
 800254c:	b92b      	cbnz	r3, 800255a <HAL_SPI_TransmitReceive+0x13a>
 800254e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80ad 	beq.w	80026b4 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	f012 0f02 	tst.w	r2, #2
 8002562:	d0d1      	beq.n	8002508 <HAL_SPI_TransmitReceive+0xe8>
 8002564:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002566:	b292      	uxth	r2, r2
 8002568:	2a00      	cmp	r2, #0
 800256a:	d0cd      	beq.n	8002508 <HAL_SPI_TransmitReceive+0xe8>
 800256c:	2f00      	cmp	r7, #0
 800256e:	d0cb      	beq.n	8002508 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002570:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002572:	8812      	ldrh	r2, [r2, #0]
 8002574:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002576:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002578:	3302      	adds	r3, #2
 800257a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800257c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29b      	uxth	r3, r3
 8002584:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002586:	2700      	movs	r7, #0
 8002588:	e7be      	b.n	8002508 <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800258a:	6863      	ldr	r3, [r4, #4]
 800258c:	b10b      	cbz	r3, 8002592 <HAL_SPI_TransmitReceive+0x172>
 800258e:	2f01      	cmp	r7, #1
 8002590:	d10f      	bne.n	80025b2 <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 8002592:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d90d      	bls.n	80025b6 <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800259a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	8812      	ldrh	r2, [r2, #0]
 80025a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025a4:	3302      	adds	r3, #2
 80025a6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80025a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b02      	subs	r3, #2
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80025b2:	2701      	movs	r7, #1
 80025b4:	e049      	b.n	800264a <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	7812      	ldrb	r2, [r2, #0]
 80025bc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80025be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025c0:	3301      	adds	r3, #1
 80025c2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80025c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80025ce:	e7f0      	b.n	80025b2 <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 80025d0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80025d2:	b292      	uxth	r2, r2
 80025d4:	2a01      	cmp	r2, #1
 80025d6:	d90c      	bls.n	80025f2 <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80025da:	8812      	ldrh	r2, [r2, #0]
 80025dc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80025de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025e0:	3302      	adds	r3, #2
 80025e2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80025e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b02      	subs	r3, #2
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80025ee:	2700      	movs	r7, #0
 80025f0:	e03d      	b.n	800266e <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80025f4:	7812      	ldrb	r2, [r2, #0]
 80025f6:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80025f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025fa:	3301      	adds	r3, #1
 80025fc:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80025fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b29b      	uxth	r3, r3
 8002606:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002608:	2700      	movs	r7, #0
 800260a:	e030      	b.n	800266e <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800260c:	6822      	ldr	r2, [r4, #0]
 800260e:	6853      	ldr	r3, [r2, #4]
 8002610:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002614:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8002616:	2701      	movs	r7, #1
 8002618:	e00d      	b.n	8002636 <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800261a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800261c:	7b1b      	ldrb	r3, [r3, #12]
 800261e:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8002620:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002622:	3301      	adds	r3, #1
 8002624:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002626:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29b      	uxth	r3, r3
 8002630:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002634:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002636:	f7fe fab5 	bl	8000ba4 <HAL_GetTick>
 800263a:	1b80      	subs	r0, r0, r6
 800263c:	42a8      	cmp	r0, r5
 800263e:	d302      	bcc.n	8002646 <HAL_SPI_TransmitReceive+0x226>
 8002640:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002644:	d155      	bne.n	80026f2 <HAL_SPI_TransmitReceive+0x2d2>
 8002646:	2d00      	cmp	r5, #0
 8002648:	d055      	beq.n	80026f6 <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800264a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800264c:	b29b      	uxth	r3, r3
 800264e:	b923      	cbnz	r3, 800265a <HAL_SPI_TransmitReceive+0x23a>
 8002650:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d02c      	beq.n	80026b4 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	f012 0f02 	tst.w	r2, #2
 8002662:	d004      	beq.n	800266e <HAL_SPI_TransmitReceive+0x24e>
 8002664:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002666:	b292      	uxth	r2, r2
 8002668:	b10a      	cbz	r2, 800266e <HAL_SPI_TransmitReceive+0x24e>
 800266a:	2f00      	cmp	r7, #0
 800266c:	d1b0      	bne.n	80025d0 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	f012 0f01 	tst.w	r2, #1
 8002676:	d0de      	beq.n	8002636 <HAL_SPI_TransmitReceive+0x216>
 8002678:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800267c:	b292      	uxth	r2, r2
 800267e:	2a00      	cmp	r2, #0
 8002680:	d0d9      	beq.n	8002636 <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 8002682:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002686:	b292      	uxth	r2, r2
 8002688:	2a01      	cmp	r2, #1
 800268a:	d9c6      	bls.n	800261a <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002690:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002694:	3302      	adds	r3, #2
 8002696:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002698:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b02      	subs	r3, #2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80026a6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d9ad      	bls.n	800260c <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 80026b0:	2701      	movs	r7, #1
 80026b2:	e7c0      	b.n	8002636 <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026b4:	4632      	mov	r2, r6
 80026b6:	4629      	mov	r1, r5
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7ff fd15 	bl	80020e8 <SPI_EndRxTxTransaction>
 80026be:	b120      	cbz	r0, 80026ca <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026c0:	2320      	movs	r3, #32
 80026c2:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80026c4:	2001      	movs	r0, #1
 80026c6:	e000      	b.n	80026ca <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 80026c8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80026d0:	2300      	movs	r3, #0
 80026d2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80026d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80026da:	2002      	movs	r0, #2
 80026dc:	e7f5      	b.n	80026ca <HAL_SPI_TransmitReceive+0x2aa>
 80026de:	2002      	movs	r0, #2
 80026e0:	e7f3      	b.n	80026ca <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 80026e2:	2001      	movs	r0, #1
 80026e4:	e7f1      	b.n	80026ca <HAL_SPI_TransmitReceive+0x2aa>
 80026e6:	2001      	movs	r0, #1
 80026e8:	e7ef      	b.n	80026ca <HAL_SPI_TransmitReceive+0x2aa>
 80026ea:	2001      	movs	r0, #1
 80026ec:	e7ed      	b.n	80026ca <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 80026ee:	2003      	movs	r0, #3
 80026f0:	e7eb      	b.n	80026ca <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 80026f2:	2003      	movs	r0, #3
 80026f4:	e7e9      	b.n	80026ca <HAL_SPI_TransmitReceive+0x2aa>
 80026f6:	2003      	movs	r0, #3
 80026f8:	e7e7      	b.n	80026ca <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 80026fa:	2002      	movs	r0, #2
 80026fc:	e7eb      	b.n	80026d6 <HAL_SPI_TransmitReceive+0x2b6>

080026fe <HAL_SPIEx_FlushRxFifo>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 80026fe:	2300      	movs	r3, #0
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8002700:	6802      	ldr	r2, [r0, #0]
 8002702:	6891      	ldr	r1, [r2, #8]
 8002704:	f411 6fc0 	tst.w	r1, #1536	; 0x600
 8002708:	d012      	beq.n	8002730 <HAL_SPIEx_FlushRxFifo+0x32>
{
 800270a:	b082      	sub	sp, #8
 800270c:	e004      	b.n	8002718 <HAL_SPIEx_FlushRxFifo+0x1a>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800270e:	6802      	ldr	r2, [r0, #0]
 8002710:	6891      	ldr	r1, [r2, #8]
 8002712:	f411 6fc0 	tst.w	r1, #1536	; 0x600
 8002716:	d009      	beq.n	800272c <HAL_SPIEx_FlushRxFifo+0x2e>
  {
    count++;
 8002718:	3301      	adds	r3, #1
 800271a:	b2db      	uxtb	r3, r3
    tmpreg = hspi->Instance->DR;
 800271c:	68d2      	ldr	r2, [r2, #12]
 800271e:	9201      	str	r2, [sp, #4]
    UNUSED(tmpreg); /* To avoid GCC warning */
 8002720:	9a01      	ldr	r2, [sp, #4]
    if (count == SPI_FIFO_SIZE)
 8002722:	2b04      	cmp	r3, #4
 8002724:	d1f3      	bne.n	800270e <HAL_SPIEx_FlushRxFifo+0x10>
    {
      return HAL_TIMEOUT;
 8002726:	2003      	movs	r0, #3
    }
  }
  return HAL_OK;
}
 8002728:	b002      	add	sp, #8
 800272a:	4770      	bx	lr
  return HAL_OK;
 800272c:	2000      	movs	r0, #0
 800272e:	e7fb      	b.n	8002728 <HAL_SPIEx_FlushRxFifo+0x2a>
 8002730:	2000      	movs	r0, #0
}
 8002732:	4770      	bx	lr

08002734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002734:	b5d0      	push	{r4, r6, r7, lr}
 8002736:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002738:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800273a:	6883      	ldr	r3, [r0, #8]
 800273c:	6902      	ldr	r2, [r0, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	6942      	ldr	r2, [r0, #20]
 8002742:	4313      	orrs	r3, r2
 8002744:	69c2      	ldr	r2, [r0, #28]
 8002746:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002748:	6808      	ldr	r0, [r1, #0]
 800274a:	4a9b      	ldr	r2, [pc, #620]	; (80029b8 <UART_SetConfig+0x284>)
 800274c:	4002      	ands	r2, r0
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002752:	6822      	ldr	r2, [r4, #0]
 8002754:	6853      	ldr	r3, [r2, #4]
 8002756:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800275a:	68e1      	ldr	r1, [r4, #12]
 800275c:	430b      	orrs	r3, r1
 800275e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002760:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002762:	6822      	ldr	r2, [r4, #0]
 8002764:	4b95      	ldr	r3, [pc, #596]	; (80029bc <UART_SetConfig+0x288>)
 8002766:	429a      	cmp	r2, r3
 8002768:	d001      	beq.n	800276e <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800276a:	6a23      	ldr	r3, [r4, #32]
 800276c:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800276e:	6893      	ldr	r3, [r2, #8]
 8002770:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002774:	430b      	orrs	r3, r1
 8002776:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002778:	6822      	ldr	r2, [r4, #0]
 800277a:	4b91      	ldr	r3, [pc, #580]	; (80029c0 <UART_SetConfig+0x28c>)
 800277c:	429a      	cmp	r2, r3
 800277e:	d010      	beq.n	80027a2 <UART_SetConfig+0x6e>
 8002780:	4b90      	ldr	r3, [pc, #576]	; (80029c4 <UART_SetConfig+0x290>)
 8002782:	429a      	cmp	r2, r3
 8002784:	d021      	beq.n	80027ca <UART_SetConfig+0x96>
 8002786:	4b90      	ldr	r3, [pc, #576]	; (80029c8 <UART_SetConfig+0x294>)
 8002788:	429a      	cmp	r2, r3
 800278a:	d037      	beq.n	80027fc <UART_SetConfig+0xc8>
 800278c:	4b8f      	ldr	r3, [pc, #572]	; (80029cc <UART_SetConfig+0x298>)
 800278e:	429a      	cmp	r2, r3
 8002790:	d05c      	beq.n	800284c <UART_SetConfig+0x118>
 8002792:	4b8f      	ldr	r3, [pc, #572]	; (80029d0 <UART_SetConfig+0x29c>)
 8002794:	429a      	cmp	r2, r3
 8002796:	d06b      	beq.n	8002870 <UART_SetConfig+0x13c>
 8002798:	4b88      	ldr	r3, [pc, #544]	; (80029bc <UART_SetConfig+0x288>)
 800279a:	429a      	cmp	r2, r3
 800279c:	d07d      	beq.n	800289a <UART_SetConfig+0x166>
 800279e:	2310      	movs	r3, #16
 80027a0:	e03a      	b.n	8002818 <UART_SetConfig+0xe4>
 80027a2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d809      	bhi.n	80027c6 <UART_SetConfig+0x92>
 80027b2:	e8df f003 	tbb	[pc, r3]
 80027b6:	0402      	.short	0x0402
 80027b8:	0687      	.short	0x0687
 80027ba:	2301      	movs	r3, #1
 80027bc:	e02c      	b.n	8002818 <UART_SetConfig+0xe4>
 80027be:	2304      	movs	r3, #4
 80027c0:	e02a      	b.n	8002818 <UART_SetConfig+0xe4>
 80027c2:	2308      	movs	r3, #8
 80027c4:	e028      	b.n	8002818 <UART_SetConfig+0xe4>
 80027c6:	2310      	movs	r3, #16
 80027c8:	e026      	b.n	8002818 <UART_SetConfig+0xe4>
 80027ca:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d80e      	bhi.n	80027f8 <UART_SetConfig+0xc4>
 80027da:	e8df f003 	tbb	[pc, r3]
 80027de:	0d07      	.short	0x0d07
 80027e0:	0d090d0d 	.word	0x0d090d0d
 80027e4:	0d750d0d 	.word	0x0d750d0d
 80027e8:	0d0d      	.short	0x0d0d
 80027ea:	0b          	.byte	0x0b
 80027eb:	00          	.byte	0x00
 80027ec:	2300      	movs	r3, #0
 80027ee:	e013      	b.n	8002818 <UART_SetConfig+0xe4>
 80027f0:	2304      	movs	r3, #4
 80027f2:	e011      	b.n	8002818 <UART_SetConfig+0xe4>
 80027f4:	2308      	movs	r3, #8
 80027f6:	e00f      	b.n	8002818 <UART_SetConfig+0xe4>
 80027f8:	2310      	movs	r3, #16
 80027fa:	e00d      	b.n	8002818 <UART_SetConfig+0xe4>
 80027fc:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002804:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002808:	2b20      	cmp	r3, #32
 800280a:	d05f      	beq.n	80028cc <UART_SetConfig+0x198>
 800280c:	d81a      	bhi.n	8002844 <UART_SetConfig+0x110>
 800280e:	2b00      	cmp	r3, #0
 8002810:	d05e      	beq.n	80028d0 <UART_SetConfig+0x19c>
 8002812:	2b10      	cmp	r3, #16
 8002814:	d15e      	bne.n	80028d4 <UART_SetConfig+0x1a0>
 8002816:	2304      	movs	r3, #4

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002818:	4968      	ldr	r1, [pc, #416]	; (80029bc <UART_SetConfig+0x288>)
 800281a:	428a      	cmp	r2, r1
 800281c:	d076      	beq.n	800290c <UART_SetConfig+0x1d8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800281e:	69e0      	ldr	r0, [r4, #28]
 8002820:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002824:	f000 80a2 	beq.w	800296c <UART_SetConfig+0x238>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002828:	2b08      	cmp	r3, #8
 800282a:	f200 810e 	bhi.w	8002a4a <UART_SetConfig+0x316>
 800282e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002832:	00dd      	.short	0x00dd
 8002834:	00db00f3 	.word	0x00db00f3
 8002838:	00f6010c 	.word	0x00f6010c
 800283c:	010c010c 	.word	0x010c010c
 8002840:	00f9010c 	.word	0x00f9010c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002844:	2b30      	cmp	r3, #48	; 0x30
 8002846:	d147      	bne.n	80028d8 <UART_SetConfig+0x1a4>
 8002848:	2308      	movs	r3, #8
 800284a:	e7e5      	b.n	8002818 <UART_SetConfig+0xe4>
 800284c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002854:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002858:	2b80      	cmp	r3, #128	; 0x80
 800285a:	d03f      	beq.n	80028dc <UART_SetConfig+0x1a8>
 800285c:	d804      	bhi.n	8002868 <UART_SetConfig+0x134>
 800285e:	b3fb      	cbz	r3, 80028e0 <UART_SetConfig+0x1ac>
 8002860:	2b40      	cmp	r3, #64	; 0x40
 8002862:	d13f      	bne.n	80028e4 <UART_SetConfig+0x1b0>
 8002864:	2304      	movs	r3, #4
 8002866:	e7d7      	b.n	8002818 <UART_SetConfig+0xe4>
 8002868:	2bc0      	cmp	r3, #192	; 0xc0
 800286a:	d13d      	bne.n	80028e8 <UART_SetConfig+0x1b4>
 800286c:	2308      	movs	r3, #8
 800286e:	e7d3      	b.n	8002818 <UART_SetConfig+0xe4>
 8002870:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002880:	d034      	beq.n	80028ec <UART_SetConfig+0x1b8>
 8002882:	d805      	bhi.n	8002890 <UART_SetConfig+0x15c>
 8002884:	b3a3      	cbz	r3, 80028f0 <UART_SetConfig+0x1bc>
 8002886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800288a:	d133      	bne.n	80028f4 <UART_SetConfig+0x1c0>
 800288c:	2304      	movs	r3, #4
 800288e:	e7c3      	b.n	8002818 <UART_SetConfig+0xe4>
 8002890:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002894:	d130      	bne.n	80028f8 <UART_SetConfig+0x1c4>
 8002896:	2308      	movs	r3, #8
 8002898:	e7be      	b.n	8002818 <UART_SetConfig+0xe4>
 800289a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028aa:	d027      	beq.n	80028fc <UART_SetConfig+0x1c8>
 80028ac:	d805      	bhi.n	80028ba <UART_SetConfig+0x186>
 80028ae:	b33b      	cbz	r3, 8002900 <UART_SetConfig+0x1cc>
 80028b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b4:	d126      	bne.n	8002904 <UART_SetConfig+0x1d0>
 80028b6:	2304      	movs	r3, #4
 80028b8:	e7ae      	b.n	8002818 <UART_SetConfig+0xe4>
 80028ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028be:	d123      	bne.n	8002908 <UART_SetConfig+0x1d4>
 80028c0:	2308      	movs	r3, #8
 80028c2:	e7a9      	b.n	8002818 <UART_SetConfig+0xe4>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e7a7      	b.n	8002818 <UART_SetConfig+0xe4>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e7a5      	b.n	8002818 <UART_SetConfig+0xe4>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e7a3      	b.n	8002818 <UART_SetConfig+0xe4>
 80028d0:	2300      	movs	r3, #0
 80028d2:	e7a1      	b.n	8002818 <UART_SetConfig+0xe4>
 80028d4:	2310      	movs	r3, #16
 80028d6:	e79f      	b.n	8002818 <UART_SetConfig+0xe4>
 80028d8:	2310      	movs	r3, #16
 80028da:	e79d      	b.n	8002818 <UART_SetConfig+0xe4>
 80028dc:	2302      	movs	r3, #2
 80028de:	e79b      	b.n	8002818 <UART_SetConfig+0xe4>
 80028e0:	2300      	movs	r3, #0
 80028e2:	e799      	b.n	8002818 <UART_SetConfig+0xe4>
 80028e4:	2310      	movs	r3, #16
 80028e6:	e797      	b.n	8002818 <UART_SetConfig+0xe4>
 80028e8:	2310      	movs	r3, #16
 80028ea:	e795      	b.n	8002818 <UART_SetConfig+0xe4>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e793      	b.n	8002818 <UART_SetConfig+0xe4>
 80028f0:	2300      	movs	r3, #0
 80028f2:	e791      	b.n	8002818 <UART_SetConfig+0xe4>
 80028f4:	2310      	movs	r3, #16
 80028f6:	e78f      	b.n	8002818 <UART_SetConfig+0xe4>
 80028f8:	2310      	movs	r3, #16
 80028fa:	e78d      	b.n	8002818 <UART_SetConfig+0xe4>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e78b      	b.n	8002818 <UART_SetConfig+0xe4>
 8002900:	2300      	movs	r3, #0
 8002902:	e789      	b.n	8002818 <UART_SetConfig+0xe4>
 8002904:	2310      	movs	r3, #16
 8002906:	e787      	b.n	8002818 <UART_SetConfig+0xe4>
 8002908:	2310      	movs	r3, #16
 800290a:	e785      	b.n	8002818 <UART_SetConfig+0xe4>
    switch (clocksource)
 800290c:	2b08      	cmp	r3, #8
 800290e:	f200 808c 	bhi.w	8002a2a <UART_SetConfig+0x2f6>
 8002912:	e8df f003 	tbb	[pc, r3]
 8002916:	8a08      	.short	0x8a08
 8002918:	8a268a29 	.word	0x8a268a29
 800291c:	8a8a      	.short	0x8a8a
 800291e:	05          	.byte	0x05
 800291f:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 8002920:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002924:	e003      	b.n	800292e <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002926:	f7fe ff4d 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800292a:	2800      	cmp	r0, #0
 800292c:	d07f      	beq.n	8002a2e <UART_SetConfig+0x2fa>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800292e:	6862      	ldr	r2, [r4, #4]
 8002930:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002934:	4283      	cmp	r3, r0
 8002936:	d87c      	bhi.n	8002a32 <UART_SetConfig+0x2fe>
 8002938:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800293c:	d87b      	bhi.n	8002a36 <UART_SetConfig+0x302>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800293e:	2300      	movs	r3, #0
 8002940:	0e07      	lsrs	r7, r0, #24
 8002942:	0206      	lsls	r6, r0, #8
 8002944:	0850      	lsrs	r0, r2, #1
 8002946:	1830      	adds	r0, r6, r0
 8002948:	f147 0100 	adc.w	r1, r7, #0
 800294c:	f7fd fc98 	bl	8000280 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002950:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002954:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <UART_SetConfig+0x2a0>)
 8002956:	429a      	cmp	r2, r3
 8002958:	d86f      	bhi.n	8002a3a <UART_SetConfig+0x306>
          huart->Instance->BRR = usartdiv;
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	60d8      	str	r0, [r3, #12]
 800295e:	2000      	movs	r0, #0
 8002960:	e056      	b.n	8002a10 <UART_SetConfig+0x2dc>
        pclk = HAL_RCC_GetSysClockFreq();
 8002962:	f7fe fb09 	bl	8000f78 <HAL_RCC_GetSysClockFreq>
        break;
 8002966:	e7e0      	b.n	800292a <UART_SetConfig+0x1f6>
        pclk = (uint32_t) HSI_VALUE;
 8002968:	481b      	ldr	r0, [pc, #108]	; (80029d8 <UART_SetConfig+0x2a4>)
 800296a:	e7e0      	b.n	800292e <UART_SetConfig+0x1fa>
    switch (clocksource)
 800296c:	2b08      	cmp	r3, #8
 800296e:	d866      	bhi.n	8002a3e <UART_SetConfig+0x30a>
 8002970:	e8df f003 	tbb	[pc, r3]
 8002974:	65053407 	.word	0x65053407
 8002978:	65656537 	.word	0x65656537
 800297c:	0b          	.byte	0x0b
 800297d:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800297e:	4816      	ldr	r0, [pc, #88]	; (80029d8 <UART_SetConfig+0x2a4>)
 8002980:	e003      	b.n	800298a <UART_SetConfig+0x256>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002982:	f7fe ff1f 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002986:	2800      	cmp	r0, #0
 8002988:	d05b      	beq.n	8002a42 <UART_SetConfig+0x30e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800298a:	6862      	ldr	r2, [r4, #4]
 800298c:	0853      	lsrs	r3, r2, #1
 800298e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002992:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002996:	f1a0 0210 	sub.w	r2, r0, #16
 800299a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800299e:	429a      	cmp	r2, r3
 80029a0:	d851      	bhi.n	8002a46 <UART_SetConfig+0x312>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029a2:	b283      	uxth	r3, r0
 80029a4:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029a8:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80029ac:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 80029ae:	6823      	ldr	r3, [r4, #0]
 80029b0:	60d8      	str	r0, [r3, #12]
 80029b2:	2000      	movs	r0, #0
 80029b4:	e02c      	b.n	8002a10 <UART_SetConfig+0x2dc>
 80029b6:	bf00      	nop
 80029b8:	efff69f3 	.word	0xefff69f3
 80029bc:	40008000 	.word	0x40008000
 80029c0:	40013800 	.word	0x40013800
 80029c4:	40004400 	.word	0x40004400
 80029c8:	40004800 	.word	0x40004800
 80029cc:	40004c00 	.word	0x40004c00
 80029d0:	40005000 	.word	0x40005000
 80029d4:	000ffcff 	.word	0x000ffcff
 80029d8:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetPCLK2Freq();
 80029dc:	f7fe ff04 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
        break;
 80029e0:	e7d1      	b.n	8002986 <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetSysClockFreq();
 80029e2:	f7fe fac9 	bl	8000f78 <HAL_RCC_GetSysClockFreq>
        break;
 80029e6:	e7ce      	b.n	8002986 <UART_SetConfig+0x252>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029e8:	481b      	ldr	r0, [pc, #108]	; (8002a58 <UART_SetConfig+0x324>)
 80029ea:	e002      	b.n	80029f2 <UART_SetConfig+0x2be>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029ec:	f7fe feea 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80029f0:	b368      	cbz	r0, 8002a4e <UART_SetConfig+0x31a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029f2:	6863      	ldr	r3, [r4, #4]
 80029f4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80029f8:	fbb0 f0f3 	udiv	r0, r0, r3
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029fc:	f1a0 0210 	sub.w	r2, r0, #16
 8002a00:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d824      	bhi.n	8002a52 <UART_SetConfig+0x31e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	b280      	uxth	r0, r0
 8002a0c:	60d8      	str	r0, [r3, #12]
 8002a0e:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8002a14:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8002a16:	bdd0      	pop	{r4, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a18:	f7fe fee6 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
        break;
 8002a1c:	e7e8      	b.n	80029f0 <UART_SetConfig+0x2bc>
        pclk = HAL_RCC_GetSysClockFreq();
 8002a1e:	f7fe faab 	bl	8000f78 <HAL_RCC_GetSysClockFreq>
        break;
 8002a22:	e7e5      	b.n	80029f0 <UART_SetConfig+0x2bc>
        pclk = (uint32_t) LSE_VALUE;
 8002a24:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a28:	e7e3      	b.n	80029f2 <UART_SetConfig+0x2be>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	e7f0      	b.n	8002a10 <UART_SetConfig+0x2dc>
 8002a2e:	2000      	movs	r0, #0
 8002a30:	e7ee      	b.n	8002a10 <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 8002a32:	2001      	movs	r0, #1
 8002a34:	e7ec      	b.n	8002a10 <UART_SetConfig+0x2dc>
 8002a36:	2001      	movs	r0, #1
 8002a38:	e7ea      	b.n	8002a10 <UART_SetConfig+0x2dc>
          ret = HAL_ERROR;
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	e7e8      	b.n	8002a10 <UART_SetConfig+0x2dc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a3e:	2001      	movs	r0, #1
 8002a40:	e7e6      	b.n	8002a10 <UART_SetConfig+0x2dc>
 8002a42:	2000      	movs	r0, #0
 8002a44:	e7e4      	b.n	8002a10 <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 8002a46:	2001      	movs	r0, #1
 8002a48:	e7e2      	b.n	8002a10 <UART_SetConfig+0x2dc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	e7e0      	b.n	8002a10 <UART_SetConfig+0x2dc>
 8002a4e:	2000      	movs	r0, #0
 8002a50:	e7de      	b.n	8002a10 <UART_SetConfig+0x2dc>
        ret = HAL_ERROR;
 8002a52:	2001      	movs	r0, #1
 8002a54:	e7dc      	b.n	8002a10 <UART_SetConfig+0x2dc>
 8002a56:	bf00      	nop
 8002a58:	00f42400 	.word	0x00f42400

08002a5c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a5e:	f013 0f01 	tst.w	r3, #1
 8002a62:	d006      	beq.n	8002a72 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a64:	6802      	ldr	r2, [r0, #0]
 8002a66:	6853      	ldr	r3, [r2, #4]
 8002a68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a6c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a72:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a74:	f013 0f02 	tst.w	r3, #2
 8002a78:	d006      	beq.n	8002a88 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a7a:	6802      	ldr	r2, [r0, #0]
 8002a7c:	6853      	ldr	r3, [r2, #4]
 8002a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a82:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002a84:	430b      	orrs	r3, r1
 8002a86:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a8a:	f013 0f04 	tst.w	r3, #4
 8002a8e:	d006      	beq.n	8002a9e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a90:	6802      	ldr	r2, [r0, #0]
 8002a92:	6853      	ldr	r3, [r2, #4]
 8002a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a98:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002aa0:	f013 0f08 	tst.w	r3, #8
 8002aa4:	d006      	beq.n	8002ab4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002aa6:	6802      	ldr	r2, [r0, #0]
 8002aa8:	6853      	ldr	r3, [r2, #4]
 8002aaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002aae:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ab4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ab6:	f013 0f10 	tst.w	r3, #16
 8002aba:	d006      	beq.n	8002aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002abc:	6802      	ldr	r2, [r0, #0]
 8002abe:	6893      	ldr	r3, [r2, #8]
 8002ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ac4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002acc:	f013 0f20 	tst.w	r3, #32
 8002ad0:	d006      	beq.n	8002ae0 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ad2:	6802      	ldr	r2, [r0, #0]
 8002ad4:	6893      	ldr	r3, [r2, #8]
 8002ad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ada:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002adc:	430b      	orrs	r3, r1
 8002ade:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ae0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ae2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ae6:	d00a      	beq.n	8002afe <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ae8:	6802      	ldr	r2, [r0, #0]
 8002aea:	6853      	ldr	r3, [r2, #4]
 8002aec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002af0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002af2:	430b      	orrs	r3, r1
 8002af4:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002af6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002afc:	d00b      	beq.n	8002b16 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002afe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b04:	d006      	beq.n	8002b14 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b06:	6802      	ldr	r2, [r0, #0]
 8002b08:	6853      	ldr	r3, [r2, #4]
 8002b0a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002b0e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6053      	str	r3, [r2, #4]
  }
}
 8002b14:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b16:	6802      	ldr	r2, [r0, #0]
 8002b18:	6853      	ldr	r3, [r2, #4]
 8002b1a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b1e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6053      	str	r3, [r2, #4]
 8002b24:	e7eb      	b.n	8002afe <UART_AdvFeatureConfig+0xa2>

08002b26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b2a:	4605      	mov	r5, r0
 8002b2c:	460f      	mov	r7, r1
 8002b2e:	4616      	mov	r6, r2
 8002b30:	4699      	mov	r9, r3
 8002b32:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b36:	682c      	ldr	r4, [r5, #0]
 8002b38:	69e4      	ldr	r4, [r4, #28]
 8002b3a:	ea37 0304 	bics.w	r3, r7, r4
 8002b3e:	bf0c      	ite	eq
 8002b40:	2401      	moveq	r4, #1
 8002b42:	2400      	movne	r4, #0
 8002b44:	42b4      	cmp	r4, r6
 8002b46:	d153      	bne.n	8002bf0 <UART_WaitOnFlagUntilTimeout+0xca>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b48:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002b4c:	d0f3      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4e:	f7fe f829 	bl	8000ba4 <HAL_GetTick>
 8002b52:	eba0 0009 	sub.w	r0, r0, r9
 8002b56:	4540      	cmp	r0, r8
 8002b58:	d82d      	bhi.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x90>
 8002b5a:	f1b8 0f00 	cmp.w	r8, #0
 8002b5e:	d02a      	beq.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x90>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b60:	682b      	ldr	r3, [r5, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	f012 0f04 	tst.w	r2, #4
 8002b68:	d0e5      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b6a:	69da      	ldr	r2, [r3, #28]
 8002b6c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002b70:	d0e1      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b76:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b78:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7a:	e852 3f00 	ldrex	r3, [r2]
 8002b7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	e842 3100 	strex	r1, r3, [r2]
 8002b86:	2900      	cmp	r1, #0
 8002b88:	d1f6      	bne.n	8002b78 <UART_WaitOnFlagUntilTimeout+0x52>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b8a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8c:	f102 0308 	add.w	r3, r2, #8
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b98:	3208      	adds	r2, #8
 8002b9a:	e842 3100 	strex	r1, r3, [r2]
 8002b9e:	2900      	cmp	r1, #0
 8002ba0:	d1f3      	bne.n	8002b8a <UART_WaitOnFlagUntilTimeout+0x64>

          huart->gState = HAL_UART_STATE_READY;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ba6:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ba8:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bac:	2300      	movs	r3, #0
 8002bae:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74

          return HAL_TIMEOUT;
 8002bb2:	2003      	movs	r0, #3
 8002bb4:	e01d      	b.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xcc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bb6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb8:	e852 3f00 	ldrex	r3, [r2]
 8002bbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc0:	e842 3100 	strex	r1, r3, [r2]
 8002bc4:	2900      	cmp	r1, #0
 8002bc6:	d1f6      	bne.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x90>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bca:	f102 0308 	add.w	r3, r2, #8
 8002bce:	e853 3f00 	ldrex	r3, [r3]
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	3208      	adds	r2, #8
 8002bd8:	e842 3100 	strex	r1, r3, [r2]
 8002bdc:	2900      	cmp	r1, #0
 8002bde:	d1f3      	bne.n	8002bc8 <UART_WaitOnFlagUntilTimeout+0xa2>
        huart->gState = HAL_UART_STATE_READY;
 8002be0:	2320      	movs	r3, #32
 8002be2:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002be4:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8002be6:	2300      	movs	r3, #0
 8002be8:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 8002bec:	2003      	movs	r0, #3
 8002bee:	e000      	b.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xcc>
        }
      }
    }
  }
  return HAL_OK;
 8002bf0:	2000      	movs	r0, #0
}
 8002bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002bf6 <HAL_UART_Transmit>:
{
 8002bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002bfe:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d156      	bne.n	8002cb2 <HAL_UART_Transmit+0xbc>
 8002c04:	4604      	mov	r4, r0
 8002c06:	460d      	mov	r5, r1
 8002c08:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002c0a:	2900      	cmp	r1, #0
 8002c0c:	d055      	beq.n	8002cba <HAL_UART_Transmit+0xc4>
 8002c0e:	2a00      	cmp	r2, #0
 8002c10:	d055      	beq.n	8002cbe <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8002c12:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d053      	beq.n	8002cc2 <HAL_UART_Transmit+0xcc>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c26:	2321      	movs	r3, #33	; 0x21
 8002c28:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8002c2a:	f7fd ffbb 	bl	8000ba4 <HAL_GetTick>
 8002c2e:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8002c30:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c34:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c38:	68a3      	ldr	r3, [r4, #8]
 8002c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3e:	d005      	beq.n	8002c4c <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8002c40:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8002c44:	2300      	movs	r3, #0
 8002c46:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8002c4a:	e014      	b.n	8002c76 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c4c:	6923      	ldr	r3, [r4, #16]
 8002c4e:	b113      	cbz	r3, 8002c56 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8002c50:	f04f 0800 	mov.w	r8, #0
 8002c54:	e7f6      	b.n	8002c44 <HAL_UART_Transmit+0x4e>
      pdata16bits = (const uint16_t *) pData;
 8002c56:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002c58:	2500      	movs	r5, #0
 8002c5a:	e7f3      	b.n	8002c44 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c5c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002c60:	6822      	ldr	r2, [r4, #0]
 8002c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c66:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002c68:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002c6c:	b292      	uxth	r2, r2
 8002c6e:	3a01      	subs	r2, #1
 8002c70:	b292      	uxth	r2, r2
 8002c72:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c76:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	b173      	cbz	r3, 8002c9c <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c7e:	9600      	str	r6, [sp, #0]
 8002c80:	463b      	mov	r3, r7
 8002c82:	2200      	movs	r2, #0
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	4620      	mov	r0, r4
 8002c88:	f7ff ff4d 	bl	8002b26 <UART_WaitOnFlagUntilTimeout>
 8002c8c:	b9d8      	cbnz	r0, 8002cc6 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8002c8e:	2d00      	cmp	r5, #0
 8002c90:	d0e4      	beq.n	8002c5c <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c9a:	e7e5      	b.n	8002c68 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c9c:	9600      	str	r6, [sp, #0]
 8002c9e:	463b      	mov	r3, r7
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2140      	movs	r1, #64	; 0x40
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f7ff ff3e 	bl	8002b26 <UART_WaitOnFlagUntilTimeout>
 8002caa:	b970      	cbnz	r0, 8002cca <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8002cac:	2320      	movs	r3, #32
 8002cae:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8002cb0:	e000      	b.n	8002cb4 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8002cb2:	2002      	movs	r0, #2
}
 8002cb4:	b002      	add	sp, #8
 8002cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002cba:	2001      	movs	r0, #1
 8002cbc:	e7fa      	b.n	8002cb4 <HAL_UART_Transmit+0xbe>
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	e7f8      	b.n	8002cb4 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8002cc2:	2002      	movs	r0, #2
 8002cc4:	e7f6      	b.n	8002cb4 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8002cc6:	2003      	movs	r0, #3
 8002cc8:	e7f4      	b.n	8002cb4 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8002cca:	2003      	movs	r0, #3
 8002ccc:	e7f2      	b.n	8002cb4 <HAL_UART_Transmit+0xbe>

08002cce <UART_CheckIdleState>:
{
 8002cce:	b530      	push	{r4, r5, lr}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002cda:	f7fd ff63 	bl	8000ba4 <HAL_GetTick>
 8002cde:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f013 0f08 	tst.w	r3, #8
 8002ce8:	d10d      	bne.n	8002d06 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f013 0f04 	tst.w	r3, #4
 8002cf2:	d116      	bne.n	8002d22 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002cf8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8002cfe:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 8002d02:	b003      	add	sp, #12
 8002d04:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d14:	4620      	mov	r0, r4
 8002d16:	f7ff ff06 	bl	8002b26 <UART_WaitOnFlagUntilTimeout>
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	d0e5      	beq.n	8002cea <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8002d1e:	2003      	movs	r0, #3
 8002d20:	e7ef      	b.n	8002d02 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	462b      	mov	r3, r5
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d30:	4620      	mov	r0, r4
 8002d32:	f7ff fef8 	bl	8002b26 <UART_WaitOnFlagUntilTimeout>
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d0dc      	beq.n	8002cf4 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8002d3a:	2003      	movs	r0, #3
 8002d3c:	e7e1      	b.n	8002d02 <UART_CheckIdleState+0x34>

08002d3e <HAL_UART_Init>:
  if (huart == NULL)
 8002d3e:	b368      	cbz	r0, 8002d9c <HAL_UART_Init+0x5e>
{
 8002d40:	b510      	push	{r4, lr}
 8002d42:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d44:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002d46:	b303      	cbz	r3, 8002d8a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002d48:	2324      	movs	r3, #36	; 0x24
 8002d4a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002d4c:	6822      	ldr	r2, [r4, #0]
 8002d4e:	6813      	ldr	r3, [r2, #0]
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d56:	4620      	mov	r0, r4
 8002d58:	f7ff fcec 	bl	8002734 <UART_SetConfig>
 8002d5c:	2801      	cmp	r0, #1
 8002d5e:	d013      	beq.n	8002d88 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d62:	b9bb      	cbnz	r3, 8002d94 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d64:	6822      	ldr	r2, [r4, #0]
 8002d66:	6853      	ldr	r3, [r2, #4]
 8002d68:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002d6c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d6e:	6822      	ldr	r2, [r4, #0]
 8002d70:	6893      	ldr	r3, [r2, #8]
 8002d72:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002d76:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002d78:	6822      	ldr	r2, [r4, #0]
 8002d7a:	6813      	ldr	r3, [r2, #0]
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002d82:	4620      	mov	r0, r4
 8002d84:	f7ff ffa3 	bl	8002cce <UART_CheckIdleState>
}
 8002d88:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002d8a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8002d8e:	f000 fa09 	bl	80031a4 <HAL_UART_MspInit>
 8002d92:	e7d9      	b.n	8002d48 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8002d94:	4620      	mov	r0, r4
 8002d96:	f7ff fe61 	bl	8002a5c <UART_AdvFeatureConfig>
 8002d9a:	e7e3      	b.n	8002d64 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8002d9c:	2001      	movs	r0, #1
}
 8002d9e:	4770      	bx	lr

08002da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002da0:	b510      	push	{r4, lr}
 8002da2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da4:	2400      	movs	r4, #0
 8002da6:	9405      	str	r4, [sp, #20]
 8002da8:	9406      	str	r4, [sp, #24]
 8002daa:	9407      	str	r4, [sp, #28]
 8002dac:	9408      	str	r4, [sp, #32]
 8002dae:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002db0:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <MX_GPIO_Init+0x9c>)
 8002db2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002db4:	f042 0204 	orr.w	r2, r2, #4
 8002db8:	64da      	str	r2, [r3, #76]	; 0x4c
 8002dba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dbc:	f002 0204 	and.w	r2, r2, #4
 8002dc0:	9201      	str	r2, [sp, #4]
 8002dc2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dca:	64da      	str	r2, [r3, #76]	; 0x4c
 8002dcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dce:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002dd2:	9202      	str	r2, [sp, #8]
 8002dd4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dd8:	f042 0201 	orr.w	r2, r2, #1
 8002ddc:	64da      	str	r2, [r3, #76]	; 0x4c
 8002dde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002de0:	f002 0201 	and.w	r2, r2, #1
 8002de4:	9203      	str	r2, [sp, #12]
 8002de6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dea:	f042 0202 	orr.w	r2, r2, #2
 8002dee:	64da      	str	r2, [r3, #76]	; 0x4c
 8002df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	9304      	str	r3, [sp, #16]
 8002df8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e04:	f7fe f81a 	bl	8000e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e0c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e0e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e12:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e16:	a905      	add	r1, sp, #20
 8002e18:	4809      	ldr	r0, [pc, #36]	; (8002e40 <MX_GPIO_Init+0xa0>)
 8002e1a:	f7fd ff25 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8002e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e22:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e24:	2301      	movs	r3, #1
 8002e26:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8002e2c:	a905      	add	r1, sp, #20
 8002e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e32:	f7fd ff19 	bl	8000c68 <HAL_GPIO_Init>

}
 8002e36:	b00a      	add	sp, #40	; 0x28
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	48000800 	.word	0x48000800

08002e44 <NRF_Receive>:

/* USER CODE BEGIN 4 */
void NRF_Receive(void)
{
 8002e44:	b510      	push	{r4, lr}
 8002e46:	b0c8      	sub	sp, #288	; 0x120
uint8_t buffer[32];
char msg[256];

   if(TM_NRF24L01_DataReady(&hspi1))
 8002e48:	4836      	ldr	r0, [pc, #216]	; (8002f24 <NRF_Receive+0xe0>)
 8002e4a:	f7fd fcd0 	bl	80007ee <TM_NRF24L01_DataReady>
 8002e4e:	b908      	cbnz	r0, 8002e54 <NRF_Receive+0x10>
   sprintf(msg, "\r\n");
   HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);

   }

}
 8002e50:	b048      	add	sp, #288	; 0x120
 8002e52:	bd10      	pop	{r4, pc}
	   TM_NRF24L01_GetData(&hspi1, buffer);
 8002e54:	a940      	add	r1, sp, #256	; 0x100
 8002e56:	4833      	ldr	r0, [pc, #204]	; (8002f24 <NRF_Receive+0xe0>)
 8002e58:	f7fd fc76 	bl	8000748 <TM_NRF24L01_GetData>
       if (transmissionStatus == TM_NRF24L01_Transmit_Status_Ok) {
 8002e5c:	4b32      	ldr	r3, [pc, #200]	; (8002f28 <NRF_Receive+0xe4>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d028      	beq.n	8002eb6 <NRF_Receive+0x72>
       } else if (transmissionStatus == TM_NRF24L01_Transmit_Status_Lost) {
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d137      	bne.n	8002ed8 <NRF_Receive+0x94>
		    sprintf(msg, "LOST\r\n ");
 8002e68:	466c      	mov	r4, sp
 8002e6a:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <NRF_Receive+0xe8>)
 8002e6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e70:	e884 0003 	stmia.w	r4, {r0, r1}
		    HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8002e74:	4620      	mov	r0, r4
 8002e76:	f7fd f9ab 	bl	80001d0 <strlen>
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	b282      	uxth	r2, r0
 8002e80:	4621      	mov	r1, r4
 8002e82:	482b      	ldr	r0, [pc, #172]	; (8002f30 <NRF_Receive+0xec>)
 8002e84:	f7ff feb7 	bl	8002bf6 <HAL_UART_Transmit>
{
 8002e88:	2400      	movs	r4, #0
		for (int i=0; i<32; i++){
 8002e8a:	2c1f      	cmp	r4, #31
 8002e8c:	dc37      	bgt.n	8002efe <NRF_Receive+0xba>
			    sprintf(msg, "%x ", buffer[i]);
 8002e8e:	ab48      	add	r3, sp, #288	; 0x120
 8002e90:	4423      	add	r3, r4
 8002e92:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8002e96:	4927      	ldr	r1, [pc, #156]	; (8002f34 <NRF_Receive+0xf0>)
 8002e98:	4668      	mov	r0, sp
 8002e9a:	f000 fa47 	bl	800332c <siprintf>
			    HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8002e9e:	4668      	mov	r0, sp
 8002ea0:	f7fd f996 	bl	80001d0 <strlen>
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea8:	b282      	uxth	r2, r0
 8002eaa:	4669      	mov	r1, sp
 8002eac:	4820      	ldr	r0, [pc, #128]	; (8002f30 <NRF_Receive+0xec>)
 8002eae:	f7ff fea2 	bl	8002bf6 <HAL_UART_Transmit>
		for (int i=0; i<32; i++){
 8002eb2:	3401      	adds	r4, #1
 8002eb4:	e7e9      	b.n	8002e8a <NRF_Receive+0x46>
		    sprintf(msg, "OK\r\n ");
 8002eb6:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <NRF_Receive+0xf4>)
 8002eb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ebc:	9000      	str	r0, [sp, #0]
 8002ebe:	f8ad 1004 	strh.w	r1, [sp, #4]
		    HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8002ec2:	4668      	mov	r0, sp
 8002ec4:	f7fd f984 	bl	80001d0 <strlen>
 8002ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ecc:	b282      	uxth	r2, r0
 8002ece:	4669      	mov	r1, sp
 8002ed0:	4817      	ldr	r0, [pc, #92]	; (8002f30 <NRF_Receive+0xec>)
 8002ed2:	f7ff fe90 	bl	8002bf6 <HAL_UART_Transmit>
 8002ed6:	e7d7      	b.n	8002e88 <NRF_Receive+0x44>
		    sprintf(msg, "SENDING\r\n ");
 8002ed8:	4a18      	ldr	r2, [pc, #96]	; (8002f3c <NRF_Receive+0xf8>)
 8002eda:	466b      	mov	r3, sp
 8002edc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ede:	c303      	stmia	r3!, {r0, r1}
 8002ee0:	f823 2b02 	strh.w	r2, [r3], #2
 8002ee4:	0c12      	lsrs	r2, r2, #16
 8002ee6:	701a      	strb	r2, [r3, #0]
		    HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8002ee8:	4668      	mov	r0, sp
 8002eea:	f7fd f971 	bl	80001d0 <strlen>
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef2:	b282      	uxth	r2, r0
 8002ef4:	4669      	mov	r1, sp
 8002ef6:	480e      	ldr	r0, [pc, #56]	; (8002f30 <NRF_Receive+0xec>)
 8002ef8:	f7ff fe7d 	bl	8002bf6 <HAL_UART_Transmit>
 8002efc:	e7c4      	b.n	8002e88 <NRF_Receive+0x44>
   sprintf(msg, "\r\n");
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <NRF_Receive+0xfc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f8ad 3000 	strh.w	r3, [sp]
 8002f06:	0c1b      	lsrs	r3, r3, #16
 8002f08:	f88d 3002 	strb.w	r3, [sp, #2]
   HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8002f0c:	4668      	mov	r0, sp
 8002f0e:	f7fd f95f 	bl	80001d0 <strlen>
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295
 8002f16:	b282      	uxth	r2, r0
 8002f18:	4669      	mov	r1, sp
 8002f1a:	4805      	ldr	r0, [pc, #20]	; (8002f30 <NRF_Receive+0xec>)
 8002f1c:	f7ff fe6b 	bl	8002bf6 <HAL_UART_Transmit>
}
 8002f20:	e796      	b.n	8002e50 <NRF_Receive+0xc>
 8002f22:	bf00      	nop
 8002f24:	200000f4 	.word	0x200000f4
 8002f28:	200000b0 	.word	0x200000b0
 8002f2c:	08003c10 	.word	0x08003c10
 8002f30:	20000158 	.word	0x20000158
 8002f34:	08003c24 	.word	0x08003c24
 8002f38:	08003c08 	.word	0x08003c08
 8002f3c:	08003c18 	.word	0x08003c18
 8002f40:	08003c28 	.word	0x08003c28

08002f44 <Error_Handler>:
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002f44:	e7fe      	b.n	8002f44 <Error_Handler>
	...

08002f48 <MX_USART2_UART_Init>:
{
 8002f48:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8002f4a:	480b      	ldr	r0, [pc, #44]	; (8002f78 <MX_USART2_UART_Init+0x30>)
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <MX_USART2_UART_Init+0x34>)
 8002f4e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002f50:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002f54:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f56:	2300      	movs	r3, #0
 8002f58:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f5a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f5c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f5e:	220c      	movs	r2, #12
 8002f60:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f62:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f64:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f66:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f68:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f6a:	f7ff fee8 	bl	8002d3e <HAL_UART_Init>
 8002f6e:	b900      	cbnz	r0, 8002f72 <MX_USART2_UART_Init+0x2a>
}
 8002f70:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002f72:	f7ff ffe7 	bl	8002f44 <Error_Handler>
 8002f76:	bf00      	nop
 8002f78:	20000158 	.word	0x20000158
 8002f7c:	40004400 	.word	0x40004400

08002f80 <MX_SPI1_Init>:
{
 8002f80:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8002f82:	4810      	ldr	r0, [pc, #64]	; (8002fc4 <MX_SPI1_Init+0x44>)
 8002f84:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <MX_SPI1_Init+0x48>)
 8002f86:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f88:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002f8c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f96:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f98:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f9a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002f9c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002fa0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002fa2:	2210      	movs	r2, #16
 8002fa4:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fa6:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fa8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002faa:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002fac:	2207      	movs	r2, #7
 8002fae:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fb0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fb6:	f7ff f8c8 	bl	800214a <HAL_SPI_Init>
 8002fba:	b900      	cbnz	r0, 8002fbe <MX_SPI1_Init+0x3e>
}
 8002fbc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002fbe:	f7ff ffc1 	bl	8002f44 <Error_Handler>
 8002fc2:	bf00      	nop
 8002fc4:	200000f4 	.word	0x200000f4
 8002fc8:	40013000 	.word	0x40013000

08002fcc <SystemClock_Config>:
{
 8002fcc:	b500      	push	{lr}
 8002fce:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fd0:	2244      	movs	r2, #68	; 0x44
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	a805      	add	r0, sp, #20
 8002fd6:	f000 f9a1 	bl	800331c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fda:	2300      	movs	r3, #0
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	9302      	str	r3, [sp, #8]
 8002fe2:	9303      	str	r3, [sp, #12]
 8002fe4:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002fe6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002fea:	f7fd ff35 	bl	8000e58 <HAL_PWREx_ControlVoltageScaling>
 8002fee:	bb20      	cbnz	r0, 800303a <SystemClock_Config+0x6e>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ff8:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ffe:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003000:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003002:	2201      	movs	r2, #1
 8003004:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003006:	220a      	movs	r2, #10
 8003008:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800300a:	2207      	movs	r2, #7
 800300c:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800300e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003010:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003012:	a805      	add	r0, sp, #20
 8003014:	f7fe f80a 	bl	800102c <HAL_RCC_OscConfig>
 8003018:	b988      	cbnz	r0, 800303e <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800301a:	230f      	movs	r3, #15
 800301c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800301e:	2303      	movs	r3, #3
 8003020:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003022:	2300      	movs	r3, #0
 8003024:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003026:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003028:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800302a:	2104      	movs	r1, #4
 800302c:	4668      	mov	r0, sp
 800302e:	f7fe fb15 	bl	800165c <HAL_RCC_ClockConfig>
 8003032:	b930      	cbnz	r0, 8003042 <SystemClock_Config+0x76>
}
 8003034:	b017      	add	sp, #92	; 0x5c
 8003036:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800303a:	f7ff ff83 	bl	8002f44 <Error_Handler>
    Error_Handler();
 800303e:	f7ff ff81 	bl	8002f44 <Error_Handler>
    Error_Handler();
 8003042:	f7ff ff7f 	bl	8002f44 <Error_Handler>
	...

08003048 <main>:
{
 8003048:	b500      	push	{lr}
 800304a:	b087      	sub	sp, #28
  HAL_Init();
 800304c:	f7fd fd88 	bl	8000b60 <HAL_Init>
  SystemClock_Config();
 8003050:	f7ff ffbc 	bl	8002fcc <SystemClock_Config>
  MX_GPIO_Init();
 8003054:	f7ff fea4 	bl	8002da0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003058:	f7ff ff76 	bl	8002f48 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800305c:	f7ff ff90 	bl	8002f80 <MX_SPI1_Init>
	if (HAL_SPIEx_FlushRxFifo(&hspi1)){
 8003060:	4825      	ldr	r0, [pc, #148]	; (80030f8 <main+0xb0>)
 8003062:	f7ff fb4c 	bl	80026fe <HAL_SPIEx_FlushRxFifo>
 8003066:	b108      	cbz	r0, 800306c <main+0x24>
		Error_Handler();
 8003068:	f7ff ff6c 	bl	8002f44 <Error_Handler>
  char WELCOME_MSG[]="Welcome to STM32 RX\r\n";
 800306c:	466c      	mov	r4, sp
 800306e:	4d23      	ldr	r5, [pc, #140]	; (80030fc <main+0xb4>)
 8003070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003074:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003078:	f844 0b04 	str.w	r0, [r4], #4
 800307c:	8021      	strh	r1, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 800307e:	4668      	mov	r0, sp
 8003080:	f7fd f8a6 	bl	80001d0 <strlen>
 8003084:	f04f 33ff 	mov.w	r3, #4294967295
 8003088:	b282      	uxth	r2, r0
 800308a:	4669      	mov	r1, sp
 800308c:	481c      	ldr	r0, [pc, #112]	; (8003100 <main+0xb8>)
 800308e:	f7ff fdb2 	bl	8002bf6 <HAL_UART_Transmit>
  TM_NRF24L01_SoftwareReset(&hspi1);
 8003092:	4c19      	ldr	r4, [pc, #100]	; (80030f8 <main+0xb0>)
 8003094:	4620      	mov	r0, r4
 8003096:	f7fd fbba 	bl	800080e <TM_NRF24L01_SoftwareReset>
  TM_NRF24L01_Init(&hspi1, 76, 32);
 800309a:	2220      	movs	r2, #32
 800309c:	214c      	movs	r1, #76	; 0x4c
 800309e:	4620      	mov	r0, r4
 80030a0:	f7fd fcb4 	bl	8000a0c <TM_NRF24L01_Init>
  TM_NRF24L01_setCrcWidth(&hspi1, 8);
 80030a4:	2108      	movs	r1, #8
 80030a6:	4620      	mov	r0, r4
 80030a8:	f7fd fd16 	bl	8000ad8 <TM_NRF24L01_setCrcWidth>
  TM_NRF24L01_disableAutoAcknowledge(&hspi1);
 80030ac:	4620      	mov	r0, r4
 80030ae:	f7fd fd2b 	bl	8000b08 <TM_NRF24L01_disableAutoAcknowledge>
  TM_NRF24L01_SetMyAddress(&hspi1,MyAddress);
 80030b2:	4d14      	ldr	r5, [pc, #80]	; (8003104 <main+0xbc>)
 80030b4:	4629      	mov	r1, r5
 80030b6:	4620      	mov	r0, r4
 80030b8:	f7fd fb1e 	bl	80006f8 <TM_NRF24L01_SetMyAddress>
  TM_NRF24L01_SetTxAddress(&hspi1,TxAddress);
 80030bc:	f105 0608 	add.w	r6, r5, #8
 80030c0:	4631      	mov	r1, r6
 80030c2:	4620      	mov	r0, r4
 80030c4:	f7fd fb30 	bl	8000728 <TM_NRF24L01_SetTxAddress>
  TM_NRF24L01_SetChannel(&hspi1, 50);
 80030c8:	2132      	movs	r1, #50	; 0x32
 80030ca:	4620      	mov	r0, r4
 80030cc:	f7fd fc48 	bl	8000960 <TM_NRF24L01_SetChannel>
  TM_NRF24L01_SetRF(&hspi1, TM_NRF24L01_DataRate_1M, TM_NRF24L01_OutputPower_M18dBm);
 80030d0:	2200      	movs	r2, #0
 80030d2:	2101      	movs	r1, #1
 80030d4:	4620      	mov	r0, r4
 80030d6:	f7fd fc55 	bl	8000984 <TM_NRF24L01_SetRF>
  TM_NRF24L01_SetMyAddress(&hspi1,MyAddress);
 80030da:	4629      	mov	r1, r5
 80030dc:	4620      	mov	r0, r4
 80030de:	f7fd fb0b 	bl	80006f8 <TM_NRF24L01_SetMyAddress>
  TM_NRF24L01_SetTxAddress(&hspi1,TxAddress);
 80030e2:	4631      	mov	r1, r6
 80030e4:	4620      	mov	r0, r4
 80030e6:	f7fd fb1f 	bl	8000728 <TM_NRF24L01_SetTxAddress>
  TM_NRF24L01_PowerUpRx(&hspi1);
 80030ea:	4620      	mov	r0, r4
 80030ec:	f7fd fc72 	bl	80009d4 <TM_NRF24L01_PowerUpRx>
  NRF_Receive();
 80030f0:	f7ff fea8 	bl	8002e44 <NRF_Receive>
  while (1)
 80030f4:	e7fc      	b.n	80030f0 <main+0xa8>
 80030f6:	bf00      	nop
 80030f8:	200000f4 	.word	0x200000f4
 80030fc:	08003c2c 	.word	0x08003c2c
 8003100:	20000158 	.word	0x20000158
 8003104:	20000008 	.word	0x20000008

08003108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003108:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <HAL_MspInit+0x2c>)
 800310c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	661a      	str	r2, [r3, #96]	; 0x60
 8003114:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003116:	f002 0201 	and.w	r2, r2, #1
 800311a:	9200      	str	r2, [sp, #0]
 800311c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800311e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003120:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003124:	659a      	str	r2, [r3, #88]	; 0x58
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003130:	b002      	add	sp, #8
 8003132:	4770      	bx	lr
 8003134:	40021000 	.word	0x40021000

08003138 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003138:	b500      	push	{lr}
 800313a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313c:	2300      	movs	r3, #0
 800313e:	9303      	str	r3, [sp, #12]
 8003140:	9304      	str	r3, [sp, #16]
 8003142:	9305      	str	r3, [sp, #20]
 8003144:	9306      	str	r3, [sp, #24]
 8003146:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8003148:	6802      	ldr	r2, [r0, #0]
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <HAL_SPI_MspInit+0x68>)
 800314c:	429a      	cmp	r2, r3
 800314e:	d002      	beq.n	8003156 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003150:	b009      	add	sp, #36	; 0x24
 8003152:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003156:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800315a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800315c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003160:	661a      	str	r2, [r3, #96]	; 0x60
 8003162:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003164:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003168:	9201      	str	r2, [sp, #4]
 800316a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	64da      	str	r2, [r3, #76]	; 0x4c
 8003174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	9302      	str	r3, [sp, #8]
 800317c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = NRF_NSS_Pin|NRF_SCK_Pin|NRF_MISO_Pin|NRF_MOSI_Pin;
 800317e:	23f0      	movs	r3, #240	; 0xf0
 8003180:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003182:	2302      	movs	r3, #2
 8003184:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318a:	2303      	movs	r3, #3
 800318c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800318e:	2305      	movs	r3, #5
 8003190:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003192:	a903      	add	r1, sp, #12
 8003194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003198:	f7fd fd66 	bl	8000c68 <HAL_GPIO_Init>
}
 800319c:	e7d8      	b.n	8003150 <HAL_SPI_MspInit+0x18>
 800319e:	bf00      	nop
 80031a0:	40013000 	.word	0x40013000

080031a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031a4:	b510      	push	{r4, lr}
 80031a6:	b0aa      	sub	sp, #168	; 0xa8
 80031a8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031aa:	2100      	movs	r1, #0
 80031ac:	9125      	str	r1, [sp, #148]	; 0x94
 80031ae:	9126      	str	r1, [sp, #152]	; 0x98
 80031b0:	9127      	str	r1, [sp, #156]	; 0x9c
 80031b2:	9128      	str	r1, [sp, #160]	; 0xa0
 80031b4:	9129      	str	r1, [sp, #164]	; 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031b6:	2288      	movs	r2, #136	; 0x88
 80031b8:	a803      	add	r0, sp, #12
 80031ba:	f000 f8af 	bl	800331c <memset>
  if(huart->Instance==USART2)
 80031be:	6822      	ldr	r2, [r4, #0]
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_UART_MspInit+0x84>)
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d001      	beq.n	80031ca <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031c6:	b02a      	add	sp, #168	; 0xa8
 80031c8:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80031ca:	2302      	movs	r3, #2
 80031cc:	9303      	str	r3, [sp, #12]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031ce:	2300      	movs	r3, #0
 80031d0:	9312      	str	r3, [sp, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031d2:	a803      	add	r0, sp, #12
 80031d4:	f7fe fc78 	bl	8001ac8 <HAL_RCCEx_PeriphCLKConfig>
 80031d8:	bb10      	cbnz	r0, 8003220 <HAL_UART_MspInit+0x7c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <HAL_UART_MspInit+0x88>)
 80031dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80031e2:	659a      	str	r2, [r3, #88]	; 0x58
 80031e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031e6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80031ea:	9201      	str	r2, [sp, #4]
 80031ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80031f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	9302      	str	r3, [sp, #8]
 80031fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003200:	230c      	movs	r3, #12
 8003202:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003204:	2302      	movs	r3, #2
 8003206:	9326      	str	r3, [sp, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	2300      	movs	r3, #0
 800320a:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320c:	2303      	movs	r3, #3
 800320e:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003210:	2307      	movs	r3, #7
 8003212:	9329      	str	r3, [sp, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003214:	a925      	add	r1, sp, #148	; 0x94
 8003216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800321a:	f7fd fd25 	bl	8000c68 <HAL_GPIO_Init>
}
 800321e:	e7d2      	b.n	80031c6 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8003220:	f7ff fe90 	bl	8002f44 <Error_Handler>
 8003224:	e7d9      	b.n	80031da <HAL_UART_MspInit+0x36>
 8003226:	bf00      	nop
 8003228:	40004400 	.word	0x40004400
 800322c:	40021000 	.word	0x40021000

08003230 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003230:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003232:	f7fd fcab 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003236:	bd08      	pop	{r3, pc}

08003238 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003238:	490f      	ldr	r1, [pc, #60]	; (8003278 <SystemInit+0x40>)
 800323a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800323e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003246:	4b0d      	ldr	r3, [pc, #52]	; (800327c <SystemInit+0x44>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003250:	2000      	movs	r0, #0
 8003252:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800325a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800325e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003260:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003264:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800326c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800326e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003274:	608b      	str	r3, [r1, #8]
#endif
}
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00
 800327c:	40021000 	.word	0x40021000

08003280 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003284:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003286:	e003      	b.n	8003290 <LoopCopyDataInit>

08003288 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800328a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800328c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800328e:	3104      	adds	r1, #4

08003290 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003290:	480b      	ldr	r0, [pc, #44]	; (80032c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003294:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003296:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003298:	d3f6      	bcc.n	8003288 <CopyDataInit>
	ldr	r2, =_sbss
 800329a:	4a0b      	ldr	r2, [pc, #44]	; (80032c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800329c:	e002      	b.n	80032a4 <LoopFillZerobss>

0800329e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800329e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80032a0:	f842 3b04 	str.w	r3, [r2], #4

080032a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <LoopForever+0x16>)
	cmp	r2, r3
 80032a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80032a8:	d3f9      	bcc.n	800329e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032aa:	f7ff ffc5 	bl	8003238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032ae:	f000 f811 	bl	80032d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032b2:	f7ff fec9 	bl	8003048 <main>

080032b6 <LoopForever>:

LoopForever:
    b LoopForever
 80032b6:	e7fe      	b.n	80032b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032b8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80032bc:	08003c90 	.word	0x08003c90
	ldr	r0, =_sdata
 80032c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80032c4:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 80032c8:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 80032cc:	200001ec 	.word	0x200001ec

080032d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032d0:	e7fe      	b.n	80032d0 <ADC1_2_IRQHandler>
	...

080032d4 <__libc_init_array>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	4d0d      	ldr	r5, [pc, #52]	; (800330c <__libc_init_array+0x38>)
 80032d8:	4c0d      	ldr	r4, [pc, #52]	; (8003310 <__libc_init_array+0x3c>)
 80032da:	1b64      	subs	r4, r4, r5
 80032dc:	10a4      	asrs	r4, r4, #2
 80032de:	2600      	movs	r6, #0
 80032e0:	42a6      	cmp	r6, r4
 80032e2:	d109      	bne.n	80032f8 <__libc_init_array+0x24>
 80032e4:	4d0b      	ldr	r5, [pc, #44]	; (8003314 <__libc_init_array+0x40>)
 80032e6:	4c0c      	ldr	r4, [pc, #48]	; (8003318 <__libc_init_array+0x44>)
 80032e8:	f000 fc5c 	bl	8003ba4 <_init>
 80032ec:	1b64      	subs	r4, r4, r5
 80032ee:	10a4      	asrs	r4, r4, #2
 80032f0:	2600      	movs	r6, #0
 80032f2:	42a6      	cmp	r6, r4
 80032f4:	d105      	bne.n	8003302 <__libc_init_array+0x2e>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032fc:	4798      	blx	r3
 80032fe:	3601      	adds	r6, #1
 8003300:	e7ee      	b.n	80032e0 <__libc_init_array+0xc>
 8003302:	f855 3b04 	ldr.w	r3, [r5], #4
 8003306:	4798      	blx	r3
 8003308:	3601      	adds	r6, #1
 800330a:	e7f2      	b.n	80032f2 <__libc_init_array+0x1e>
 800330c:	08003c80 	.word	0x08003c80
 8003310:	08003c80 	.word	0x08003c80
 8003314:	08003c80 	.word	0x08003c80
 8003318:	08003c84 	.word	0x08003c84

0800331c <memset>:
 800331c:	4402      	add	r2, r0
 800331e:	4603      	mov	r3, r0
 8003320:	4293      	cmp	r3, r2
 8003322:	d100      	bne.n	8003326 <memset+0xa>
 8003324:	4770      	bx	lr
 8003326:	f803 1b01 	strb.w	r1, [r3], #1
 800332a:	e7f9      	b.n	8003320 <memset+0x4>

0800332c <siprintf>:
 800332c:	b40e      	push	{r1, r2, r3}
 800332e:	b500      	push	{lr}
 8003330:	b09c      	sub	sp, #112	; 0x70
 8003332:	ab1d      	add	r3, sp, #116	; 0x74
 8003334:	9002      	str	r0, [sp, #8]
 8003336:	9006      	str	r0, [sp, #24]
 8003338:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800333c:	4809      	ldr	r0, [pc, #36]	; (8003364 <siprintf+0x38>)
 800333e:	9107      	str	r1, [sp, #28]
 8003340:	9104      	str	r1, [sp, #16]
 8003342:	4909      	ldr	r1, [pc, #36]	; (8003368 <siprintf+0x3c>)
 8003344:	f853 2b04 	ldr.w	r2, [r3], #4
 8003348:	9105      	str	r1, [sp, #20]
 800334a:	6800      	ldr	r0, [r0, #0]
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	a902      	add	r1, sp, #8
 8003350:	f000 f868 	bl	8003424 <_svfiprintf_r>
 8003354:	9b02      	ldr	r3, [sp, #8]
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	b01c      	add	sp, #112	; 0x70
 800335c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003360:	b003      	add	sp, #12
 8003362:	4770      	bx	lr
 8003364:	2000001c 	.word	0x2000001c
 8003368:	ffff0208 	.word	0xffff0208

0800336c <__ssputs_r>:
 800336c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003370:	688e      	ldr	r6, [r1, #8]
 8003372:	429e      	cmp	r6, r3
 8003374:	4682      	mov	sl, r0
 8003376:	460c      	mov	r4, r1
 8003378:	4690      	mov	r8, r2
 800337a:	461f      	mov	r7, r3
 800337c:	d838      	bhi.n	80033f0 <__ssputs_r+0x84>
 800337e:	898a      	ldrh	r2, [r1, #12]
 8003380:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003384:	d032      	beq.n	80033ec <__ssputs_r+0x80>
 8003386:	6825      	ldr	r5, [r4, #0]
 8003388:	6909      	ldr	r1, [r1, #16]
 800338a:	eba5 0901 	sub.w	r9, r5, r1
 800338e:	6965      	ldr	r5, [r4, #20]
 8003390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003394:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003398:	3301      	adds	r3, #1
 800339a:	444b      	add	r3, r9
 800339c:	106d      	asrs	r5, r5, #1
 800339e:	429d      	cmp	r5, r3
 80033a0:	bf38      	it	cc
 80033a2:	461d      	movcc	r5, r3
 80033a4:	0553      	lsls	r3, r2, #21
 80033a6:	d531      	bpl.n	800340c <__ssputs_r+0xa0>
 80033a8:	4629      	mov	r1, r5
 80033aa:	f000 fb47 	bl	8003a3c <_malloc_r>
 80033ae:	4606      	mov	r6, r0
 80033b0:	b950      	cbnz	r0, 80033c8 <__ssputs_r+0x5c>
 80033b2:	230c      	movs	r3, #12
 80033b4:	f8ca 3000 	str.w	r3, [sl]
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033be:	81a3      	strh	r3, [r4, #12]
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295
 80033c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c8:	6921      	ldr	r1, [r4, #16]
 80033ca:	464a      	mov	r2, r9
 80033cc:	f000 fabe 	bl	800394c <memcpy>
 80033d0:	89a3      	ldrh	r3, [r4, #12]
 80033d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033da:	81a3      	strh	r3, [r4, #12]
 80033dc:	6126      	str	r6, [r4, #16]
 80033de:	6165      	str	r5, [r4, #20]
 80033e0:	444e      	add	r6, r9
 80033e2:	eba5 0509 	sub.w	r5, r5, r9
 80033e6:	6026      	str	r6, [r4, #0]
 80033e8:	60a5      	str	r5, [r4, #8]
 80033ea:	463e      	mov	r6, r7
 80033ec:	42be      	cmp	r6, r7
 80033ee:	d900      	bls.n	80033f2 <__ssputs_r+0x86>
 80033f0:	463e      	mov	r6, r7
 80033f2:	4632      	mov	r2, r6
 80033f4:	6820      	ldr	r0, [r4, #0]
 80033f6:	4641      	mov	r1, r8
 80033f8:	f000 fab6 	bl	8003968 <memmove>
 80033fc:	68a3      	ldr	r3, [r4, #8]
 80033fe:	6822      	ldr	r2, [r4, #0]
 8003400:	1b9b      	subs	r3, r3, r6
 8003402:	4432      	add	r2, r6
 8003404:	60a3      	str	r3, [r4, #8]
 8003406:	6022      	str	r2, [r4, #0]
 8003408:	2000      	movs	r0, #0
 800340a:	e7db      	b.n	80033c4 <__ssputs_r+0x58>
 800340c:	462a      	mov	r2, r5
 800340e:	f000 fb6f 	bl	8003af0 <_realloc_r>
 8003412:	4606      	mov	r6, r0
 8003414:	2800      	cmp	r0, #0
 8003416:	d1e1      	bne.n	80033dc <__ssputs_r+0x70>
 8003418:	6921      	ldr	r1, [r4, #16]
 800341a:	4650      	mov	r0, sl
 800341c:	f000 fabe 	bl	800399c <_free_r>
 8003420:	e7c7      	b.n	80033b2 <__ssputs_r+0x46>
	...

08003424 <_svfiprintf_r>:
 8003424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003428:	4698      	mov	r8, r3
 800342a:	898b      	ldrh	r3, [r1, #12]
 800342c:	061b      	lsls	r3, r3, #24
 800342e:	b09d      	sub	sp, #116	; 0x74
 8003430:	4607      	mov	r7, r0
 8003432:	460d      	mov	r5, r1
 8003434:	4614      	mov	r4, r2
 8003436:	d50e      	bpl.n	8003456 <_svfiprintf_r+0x32>
 8003438:	690b      	ldr	r3, [r1, #16]
 800343a:	b963      	cbnz	r3, 8003456 <_svfiprintf_r+0x32>
 800343c:	2140      	movs	r1, #64	; 0x40
 800343e:	f000 fafd 	bl	8003a3c <_malloc_r>
 8003442:	6028      	str	r0, [r5, #0]
 8003444:	6128      	str	r0, [r5, #16]
 8003446:	b920      	cbnz	r0, 8003452 <_svfiprintf_r+0x2e>
 8003448:	230c      	movs	r3, #12
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	f04f 30ff 	mov.w	r0, #4294967295
 8003450:	e0d1      	b.n	80035f6 <_svfiprintf_r+0x1d2>
 8003452:	2340      	movs	r3, #64	; 0x40
 8003454:	616b      	str	r3, [r5, #20]
 8003456:	2300      	movs	r3, #0
 8003458:	9309      	str	r3, [sp, #36]	; 0x24
 800345a:	2320      	movs	r3, #32
 800345c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003460:	f8cd 800c 	str.w	r8, [sp, #12]
 8003464:	2330      	movs	r3, #48	; 0x30
 8003466:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003610 <_svfiprintf_r+0x1ec>
 800346a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800346e:	f04f 0901 	mov.w	r9, #1
 8003472:	4623      	mov	r3, r4
 8003474:	469a      	mov	sl, r3
 8003476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800347a:	b10a      	cbz	r2, 8003480 <_svfiprintf_r+0x5c>
 800347c:	2a25      	cmp	r2, #37	; 0x25
 800347e:	d1f9      	bne.n	8003474 <_svfiprintf_r+0x50>
 8003480:	ebba 0b04 	subs.w	fp, sl, r4
 8003484:	d00b      	beq.n	800349e <_svfiprintf_r+0x7a>
 8003486:	465b      	mov	r3, fp
 8003488:	4622      	mov	r2, r4
 800348a:	4629      	mov	r1, r5
 800348c:	4638      	mov	r0, r7
 800348e:	f7ff ff6d 	bl	800336c <__ssputs_r>
 8003492:	3001      	adds	r0, #1
 8003494:	f000 80aa 	beq.w	80035ec <_svfiprintf_r+0x1c8>
 8003498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800349a:	445a      	add	r2, fp
 800349c:	9209      	str	r2, [sp, #36]	; 0x24
 800349e:	f89a 3000 	ldrb.w	r3, [sl]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80a2 	beq.w	80035ec <_svfiprintf_r+0x1c8>
 80034a8:	2300      	movs	r3, #0
 80034aa:	f04f 32ff 	mov.w	r2, #4294967295
 80034ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034b2:	f10a 0a01 	add.w	sl, sl, #1
 80034b6:	9304      	str	r3, [sp, #16]
 80034b8:	9307      	str	r3, [sp, #28]
 80034ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034be:	931a      	str	r3, [sp, #104]	; 0x68
 80034c0:	4654      	mov	r4, sl
 80034c2:	2205      	movs	r2, #5
 80034c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034c8:	4851      	ldr	r0, [pc, #324]	; (8003610 <_svfiprintf_r+0x1ec>)
 80034ca:	f7fc fe89 	bl	80001e0 <memchr>
 80034ce:	9a04      	ldr	r2, [sp, #16]
 80034d0:	b9d8      	cbnz	r0, 800350a <_svfiprintf_r+0xe6>
 80034d2:	06d0      	lsls	r0, r2, #27
 80034d4:	bf44      	itt	mi
 80034d6:	2320      	movmi	r3, #32
 80034d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034dc:	0711      	lsls	r1, r2, #28
 80034de:	bf44      	itt	mi
 80034e0:	232b      	movmi	r3, #43	; 0x2b
 80034e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034e6:	f89a 3000 	ldrb.w	r3, [sl]
 80034ea:	2b2a      	cmp	r3, #42	; 0x2a
 80034ec:	d015      	beq.n	800351a <_svfiprintf_r+0xf6>
 80034ee:	9a07      	ldr	r2, [sp, #28]
 80034f0:	4654      	mov	r4, sl
 80034f2:	2000      	movs	r0, #0
 80034f4:	f04f 0c0a 	mov.w	ip, #10
 80034f8:	4621      	mov	r1, r4
 80034fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034fe:	3b30      	subs	r3, #48	; 0x30
 8003500:	2b09      	cmp	r3, #9
 8003502:	d94e      	bls.n	80035a2 <_svfiprintf_r+0x17e>
 8003504:	b1b0      	cbz	r0, 8003534 <_svfiprintf_r+0x110>
 8003506:	9207      	str	r2, [sp, #28]
 8003508:	e014      	b.n	8003534 <_svfiprintf_r+0x110>
 800350a:	eba0 0308 	sub.w	r3, r0, r8
 800350e:	fa09 f303 	lsl.w	r3, r9, r3
 8003512:	4313      	orrs	r3, r2
 8003514:	9304      	str	r3, [sp, #16]
 8003516:	46a2      	mov	sl, r4
 8003518:	e7d2      	b.n	80034c0 <_svfiprintf_r+0x9c>
 800351a:	9b03      	ldr	r3, [sp, #12]
 800351c:	1d19      	adds	r1, r3, #4
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	9103      	str	r1, [sp, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	bfbb      	ittet	lt
 8003526:	425b      	neglt	r3, r3
 8003528:	f042 0202 	orrlt.w	r2, r2, #2
 800352c:	9307      	strge	r3, [sp, #28]
 800352e:	9307      	strlt	r3, [sp, #28]
 8003530:	bfb8      	it	lt
 8003532:	9204      	strlt	r2, [sp, #16]
 8003534:	7823      	ldrb	r3, [r4, #0]
 8003536:	2b2e      	cmp	r3, #46	; 0x2e
 8003538:	d10c      	bne.n	8003554 <_svfiprintf_r+0x130>
 800353a:	7863      	ldrb	r3, [r4, #1]
 800353c:	2b2a      	cmp	r3, #42	; 0x2a
 800353e:	d135      	bne.n	80035ac <_svfiprintf_r+0x188>
 8003540:	9b03      	ldr	r3, [sp, #12]
 8003542:	1d1a      	adds	r2, r3, #4
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	9203      	str	r2, [sp, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	bfb8      	it	lt
 800354c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003550:	3402      	adds	r4, #2
 8003552:	9305      	str	r3, [sp, #20]
 8003554:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003620 <_svfiprintf_r+0x1fc>
 8003558:	7821      	ldrb	r1, [r4, #0]
 800355a:	2203      	movs	r2, #3
 800355c:	4650      	mov	r0, sl
 800355e:	f7fc fe3f 	bl	80001e0 <memchr>
 8003562:	b140      	cbz	r0, 8003576 <_svfiprintf_r+0x152>
 8003564:	2340      	movs	r3, #64	; 0x40
 8003566:	eba0 000a 	sub.w	r0, r0, sl
 800356a:	fa03 f000 	lsl.w	r0, r3, r0
 800356e:	9b04      	ldr	r3, [sp, #16]
 8003570:	4303      	orrs	r3, r0
 8003572:	3401      	adds	r4, #1
 8003574:	9304      	str	r3, [sp, #16]
 8003576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800357a:	4826      	ldr	r0, [pc, #152]	; (8003614 <_svfiprintf_r+0x1f0>)
 800357c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003580:	2206      	movs	r2, #6
 8003582:	f7fc fe2d 	bl	80001e0 <memchr>
 8003586:	2800      	cmp	r0, #0
 8003588:	d038      	beq.n	80035fc <_svfiprintf_r+0x1d8>
 800358a:	4b23      	ldr	r3, [pc, #140]	; (8003618 <_svfiprintf_r+0x1f4>)
 800358c:	bb1b      	cbnz	r3, 80035d6 <_svfiprintf_r+0x1b2>
 800358e:	9b03      	ldr	r3, [sp, #12]
 8003590:	3307      	adds	r3, #7
 8003592:	f023 0307 	bic.w	r3, r3, #7
 8003596:	3308      	adds	r3, #8
 8003598:	9303      	str	r3, [sp, #12]
 800359a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800359c:	4433      	add	r3, r6
 800359e:	9309      	str	r3, [sp, #36]	; 0x24
 80035a0:	e767      	b.n	8003472 <_svfiprintf_r+0x4e>
 80035a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80035a6:	460c      	mov	r4, r1
 80035a8:	2001      	movs	r0, #1
 80035aa:	e7a5      	b.n	80034f8 <_svfiprintf_r+0xd4>
 80035ac:	2300      	movs	r3, #0
 80035ae:	3401      	adds	r4, #1
 80035b0:	9305      	str	r3, [sp, #20]
 80035b2:	4619      	mov	r1, r3
 80035b4:	f04f 0c0a 	mov.w	ip, #10
 80035b8:	4620      	mov	r0, r4
 80035ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035be:	3a30      	subs	r2, #48	; 0x30
 80035c0:	2a09      	cmp	r2, #9
 80035c2:	d903      	bls.n	80035cc <_svfiprintf_r+0x1a8>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0c5      	beq.n	8003554 <_svfiprintf_r+0x130>
 80035c8:	9105      	str	r1, [sp, #20]
 80035ca:	e7c3      	b.n	8003554 <_svfiprintf_r+0x130>
 80035cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80035d0:	4604      	mov	r4, r0
 80035d2:	2301      	movs	r3, #1
 80035d4:	e7f0      	b.n	80035b8 <_svfiprintf_r+0x194>
 80035d6:	ab03      	add	r3, sp, #12
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	462a      	mov	r2, r5
 80035dc:	4b0f      	ldr	r3, [pc, #60]	; (800361c <_svfiprintf_r+0x1f8>)
 80035de:	a904      	add	r1, sp, #16
 80035e0:	4638      	mov	r0, r7
 80035e2:	f3af 8000 	nop.w
 80035e6:	1c42      	adds	r2, r0, #1
 80035e8:	4606      	mov	r6, r0
 80035ea:	d1d6      	bne.n	800359a <_svfiprintf_r+0x176>
 80035ec:	89ab      	ldrh	r3, [r5, #12]
 80035ee:	065b      	lsls	r3, r3, #25
 80035f0:	f53f af2c 	bmi.w	800344c <_svfiprintf_r+0x28>
 80035f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035f6:	b01d      	add	sp, #116	; 0x74
 80035f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035fc:	ab03      	add	r3, sp, #12
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	462a      	mov	r2, r5
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <_svfiprintf_r+0x1f8>)
 8003604:	a904      	add	r1, sp, #16
 8003606:	4638      	mov	r0, r7
 8003608:	f000 f87a 	bl	8003700 <_printf_i>
 800360c:	e7eb      	b.n	80035e6 <_svfiprintf_r+0x1c2>
 800360e:	bf00      	nop
 8003610:	08003c42 	.word	0x08003c42
 8003614:	08003c4c 	.word	0x08003c4c
 8003618:	00000000 	.word	0x00000000
 800361c:	0800336d 	.word	0x0800336d
 8003620:	08003c48 	.word	0x08003c48

08003624 <_printf_common>:
 8003624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003628:	4616      	mov	r6, r2
 800362a:	4699      	mov	r9, r3
 800362c:	688a      	ldr	r2, [r1, #8]
 800362e:	690b      	ldr	r3, [r1, #16]
 8003630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003634:	4293      	cmp	r3, r2
 8003636:	bfb8      	it	lt
 8003638:	4613      	movlt	r3, r2
 800363a:	6033      	str	r3, [r6, #0]
 800363c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003640:	4607      	mov	r7, r0
 8003642:	460c      	mov	r4, r1
 8003644:	b10a      	cbz	r2, 800364a <_printf_common+0x26>
 8003646:	3301      	adds	r3, #1
 8003648:	6033      	str	r3, [r6, #0]
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	0699      	lsls	r1, r3, #26
 800364e:	bf42      	ittt	mi
 8003650:	6833      	ldrmi	r3, [r6, #0]
 8003652:	3302      	addmi	r3, #2
 8003654:	6033      	strmi	r3, [r6, #0]
 8003656:	6825      	ldr	r5, [r4, #0]
 8003658:	f015 0506 	ands.w	r5, r5, #6
 800365c:	d106      	bne.n	800366c <_printf_common+0x48>
 800365e:	f104 0a19 	add.w	sl, r4, #25
 8003662:	68e3      	ldr	r3, [r4, #12]
 8003664:	6832      	ldr	r2, [r6, #0]
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	42ab      	cmp	r3, r5
 800366a:	dc26      	bgt.n	80036ba <_printf_common+0x96>
 800366c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003670:	1e13      	subs	r3, r2, #0
 8003672:	6822      	ldr	r2, [r4, #0]
 8003674:	bf18      	it	ne
 8003676:	2301      	movne	r3, #1
 8003678:	0692      	lsls	r2, r2, #26
 800367a:	d42b      	bmi.n	80036d4 <_printf_common+0xb0>
 800367c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003680:	4649      	mov	r1, r9
 8003682:	4638      	mov	r0, r7
 8003684:	47c0      	blx	r8
 8003686:	3001      	adds	r0, #1
 8003688:	d01e      	beq.n	80036c8 <_printf_common+0xa4>
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	68e5      	ldr	r5, [r4, #12]
 800368e:	6832      	ldr	r2, [r6, #0]
 8003690:	f003 0306 	and.w	r3, r3, #6
 8003694:	2b04      	cmp	r3, #4
 8003696:	bf08      	it	eq
 8003698:	1aad      	subeq	r5, r5, r2
 800369a:	68a3      	ldr	r3, [r4, #8]
 800369c:	6922      	ldr	r2, [r4, #16]
 800369e:	bf0c      	ite	eq
 80036a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036a4:	2500      	movne	r5, #0
 80036a6:	4293      	cmp	r3, r2
 80036a8:	bfc4      	itt	gt
 80036aa:	1a9b      	subgt	r3, r3, r2
 80036ac:	18ed      	addgt	r5, r5, r3
 80036ae:	2600      	movs	r6, #0
 80036b0:	341a      	adds	r4, #26
 80036b2:	42b5      	cmp	r5, r6
 80036b4:	d11a      	bne.n	80036ec <_printf_common+0xc8>
 80036b6:	2000      	movs	r0, #0
 80036b8:	e008      	b.n	80036cc <_printf_common+0xa8>
 80036ba:	2301      	movs	r3, #1
 80036bc:	4652      	mov	r2, sl
 80036be:	4649      	mov	r1, r9
 80036c0:	4638      	mov	r0, r7
 80036c2:	47c0      	blx	r8
 80036c4:	3001      	adds	r0, #1
 80036c6:	d103      	bne.n	80036d0 <_printf_common+0xac>
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d0:	3501      	adds	r5, #1
 80036d2:	e7c6      	b.n	8003662 <_printf_common+0x3e>
 80036d4:	18e1      	adds	r1, r4, r3
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	2030      	movs	r0, #48	; 0x30
 80036da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036de:	4422      	add	r2, r4
 80036e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036e8:	3302      	adds	r3, #2
 80036ea:	e7c7      	b.n	800367c <_printf_common+0x58>
 80036ec:	2301      	movs	r3, #1
 80036ee:	4622      	mov	r2, r4
 80036f0:	4649      	mov	r1, r9
 80036f2:	4638      	mov	r0, r7
 80036f4:	47c0      	blx	r8
 80036f6:	3001      	adds	r0, #1
 80036f8:	d0e6      	beq.n	80036c8 <_printf_common+0xa4>
 80036fa:	3601      	adds	r6, #1
 80036fc:	e7d9      	b.n	80036b2 <_printf_common+0x8e>
	...

08003700 <_printf_i>:
 8003700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003704:	460c      	mov	r4, r1
 8003706:	4691      	mov	r9, r2
 8003708:	7e27      	ldrb	r7, [r4, #24]
 800370a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800370c:	2f78      	cmp	r7, #120	; 0x78
 800370e:	4680      	mov	r8, r0
 8003710:	469a      	mov	sl, r3
 8003712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003716:	d807      	bhi.n	8003728 <_printf_i+0x28>
 8003718:	2f62      	cmp	r7, #98	; 0x62
 800371a:	d80a      	bhi.n	8003732 <_printf_i+0x32>
 800371c:	2f00      	cmp	r7, #0
 800371e:	f000 80d8 	beq.w	80038d2 <_printf_i+0x1d2>
 8003722:	2f58      	cmp	r7, #88	; 0x58
 8003724:	f000 80a3 	beq.w	800386e <_printf_i+0x16e>
 8003728:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800372c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003730:	e03a      	b.n	80037a8 <_printf_i+0xa8>
 8003732:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003736:	2b15      	cmp	r3, #21
 8003738:	d8f6      	bhi.n	8003728 <_printf_i+0x28>
 800373a:	a001      	add	r0, pc, #4	; (adr r0, 8003740 <_printf_i+0x40>)
 800373c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003740:	08003799 	.word	0x08003799
 8003744:	080037ad 	.word	0x080037ad
 8003748:	08003729 	.word	0x08003729
 800374c:	08003729 	.word	0x08003729
 8003750:	08003729 	.word	0x08003729
 8003754:	08003729 	.word	0x08003729
 8003758:	080037ad 	.word	0x080037ad
 800375c:	08003729 	.word	0x08003729
 8003760:	08003729 	.word	0x08003729
 8003764:	08003729 	.word	0x08003729
 8003768:	08003729 	.word	0x08003729
 800376c:	080038b9 	.word	0x080038b9
 8003770:	080037dd 	.word	0x080037dd
 8003774:	0800389b 	.word	0x0800389b
 8003778:	08003729 	.word	0x08003729
 800377c:	08003729 	.word	0x08003729
 8003780:	080038db 	.word	0x080038db
 8003784:	08003729 	.word	0x08003729
 8003788:	080037dd 	.word	0x080037dd
 800378c:	08003729 	.word	0x08003729
 8003790:	08003729 	.word	0x08003729
 8003794:	080038a3 	.word	0x080038a3
 8003798:	680b      	ldr	r3, [r1, #0]
 800379a:	1d1a      	adds	r2, r3, #4
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	600a      	str	r2, [r1, #0]
 80037a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80037a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0a3      	b.n	80038f4 <_printf_i+0x1f4>
 80037ac:	6825      	ldr	r5, [r4, #0]
 80037ae:	6808      	ldr	r0, [r1, #0]
 80037b0:	062e      	lsls	r6, r5, #24
 80037b2:	f100 0304 	add.w	r3, r0, #4
 80037b6:	d50a      	bpl.n	80037ce <_printf_i+0xce>
 80037b8:	6805      	ldr	r5, [r0, #0]
 80037ba:	600b      	str	r3, [r1, #0]
 80037bc:	2d00      	cmp	r5, #0
 80037be:	da03      	bge.n	80037c8 <_printf_i+0xc8>
 80037c0:	232d      	movs	r3, #45	; 0x2d
 80037c2:	426d      	negs	r5, r5
 80037c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037c8:	485e      	ldr	r0, [pc, #376]	; (8003944 <_printf_i+0x244>)
 80037ca:	230a      	movs	r3, #10
 80037cc:	e019      	b.n	8003802 <_printf_i+0x102>
 80037ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80037d2:	6805      	ldr	r5, [r0, #0]
 80037d4:	600b      	str	r3, [r1, #0]
 80037d6:	bf18      	it	ne
 80037d8:	b22d      	sxthne	r5, r5
 80037da:	e7ef      	b.n	80037bc <_printf_i+0xbc>
 80037dc:	680b      	ldr	r3, [r1, #0]
 80037de:	6825      	ldr	r5, [r4, #0]
 80037e0:	1d18      	adds	r0, r3, #4
 80037e2:	6008      	str	r0, [r1, #0]
 80037e4:	0628      	lsls	r0, r5, #24
 80037e6:	d501      	bpl.n	80037ec <_printf_i+0xec>
 80037e8:	681d      	ldr	r5, [r3, #0]
 80037ea:	e002      	b.n	80037f2 <_printf_i+0xf2>
 80037ec:	0669      	lsls	r1, r5, #25
 80037ee:	d5fb      	bpl.n	80037e8 <_printf_i+0xe8>
 80037f0:	881d      	ldrh	r5, [r3, #0]
 80037f2:	4854      	ldr	r0, [pc, #336]	; (8003944 <_printf_i+0x244>)
 80037f4:	2f6f      	cmp	r7, #111	; 0x6f
 80037f6:	bf0c      	ite	eq
 80037f8:	2308      	moveq	r3, #8
 80037fa:	230a      	movne	r3, #10
 80037fc:	2100      	movs	r1, #0
 80037fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003802:	6866      	ldr	r6, [r4, #4]
 8003804:	60a6      	str	r6, [r4, #8]
 8003806:	2e00      	cmp	r6, #0
 8003808:	bfa2      	ittt	ge
 800380a:	6821      	ldrge	r1, [r4, #0]
 800380c:	f021 0104 	bicge.w	r1, r1, #4
 8003810:	6021      	strge	r1, [r4, #0]
 8003812:	b90d      	cbnz	r5, 8003818 <_printf_i+0x118>
 8003814:	2e00      	cmp	r6, #0
 8003816:	d04d      	beq.n	80038b4 <_printf_i+0x1b4>
 8003818:	4616      	mov	r6, r2
 800381a:	fbb5 f1f3 	udiv	r1, r5, r3
 800381e:	fb03 5711 	mls	r7, r3, r1, r5
 8003822:	5dc7      	ldrb	r7, [r0, r7]
 8003824:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003828:	462f      	mov	r7, r5
 800382a:	42bb      	cmp	r3, r7
 800382c:	460d      	mov	r5, r1
 800382e:	d9f4      	bls.n	800381a <_printf_i+0x11a>
 8003830:	2b08      	cmp	r3, #8
 8003832:	d10b      	bne.n	800384c <_printf_i+0x14c>
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	07df      	lsls	r7, r3, #31
 8003838:	d508      	bpl.n	800384c <_printf_i+0x14c>
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	6861      	ldr	r1, [r4, #4]
 800383e:	4299      	cmp	r1, r3
 8003840:	bfde      	ittt	le
 8003842:	2330      	movle	r3, #48	; 0x30
 8003844:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003848:	f106 36ff 	addle.w	r6, r6, #4294967295
 800384c:	1b92      	subs	r2, r2, r6
 800384e:	6122      	str	r2, [r4, #16]
 8003850:	f8cd a000 	str.w	sl, [sp]
 8003854:	464b      	mov	r3, r9
 8003856:	aa03      	add	r2, sp, #12
 8003858:	4621      	mov	r1, r4
 800385a:	4640      	mov	r0, r8
 800385c:	f7ff fee2 	bl	8003624 <_printf_common>
 8003860:	3001      	adds	r0, #1
 8003862:	d14c      	bne.n	80038fe <_printf_i+0x1fe>
 8003864:	f04f 30ff 	mov.w	r0, #4294967295
 8003868:	b004      	add	sp, #16
 800386a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800386e:	4835      	ldr	r0, [pc, #212]	; (8003944 <_printf_i+0x244>)
 8003870:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	680e      	ldr	r6, [r1, #0]
 8003878:	061f      	lsls	r7, r3, #24
 800387a:	f856 5b04 	ldr.w	r5, [r6], #4
 800387e:	600e      	str	r6, [r1, #0]
 8003880:	d514      	bpl.n	80038ac <_printf_i+0x1ac>
 8003882:	07d9      	lsls	r1, r3, #31
 8003884:	bf44      	itt	mi
 8003886:	f043 0320 	orrmi.w	r3, r3, #32
 800388a:	6023      	strmi	r3, [r4, #0]
 800388c:	b91d      	cbnz	r5, 8003896 <_printf_i+0x196>
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	f023 0320 	bic.w	r3, r3, #32
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	2310      	movs	r3, #16
 8003898:	e7b0      	b.n	80037fc <_printf_i+0xfc>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	f043 0320 	orr.w	r3, r3, #32
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	2378      	movs	r3, #120	; 0x78
 80038a4:	4828      	ldr	r0, [pc, #160]	; (8003948 <_printf_i+0x248>)
 80038a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038aa:	e7e3      	b.n	8003874 <_printf_i+0x174>
 80038ac:	065e      	lsls	r6, r3, #25
 80038ae:	bf48      	it	mi
 80038b0:	b2ad      	uxthmi	r5, r5
 80038b2:	e7e6      	b.n	8003882 <_printf_i+0x182>
 80038b4:	4616      	mov	r6, r2
 80038b6:	e7bb      	b.n	8003830 <_printf_i+0x130>
 80038b8:	680b      	ldr	r3, [r1, #0]
 80038ba:	6826      	ldr	r6, [r4, #0]
 80038bc:	6960      	ldr	r0, [r4, #20]
 80038be:	1d1d      	adds	r5, r3, #4
 80038c0:	600d      	str	r5, [r1, #0]
 80038c2:	0635      	lsls	r5, r6, #24
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	d501      	bpl.n	80038cc <_printf_i+0x1cc>
 80038c8:	6018      	str	r0, [r3, #0]
 80038ca:	e002      	b.n	80038d2 <_printf_i+0x1d2>
 80038cc:	0671      	lsls	r1, r6, #25
 80038ce:	d5fb      	bpl.n	80038c8 <_printf_i+0x1c8>
 80038d0:	8018      	strh	r0, [r3, #0]
 80038d2:	2300      	movs	r3, #0
 80038d4:	6123      	str	r3, [r4, #16]
 80038d6:	4616      	mov	r6, r2
 80038d8:	e7ba      	b.n	8003850 <_printf_i+0x150>
 80038da:	680b      	ldr	r3, [r1, #0]
 80038dc:	1d1a      	adds	r2, r3, #4
 80038de:	600a      	str	r2, [r1, #0]
 80038e0:	681e      	ldr	r6, [r3, #0]
 80038e2:	6862      	ldr	r2, [r4, #4]
 80038e4:	2100      	movs	r1, #0
 80038e6:	4630      	mov	r0, r6
 80038e8:	f7fc fc7a 	bl	80001e0 <memchr>
 80038ec:	b108      	cbz	r0, 80038f2 <_printf_i+0x1f2>
 80038ee:	1b80      	subs	r0, r0, r6
 80038f0:	6060      	str	r0, [r4, #4]
 80038f2:	6863      	ldr	r3, [r4, #4]
 80038f4:	6123      	str	r3, [r4, #16]
 80038f6:	2300      	movs	r3, #0
 80038f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038fc:	e7a8      	b.n	8003850 <_printf_i+0x150>
 80038fe:	6923      	ldr	r3, [r4, #16]
 8003900:	4632      	mov	r2, r6
 8003902:	4649      	mov	r1, r9
 8003904:	4640      	mov	r0, r8
 8003906:	47d0      	blx	sl
 8003908:	3001      	adds	r0, #1
 800390a:	d0ab      	beq.n	8003864 <_printf_i+0x164>
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	079b      	lsls	r3, r3, #30
 8003910:	d413      	bmi.n	800393a <_printf_i+0x23a>
 8003912:	68e0      	ldr	r0, [r4, #12]
 8003914:	9b03      	ldr	r3, [sp, #12]
 8003916:	4298      	cmp	r0, r3
 8003918:	bfb8      	it	lt
 800391a:	4618      	movlt	r0, r3
 800391c:	e7a4      	b.n	8003868 <_printf_i+0x168>
 800391e:	2301      	movs	r3, #1
 8003920:	4632      	mov	r2, r6
 8003922:	4649      	mov	r1, r9
 8003924:	4640      	mov	r0, r8
 8003926:	47d0      	blx	sl
 8003928:	3001      	adds	r0, #1
 800392a:	d09b      	beq.n	8003864 <_printf_i+0x164>
 800392c:	3501      	adds	r5, #1
 800392e:	68e3      	ldr	r3, [r4, #12]
 8003930:	9903      	ldr	r1, [sp, #12]
 8003932:	1a5b      	subs	r3, r3, r1
 8003934:	42ab      	cmp	r3, r5
 8003936:	dcf2      	bgt.n	800391e <_printf_i+0x21e>
 8003938:	e7eb      	b.n	8003912 <_printf_i+0x212>
 800393a:	2500      	movs	r5, #0
 800393c:	f104 0619 	add.w	r6, r4, #25
 8003940:	e7f5      	b.n	800392e <_printf_i+0x22e>
 8003942:	bf00      	nop
 8003944:	08003c53 	.word	0x08003c53
 8003948:	08003c64 	.word	0x08003c64

0800394c <memcpy>:
 800394c:	440a      	add	r2, r1
 800394e:	4291      	cmp	r1, r2
 8003950:	f100 33ff 	add.w	r3, r0, #4294967295
 8003954:	d100      	bne.n	8003958 <memcpy+0xc>
 8003956:	4770      	bx	lr
 8003958:	b510      	push	{r4, lr}
 800395a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800395e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003962:	4291      	cmp	r1, r2
 8003964:	d1f9      	bne.n	800395a <memcpy+0xe>
 8003966:	bd10      	pop	{r4, pc}

08003968 <memmove>:
 8003968:	4288      	cmp	r0, r1
 800396a:	b510      	push	{r4, lr}
 800396c:	eb01 0402 	add.w	r4, r1, r2
 8003970:	d902      	bls.n	8003978 <memmove+0x10>
 8003972:	4284      	cmp	r4, r0
 8003974:	4623      	mov	r3, r4
 8003976:	d807      	bhi.n	8003988 <memmove+0x20>
 8003978:	1e43      	subs	r3, r0, #1
 800397a:	42a1      	cmp	r1, r4
 800397c:	d008      	beq.n	8003990 <memmove+0x28>
 800397e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003982:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003986:	e7f8      	b.n	800397a <memmove+0x12>
 8003988:	4402      	add	r2, r0
 800398a:	4601      	mov	r1, r0
 800398c:	428a      	cmp	r2, r1
 800398e:	d100      	bne.n	8003992 <memmove+0x2a>
 8003990:	bd10      	pop	{r4, pc}
 8003992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003996:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800399a:	e7f7      	b.n	800398c <memmove+0x24>

0800399c <_free_r>:
 800399c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800399e:	2900      	cmp	r1, #0
 80039a0:	d048      	beq.n	8003a34 <_free_r+0x98>
 80039a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039a6:	9001      	str	r0, [sp, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f1a1 0404 	sub.w	r4, r1, #4
 80039ae:	bfb8      	it	lt
 80039b0:	18e4      	addlt	r4, r4, r3
 80039b2:	f000 f8d3 	bl	8003b5c <__malloc_lock>
 80039b6:	4a20      	ldr	r2, [pc, #128]	; (8003a38 <_free_r+0x9c>)
 80039b8:	9801      	ldr	r0, [sp, #4]
 80039ba:	6813      	ldr	r3, [r2, #0]
 80039bc:	4615      	mov	r5, r2
 80039be:	b933      	cbnz	r3, 80039ce <_free_r+0x32>
 80039c0:	6063      	str	r3, [r4, #4]
 80039c2:	6014      	str	r4, [r2, #0]
 80039c4:	b003      	add	sp, #12
 80039c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039ca:	f000 b8cd 	b.w	8003b68 <__malloc_unlock>
 80039ce:	42a3      	cmp	r3, r4
 80039d0:	d90b      	bls.n	80039ea <_free_r+0x4e>
 80039d2:	6821      	ldr	r1, [r4, #0]
 80039d4:	1862      	adds	r2, r4, r1
 80039d6:	4293      	cmp	r3, r2
 80039d8:	bf04      	itt	eq
 80039da:	681a      	ldreq	r2, [r3, #0]
 80039dc:	685b      	ldreq	r3, [r3, #4]
 80039de:	6063      	str	r3, [r4, #4]
 80039e0:	bf04      	itt	eq
 80039e2:	1852      	addeq	r2, r2, r1
 80039e4:	6022      	streq	r2, [r4, #0]
 80039e6:	602c      	str	r4, [r5, #0]
 80039e8:	e7ec      	b.n	80039c4 <_free_r+0x28>
 80039ea:	461a      	mov	r2, r3
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	b10b      	cbz	r3, 80039f4 <_free_r+0x58>
 80039f0:	42a3      	cmp	r3, r4
 80039f2:	d9fa      	bls.n	80039ea <_free_r+0x4e>
 80039f4:	6811      	ldr	r1, [r2, #0]
 80039f6:	1855      	adds	r5, r2, r1
 80039f8:	42a5      	cmp	r5, r4
 80039fa:	d10b      	bne.n	8003a14 <_free_r+0x78>
 80039fc:	6824      	ldr	r4, [r4, #0]
 80039fe:	4421      	add	r1, r4
 8003a00:	1854      	adds	r4, r2, r1
 8003a02:	42a3      	cmp	r3, r4
 8003a04:	6011      	str	r1, [r2, #0]
 8003a06:	d1dd      	bne.n	80039c4 <_free_r+0x28>
 8003a08:	681c      	ldr	r4, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	6053      	str	r3, [r2, #4]
 8003a0e:	4421      	add	r1, r4
 8003a10:	6011      	str	r1, [r2, #0]
 8003a12:	e7d7      	b.n	80039c4 <_free_r+0x28>
 8003a14:	d902      	bls.n	8003a1c <_free_r+0x80>
 8003a16:	230c      	movs	r3, #12
 8003a18:	6003      	str	r3, [r0, #0]
 8003a1a:	e7d3      	b.n	80039c4 <_free_r+0x28>
 8003a1c:	6825      	ldr	r5, [r4, #0]
 8003a1e:	1961      	adds	r1, r4, r5
 8003a20:	428b      	cmp	r3, r1
 8003a22:	bf04      	itt	eq
 8003a24:	6819      	ldreq	r1, [r3, #0]
 8003a26:	685b      	ldreq	r3, [r3, #4]
 8003a28:	6063      	str	r3, [r4, #4]
 8003a2a:	bf04      	itt	eq
 8003a2c:	1949      	addeq	r1, r1, r5
 8003a2e:	6021      	streq	r1, [r4, #0]
 8003a30:	6054      	str	r4, [r2, #4]
 8003a32:	e7c7      	b.n	80039c4 <_free_r+0x28>
 8003a34:	b003      	add	sp, #12
 8003a36:	bd30      	pop	{r4, r5, pc}
 8003a38:	200000a0 	.word	0x200000a0

08003a3c <_malloc_r>:
 8003a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3e:	1ccd      	adds	r5, r1, #3
 8003a40:	f025 0503 	bic.w	r5, r5, #3
 8003a44:	3508      	adds	r5, #8
 8003a46:	2d0c      	cmp	r5, #12
 8003a48:	bf38      	it	cc
 8003a4a:	250c      	movcc	r5, #12
 8003a4c:	2d00      	cmp	r5, #0
 8003a4e:	4606      	mov	r6, r0
 8003a50:	db01      	blt.n	8003a56 <_malloc_r+0x1a>
 8003a52:	42a9      	cmp	r1, r5
 8003a54:	d903      	bls.n	8003a5e <_malloc_r+0x22>
 8003a56:	230c      	movs	r3, #12
 8003a58:	6033      	str	r3, [r6, #0]
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a5e:	f000 f87d 	bl	8003b5c <__malloc_lock>
 8003a62:	4921      	ldr	r1, [pc, #132]	; (8003ae8 <_malloc_r+0xac>)
 8003a64:	680a      	ldr	r2, [r1, #0]
 8003a66:	4614      	mov	r4, r2
 8003a68:	b99c      	cbnz	r4, 8003a92 <_malloc_r+0x56>
 8003a6a:	4f20      	ldr	r7, [pc, #128]	; (8003aec <_malloc_r+0xb0>)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	b923      	cbnz	r3, 8003a7a <_malloc_r+0x3e>
 8003a70:	4621      	mov	r1, r4
 8003a72:	4630      	mov	r0, r6
 8003a74:	f000 f862 	bl	8003b3c <_sbrk_r>
 8003a78:	6038      	str	r0, [r7, #0]
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	f000 f85d 	bl	8003b3c <_sbrk_r>
 8003a82:	1c43      	adds	r3, r0, #1
 8003a84:	d123      	bne.n	8003ace <_malloc_r+0x92>
 8003a86:	230c      	movs	r3, #12
 8003a88:	6033      	str	r3, [r6, #0]
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	f000 f86c 	bl	8003b68 <__malloc_unlock>
 8003a90:	e7e3      	b.n	8003a5a <_malloc_r+0x1e>
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	1b5b      	subs	r3, r3, r5
 8003a96:	d417      	bmi.n	8003ac8 <_malloc_r+0x8c>
 8003a98:	2b0b      	cmp	r3, #11
 8003a9a:	d903      	bls.n	8003aa4 <_malloc_r+0x68>
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	441c      	add	r4, r3
 8003aa0:	6025      	str	r5, [r4, #0]
 8003aa2:	e004      	b.n	8003aae <_malloc_r+0x72>
 8003aa4:	6863      	ldr	r3, [r4, #4]
 8003aa6:	42a2      	cmp	r2, r4
 8003aa8:	bf0c      	ite	eq
 8003aaa:	600b      	streq	r3, [r1, #0]
 8003aac:	6053      	strne	r3, [r2, #4]
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f000 f85a 	bl	8003b68 <__malloc_unlock>
 8003ab4:	f104 000b 	add.w	r0, r4, #11
 8003ab8:	1d23      	adds	r3, r4, #4
 8003aba:	f020 0007 	bic.w	r0, r0, #7
 8003abe:	1ac2      	subs	r2, r0, r3
 8003ac0:	d0cc      	beq.n	8003a5c <_malloc_r+0x20>
 8003ac2:	1a1b      	subs	r3, r3, r0
 8003ac4:	50a3      	str	r3, [r4, r2]
 8003ac6:	e7c9      	b.n	8003a5c <_malloc_r+0x20>
 8003ac8:	4622      	mov	r2, r4
 8003aca:	6864      	ldr	r4, [r4, #4]
 8003acc:	e7cc      	b.n	8003a68 <_malloc_r+0x2c>
 8003ace:	1cc4      	adds	r4, r0, #3
 8003ad0:	f024 0403 	bic.w	r4, r4, #3
 8003ad4:	42a0      	cmp	r0, r4
 8003ad6:	d0e3      	beq.n	8003aa0 <_malloc_r+0x64>
 8003ad8:	1a21      	subs	r1, r4, r0
 8003ada:	4630      	mov	r0, r6
 8003adc:	f000 f82e 	bl	8003b3c <_sbrk_r>
 8003ae0:	3001      	adds	r0, #1
 8003ae2:	d1dd      	bne.n	8003aa0 <_malloc_r+0x64>
 8003ae4:	e7cf      	b.n	8003a86 <_malloc_r+0x4a>
 8003ae6:	bf00      	nop
 8003ae8:	200000a0 	.word	0x200000a0
 8003aec:	200000a4 	.word	0x200000a4

08003af0 <_realloc_r>:
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af2:	4607      	mov	r7, r0
 8003af4:	4614      	mov	r4, r2
 8003af6:	460e      	mov	r6, r1
 8003af8:	b921      	cbnz	r1, 8003b04 <_realloc_r+0x14>
 8003afa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003afe:	4611      	mov	r1, r2
 8003b00:	f7ff bf9c 	b.w	8003a3c <_malloc_r>
 8003b04:	b922      	cbnz	r2, 8003b10 <_realloc_r+0x20>
 8003b06:	f7ff ff49 	bl	800399c <_free_r>
 8003b0a:	4625      	mov	r5, r4
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b10:	f000 f830 	bl	8003b74 <_malloc_usable_size_r>
 8003b14:	42a0      	cmp	r0, r4
 8003b16:	d20f      	bcs.n	8003b38 <_realloc_r+0x48>
 8003b18:	4621      	mov	r1, r4
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	f7ff ff8e 	bl	8003a3c <_malloc_r>
 8003b20:	4605      	mov	r5, r0
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d0f2      	beq.n	8003b0c <_realloc_r+0x1c>
 8003b26:	4631      	mov	r1, r6
 8003b28:	4622      	mov	r2, r4
 8003b2a:	f7ff ff0f 	bl	800394c <memcpy>
 8003b2e:	4631      	mov	r1, r6
 8003b30:	4638      	mov	r0, r7
 8003b32:	f7ff ff33 	bl	800399c <_free_r>
 8003b36:	e7e9      	b.n	8003b0c <_realloc_r+0x1c>
 8003b38:	4635      	mov	r5, r6
 8003b3a:	e7e7      	b.n	8003b0c <_realloc_r+0x1c>

08003b3c <_sbrk_r>:
 8003b3c:	b538      	push	{r3, r4, r5, lr}
 8003b3e:	4d06      	ldr	r5, [pc, #24]	; (8003b58 <_sbrk_r+0x1c>)
 8003b40:	2300      	movs	r3, #0
 8003b42:	4604      	mov	r4, r0
 8003b44:	4608      	mov	r0, r1
 8003b46:	602b      	str	r3, [r5, #0]
 8003b48:	f000 f81e 	bl	8003b88 <_sbrk>
 8003b4c:	1c43      	adds	r3, r0, #1
 8003b4e:	d102      	bne.n	8003b56 <_sbrk_r+0x1a>
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	b103      	cbz	r3, 8003b56 <_sbrk_r+0x1a>
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	bd38      	pop	{r3, r4, r5, pc}
 8003b58:	200001dc 	.word	0x200001dc

08003b5c <__malloc_lock>:
 8003b5c:	4801      	ldr	r0, [pc, #4]	; (8003b64 <__malloc_lock+0x8>)
 8003b5e:	f000 b811 	b.w	8003b84 <__retarget_lock_acquire_recursive>
 8003b62:	bf00      	nop
 8003b64:	200001e4 	.word	0x200001e4

08003b68 <__malloc_unlock>:
 8003b68:	4801      	ldr	r0, [pc, #4]	; (8003b70 <__malloc_unlock+0x8>)
 8003b6a:	f000 b80c 	b.w	8003b86 <__retarget_lock_release_recursive>
 8003b6e:	bf00      	nop
 8003b70:	200001e4 	.word	0x200001e4

08003b74 <_malloc_usable_size_r>:
 8003b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b78:	1f18      	subs	r0, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bfbc      	itt	lt
 8003b7e:	580b      	ldrlt	r3, [r1, r0]
 8003b80:	18c0      	addlt	r0, r0, r3
 8003b82:	4770      	bx	lr

08003b84 <__retarget_lock_acquire_recursive>:
 8003b84:	4770      	bx	lr

08003b86 <__retarget_lock_release_recursive>:
 8003b86:	4770      	bx	lr

08003b88 <_sbrk>:
 8003b88:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <_sbrk+0x14>)
 8003b8a:	6819      	ldr	r1, [r3, #0]
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	b909      	cbnz	r1, 8003b94 <_sbrk+0xc>
 8003b90:	4903      	ldr	r1, [pc, #12]	; (8003ba0 <_sbrk+0x18>)
 8003b92:	6019      	str	r1, [r3, #0]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	4402      	add	r2, r0
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	4770      	bx	lr
 8003b9c:	200000a8 	.word	0x200000a8
 8003ba0:	200001f0 	.word	0x200001f0

08003ba4 <_init>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	bf00      	nop
 8003ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003baa:	bc08      	pop	{r3}
 8003bac:	469e      	mov	lr, r3
 8003bae:	4770      	bx	lr

08003bb0 <_fini>:
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	bf00      	nop
 8003bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb6:	bc08      	pop	{r3}
 8003bb8:	469e      	mov	lr, r3
 8003bba:	4770      	bx	lr
 8003bbc:	0000      	movs	r0, r0
	...
